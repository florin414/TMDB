<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Duende.IdentityServer</name>
    </assembly>
    <members>
        <member name="T:Duende.IdentityServer.Configuration.CryptoHelper">
            <summary>
            Crypto helper
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.CreateRsaSecurityKey(System.Int32)">
            <summary>
            Creates a new RSA security key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.CreateECDsaSecurityKey(System.String)">
            <summary>
            Creates a new ECDSA security key.
            </summary>
            <param name="curve">The name of the curve as defined in
            https://tools.ietf.org/html/rfc7518#section-6.2.1.1.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.CreateRsaSecurityKey(System.Security.Cryptography.RSAParameters,System.String)">
            <summary>
            Creates an RSA security key.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.CreateHashClaimValue(System.String,System.String)">
            <summary>
            Creates the hash for the various hash claims (e.g. c_hash, at_hash or s_hash).
            </summary>
            <param name="value">The value to hash.</param>
            <param name="tokenSigningAlgorithm">The token signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.GetHashFunctionForSigningAlgorithm(System.String)">
            <summary>
            Returns the matching hash function for a token signing algorithm
            </summary>
            <param name="signingAlgorithm"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.GetHashAlgorithmForSigningAlgorithm(System.String)">
            <summary>
            Returns the matching hashing algorithm for a token signing algorithm
            </summary>
            <param name="signingAlgorithm">The signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.GetCurveFromCrvValue(System.String)">
            <summary>
            Returns the matching named curve for RFC 7518 crv value
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.GetCurveNameFromSigningAlgorithm(System.String)">
            <summary>
            Returns the matching curve name for signing algorithm.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.GetCrvValueFromCurve(System.Security.Cryptography.ECCurve)">
            <summary>
            Return the matching RFC 7518 crv value for curve
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.NameType">
            <summary>
            Describes the string so we know what to search for in certificate store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Configuration.NameType.SubjectDistinguishedName">
            <summary>
            subject distinguished name
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Configuration.NameType.Thumbprint">
            <summary>
            thumbprint
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.IdentityServerBuilder">
            <summary>
            IdentityServer helper class for DI configuration
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.IdentityServerBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Configuration.IdentityServerBuilder"/> class.
            </summary>
            <param name="services">The services.</param>
            <exception cref="T:System.ArgumentNullException">services</exception>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerBuilder.Services">
            <summary>
            Gets the services.
            </summary>
            <value>
            The services.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.AuthenticationOptions">
            <summary>
            Configures the login and logout views and behavior.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CookieAuthenticationScheme">
            <summary>
            Sets the cookie authentication scheme configured by the host used for interactive users. If not set, the scheme will be inferred from the host's default authentication scheme.
            This setting is typically used when AddPolicyScheme is used in the host as the default scheme.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CookieLifetime">
            <summary>
            Sets the cookie lifetime (only effective if the IdentityServer-provided cookie handler is used)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CookieSlidingExpiration">
            <summary>
            Specifies if the cookie should be sliding or not (only effective if the built-in cookie middleware is used)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CookieSameSiteMode">
            <summary>
            Specifies the SameSite mode for the internal authentication and temp cookie
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.RequireAuthenticatedUserForSignOutMessage">
            <summary>
            Indicates if user must be authenticated to accept parameters to end session endpoint. Defaults to false.
            </summary>
            <value>
            <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CheckSessionCookieName">
            <summary>
            Gets or sets the name of the cookie used for the check session endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CheckSessionCookieDomain">
            <summary>
            Gets or sets the domain of the cookie used for the check session endpoint. Defaults to null.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CheckSessionCookieSameSiteMode">
            <summary>
            Gets or sets the SameSite mode of the cookie used for the check session endpoint. Defaults to SameSiteMode.None.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.RequireCspFrameSrcForSignout">
            <summary>
            If set, will require frame-src CSP headers being emitted on the end session callback endpoint which renders iframes to clients for front-channel sign out notification.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CoordinateClientLifetimesWithUserSession">
            <summary>
            When enabled, all clients' token lifetimes (e.g. refresh tokens) will be tied to the user's session lifetime.
            This means when the user logs out, any revokable tokens will be removed.
            If using server-side sessions, expired sessions will also remove any revokable tokens, and backchannel logout will be triggered.
            An individual client can override this setting with its own CoordinateLifetimeWithUserSession configuration setting.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.CachingOptions">
            <summary>
            Caching options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CachingOptions.ClientStoreExpiration">
            <summary>
            Gets or sets the client store expiration.
            </summary>
            <value>
            The client store expiration.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CachingOptions.ResourceStoreExpiration">
            <summary>
            Gets or sets the scope store expiration.
            </summary>
            <value>
            The scope store expiration.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CachingOptions.CorsExpiration">
            <summary>
            Gets or sets the CORS origin expiration.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CachingOptions.IdentityProviderCacheDuration">
            <summary>
            Duration identity provider store cache duration
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CachingOptions.CacheLockTimeout">
            <summary>
            The timeout for concurrency locking in the default cache.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.CibaOptions">
            <summary>
            Configures client initiated backchannel authentication
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CibaOptions.DefaultLifetime">
            <summary>
            Gets or sets the default lifetime of the request in seconds.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CibaOptions.DefaultPollingInterval">
            <summary>
            Gets or sets the polling interval in seconds.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.CorsOptions">
            <summary>
            Options for CORS
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CorsOptions.CorsPolicyName">
            <summary>
            Gets or sets the name of the cors policy.
            </summary>
            <value>
            The name of the cors policy.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CorsOptions.PreflightCacheDuration">
            <summary>
            The value to be used in the preflight `Access-Control-Max-Age` response header.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CorsOptions.CorsPaths">
            <summary>
            Gets or sets the cors paths.
            </summary>
            <value>
            The cors paths.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.CspOptions">
            <summary>
            Options for Content Security Policy
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CspOptions.Level">
            <summary>
            Gets or sets the minimum CSP level.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CspOptions.AddDeprecatedHeader">
            <summary>
            Gets or sets a value indicating whether the deprecated X-Content-Security-Policy header should be added.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.DeviceFlowOptions">
            <summary>
            Configures device flow
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DeviceFlowOptions.DefaultUserCodeType">
            <summary>
            Gets or sets the default type of the user code.
            </summary>
            <value>
            The default type of the user code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DeviceFlowOptions.Interval">
            <summary>
            Gets or sets the polling interval in seconds.
            </summary>
            <value>
            The interval in seconds.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.DiscoveryOptions">
            <summary>
            Options class to configure discovery endpoint
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowEndpoints">
            <summary>
            Show endpoints
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowKeySet">
            <summary>
            Show signing keys
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowIdentityScopes">
            <summary>
            Show identity scopes
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowApiScopes">
            <summary>
            Show API scopes
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowClaims">
            <summary>
            Show identity claims
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowResponseTypes">
            <summary>
            Show response types
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowResponseModes">
            <summary>
            Show response modes
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowGrantTypes">
            <summary>
            Show standard grant types
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowExtensionGrantTypes">
            <summary>
            Show custom grant types
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowTokenEndpointAuthenticationMethods">
            <summary>
            Show token endpoint authentication methods
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ExpandRelativePathsInCustomEntries">
            <summary>
            Turns relative paths that start with ~/ into absolute paths
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ResponseCacheInterval">
            <summary>
            Sets the maxage value of the cache control header (in seconds) of the HTTP response. This gives clients a hint how often they should refresh their cached copy of the discovery document. If set to 0 no-cache headers will be set. Defaults to null, which does not set the header.
            </summary>
            <value>
            The cache interval in seconds.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.CustomEntries">
            <summary>
            Adds custom entries to the discovery document
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.DPoPOptions">
            <summary>
            Options for DPoP
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DPoPOptions.ProofTokenValidityDuration">
            <summary>
            Duration that DPoP proof tokens are considered valid. Defaults to 1 minute.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DPoPOptions.ServerClockSkew">
            <summary>
            Clock skew used in validating DPoP proof token expiration using a server-senerated nonce value. Defaults to zero.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.DynamicProviderOptions">
            <summary>
            Configures the dynamic external provider feature.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DynamicProviderOptions.PathPrefix">
            <summary>
            Prefix in the pipeline for callbacks from external providers. Defaults to "/federation".
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DynamicProviderOptions.SignInScheme">
            <summary>
            Scheme used for signin. Defaults to the constant IdentityServerConstants.ExternalCookieAuthenticationScheme.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DynamicProviderOptions.SignOutScheme">
            <summary>
            Scheme for signout. Defaults to the constant IdentityServerConstants.DefaultCookieAuthenticationScheme.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DynamicProviderOptions.SignOutSchemeSetExplicitly">
            <summary>
            Gets a value indicating if the SignOutScheme was set explicitly, either by application logic or by options binding.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.DynamicProviderOptions.AddProviderType``3(System.String)">
            <summary>
            Registers a provider configuration model and authentication handler for the protocol type being used.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.DynamicProviderOptions.FindProviderType(System.String)">
            <summary>
            Finds the DynamicProviderType registration by protocol type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.DynamicProviderOptions.DynamicProviderType">
            <summary>
            Models a provider type registered with the dynamic providers feature.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DynamicProviderOptions.DynamicProviderType.HandlerType">
            <summary>
            The type of the handler.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DynamicProviderOptions.DynamicProviderType.OptionsType">
            <summary>
            The type of the options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DynamicProviderOptions.DynamicProviderType.IdentityProviderType">
            <summary>
            The identity provider protocol type.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.EndpointsOptions">
            <summary>
            Configures which endpoints are enabled or disabled.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableAuthorizeEndpoint">
            <summary>
            Gets or sets a value indicating whether the authorize endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the authorize endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableJwtRequestUri">
            <summary>
            Gets or sets if JWT request_uri processing is enabled on the authorize endpoint. 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableTokenEndpoint">
            <summary>
            Gets or sets a value indicating whether the token endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the token endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableUserInfoEndpoint">
            <summary>
            Gets or sets a value indicating whether the user info endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the user info endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableDiscoveryEndpoint">
            <summary>
            Gets or sets a value indicating whether the discovery document endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the disdovery document endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableEndSessionEndpoint">
            <summary>
            Gets or sets a value indicating whether the end session endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the end session endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableCheckSessionEndpoint">
            <summary>
            Gets or sets a value indicating whether the check session endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the check session endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableTokenRevocationEndpoint">
            <summary>
            Gets or sets a value indicating whether the token revocation endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the token revocation endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableIntrospectionEndpoint">
            <summary>
            Gets or sets a value indicating whether the introspection endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the introspection endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableDeviceAuthorizationEndpoint">
            <summary>
            Gets or sets a value indicating whether the device authorization endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the device authorization endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableBackchannelAuthenticationEndpoint">
            <summary>
            Gets or sets a value indicating whether the backchannel authentication endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the backchannel authentication endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnablePushedAuthorizationEndpoint">
            <summary>
            Gets or sets a value indicating whether the pushed authorization endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the pushed authorization endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.EventsOptions">
            <summary>
            Configures events
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EventsOptions.RaiseSuccessEvents">
            <summary>
            Gets or sets a value indicating whether to raise success events.
            </summary>
            <value>
              <c>true</c> if success event should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EventsOptions.RaiseFailureEvents">
            <summary>
            Gets or sets a value indicating whether to raise failure events.
            </summary>
            <value>
              <c>true</c> if failure events should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EventsOptions.RaiseInformationEvents">
            <summary>
            Gets or sets a value indicating whether to raise information events.
            </summary>
            <value>
            <c>true</c> if information events should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EventsOptions.RaiseErrorEvents">
            <summary>
            Gets or sets a value indicating whether to raise error events.
            </summary>
            <value>
              <c>true</c> if error events should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.IdentityServerOptions">
            <summary>
            The IdentityServerOptions class is the top level container for all configuration settings of IdentityServer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.IssuerUri">
            <summary>
            Gets or sets the unique name of this server instance, e.g. https://myissuer.com.
            If not set, the issuer name is inferred from the request
            </summary>
            <value>
            Unique name of this server instance, e.g. https://myissuer.com
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.LowerCaseIssuerUri">
            <summary>
            Set to false to preserve the original casing of the IssuerUri. Defaults to true.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.AccessTokenJwtType">
            <summary>
            Gets or sets the value for the JWT typ header for access tokens.
            </summary>
            <value>
            The JWT typ value.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.LogoutTokenJwtType">
            <summary>
            Gets or sets the value for the JWT typ header for logout tokens.
            </summary>
            <value>
            The JWT typ value.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.EmitStaticAudienceClaim">
            <summary>
            Emits an aud claim with the format issuer/resources. That's needed for some older access token validation plumbing. Defaults to false.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.EmitScopesAsSpaceDelimitedStringInJwt">
            <summary>
            Specifies whether scopes in JWTs are emitted as array or string
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.EmitIssuerIdentificationResponseParameter">
            <summary>
            Specifies whether authorize responses contain the iss parameter (https://www.rfc-editor.org/rfc/rfc9207.html)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.EmitStateHash">
            <summary>
            Specifies whether the s_hash claim gets emitted in identity tokens. Defaults to false.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.StrictJarValidation">
            <summary>
            Specifies whether the JWT typ and content-type for JWT secured authorization requests is checked according to IETF spec.
            This might break older OIDC conformant request objects.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.ValidateTenantOnAuthorization">
            <summary>
            Specifies if a user's tenant claim is compared to the tenant acr_values parameter value to determine if the login page is displayed. Defaults to false.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Endpoints">
            <summary>
            Gets or sets the endpoint configuration.
            </summary>
            <value>
            The endpoints configuration.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Discovery">
            <summary>
            Gets or sets the discovery endpoint configuration.
            </summary>
            <value>
            The discovery endpoint configuration.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Authentication">
            <summary>
            Gets or sets the authentication options.
            </summary>
            <value>
            The authentication options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Events">
            <summary>
            Gets or sets the events options.
            </summary>
            <value>
            The events options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.InputLengthRestrictions">
            <summary>
            Gets or sets the max input length restrictions.
            </summary>
            <value>
            The length restrictions.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.UserInteraction">
            <summary>
            Gets or sets the options for the user interaction.
            </summary>
            <value>
            The user interaction options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Caching">
            <summary>
            Gets or sets the caching options.
            </summary>
            <value>
            The caching options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Cors">
            <summary>
            Gets or sets the cors options.
            </summary>
            <value>
            The cors options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Csp">
            <summary>
            Gets or sets the Content Security Policy options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Validation">
            <summary>
            Gets or sets the validation options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.DeviceFlow">
            <summary>
            Gets or sets the device flow options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Ciba">
            <summary>
            Gets or sets the CIBA options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Logging">
            <summary>
            Gets or sets the logging options
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.MutualTls">
            <summary>
            Gets or sets the mutual TLS options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.KeyManagement">
            <summary>
            Gets or sets the signing key management options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.PersistentGrants">
            <summary>
            Options for persisted grants.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.DPoP">
            <summary>
            Options for DPoP.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.LicenseKey">
            <summary>
            Gets or sets the license key.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.DynamicProviders">
            <summary>
            Options for dynamic external providers.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.ServerSideSessions">
            <summary>
            Options for server-side sessions.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.PushedAuthorization">
            <summary>
            Options for Pushed Authorization Requests (PAR).
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Preview">
            <summary>
            Gets or sets the options for enabling and configuring preview features in the server.
            Preview features provide access to experimental or in-progress functionality that may undergo
            further changes before being finalized.
            </summary>
            <value>
            Options for configuring preview features in the server.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.InputLengthRestrictions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.ClientId">
            <summary>
            Max length for client_id
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.ClientSecret">
            <summary>
            Max length for external client secrets
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.Scope">
            <summary>
            Max length for scope
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.RedirectUri">
            <summary>
            Max length for redirect_uri
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.Nonce">
            <summary>
            Max length for nonce
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.UiLocale">
            <summary>
            Max length for ui_locale
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.LoginHint">
            <summary>
            Max length for login_hint
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.AcrValues">
            <summary>
            Max length for acr_values
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.GrantType">
            <summary>
            Max length for grant_type
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.UserName">
            <summary>
            Max length for username
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.Password">
            <summary>
            Max length for password
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.CspReport">
            <summary>
            Max length for CSP reports
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.IdentityProvider">
            <summary>
            Max length for external identity provider name
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.ExternalError">
            <summary>
            Max length for external identity provider errors
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.AuthorizationCode">
            <summary>
            Max length for authorization codes
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.DeviceCode">
            <summary>
            Max length for device codes
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.RefreshToken">
            <summary>
            Max length for refresh tokens
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.TokenHandle">
            <summary>
            Max length for token handles
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.Jwt">
            <summary>
            Max length for JWTs
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.CodeChallengeMinLength">
            <summary>
            Min length for the code challenge
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.CodeChallengeMaxLength">
            <summary>
            Max length for the code challenge
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.CodeVerifierMinLength">
            <summary>
            Min length for the code verifier
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.CodeVerifierMaxLength">
            <summary>
            Max length for the code verifier
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.ResourceIndicatorMaxLength">
            <summary>
            Max length for resource indicator parameter
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.BindingMessage">
            <summary>
            Max length for binding_message
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.UserCode">
            <summary>
            Max length for user_code
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.IdTokenHint">
            <summary>
            Max length for id_token_hint
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.LoginHintToken">
            <summary>
            Max length for login_hint_token
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.AuthenticationRequestId">
            <summary>
            Max length for auth_req_id
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.DPoPKeyThumbprint">
            <summary>
            Max length for dpop_jkt
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.DPoPProofToken">
            <summary>
            Max length for DPoP proof token
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.KeyManagementOptions">
            <summary>
            Options to configure behavior of KeyManager.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.Enabled">
            <summary>
            Specifies if key management should be enabled. Defaults to true.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.RsaKeySize">
            <summary>
            Key size (in bits) of RSA keys. Defaults to 2048.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.SigningAlgorithms">
            <summary>
            The signing algorithms allowed. 
            If none are specified, then "RS256" will be used as the default.
            The first in the collection will be used as the default. 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.InitializationDuration">
            <summary>
            When no keys have been created yet, this is the window of time considered to be an initialization 
            period to allow all servers to synchronize if the keys are being created for the first time.
            Defaults to 5 minutes.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.InitializationSynchronizationDelay">
            <summary>
            Delay used when re-loading from the store when the initialization period. It allows
            other servers more time to write new keys so other servers can include them.
            Defaults to 5 seconds.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.InitializationKeyCacheDuration">
            <summary>
            Cache duration when within the initialization period.
            Defaults to 1 minute.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.KeyCacheDuration">
            <summary>
            When in normal operation, duration to cache keys from store.
            Defaults to 24 hours.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.PropagationTime">
            <summary>
            Time expected to propagate new keys to all servers, and time expected all clients to refresh discovery.
            Defaults to 14 days.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.RotationInterval">
            <summary>
            Age at which keys will no longer be used for signing, but will still be used in discovery for validation.
            Defaults to 90 days.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.RetentionDuration">
            <summary>
            Duration for keys to remain in discovery after rotation.
            Defaults to 14 days.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.DeleteRetiredKeys">
            <summary>
            Automatically delete retired keys.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.DataProtectKeys">
            <summary>
            Automatically protect keys in the storage using data protection.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.KeyPath">
            <summary>
            Path for storing keys when using the default file system store.
            Defaults to the "keys" directory relative to the hosting application.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.SigningAlgorithmOptions">
            <summary>
            Class to configure signing algorithm.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.SigningAlgorithmOptions.#ctor">
            <summary>
            Parameterless constructor, required for binding
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.SigningAlgorithmOptions.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.SigningAlgorithmOptions.Name">
            <summary>
            The algorithm name.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.SigningAlgorithmOptions.UseX509Certificate">
            <summary>
            Indicates if an X.509 certificate is to be used to contain the key. Defaults to false.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.LoggingOptions">
            <summary>
            Options for configuring logging behavior
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.LoggingOptions.BackchannelAuthenticationRequestSensitiveValuesFilter">
            <summary>
            Gets or sets the collection of keys that will be used to redact sensitive values from a backchannel authentication request log.
            </summary>
            <remarks>Please be aware that initializing this property could expose sensitive information in your logs.</remarks>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.LoggingOptions.TokenRequestSensitiveValuesFilter">
            <summary>
            Gets or sets the collection of keys that will be used to redact sensitive values from a token request log.
            </summary>
            <remarks>Please be aware that initializing this property could expose sensitive information in your logs.</remarks>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.LoggingOptions.AuthorizeRequestSensitiveValuesFilter">
            <summary>
            Gets or sets the collection of keys that will be used to redact sensitive values from an authorize request log.
            </summary>
            <remarks>Please be aware that initializing this property could expose sensitive information in your logs.</remarks>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.LoggingOptions.PushedAuthorizationSensitiveValuesFilter">
            <summary>
            Gets or sets the collection of keys that will be used to redact sensitive values from a pushed authorization request log.
            </summary>
            <remarks>Please be aware that initializing this property could expose sensitive information in your logs.</remarks>
            <remarks>Note that pushed authorization parameters are eventually handled by the authorize request pipeline.
            In most cases, changes to this collection should also be made to <see cref="P:Duende.IdentityServer.Configuration.LoggingOptions.AuthorizeRequestSensitiveValuesFilter"/>
            </remarks>
        </member>
        <member name="F:Duende.IdentityServer.Configuration.LoggingOptions.UnhandledExceptionLoggingFilter">
            <summary>
            Called when the IdentityServer middleware detects an unhandled exception, and is used to determine if the exception is logged.
            Returns true to emit the log, false to suppress.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.MutualTlsOptions">
            <summary>
            Options for Mutual TLS features
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.MutualTlsOptions.Enabled">
            <summary>
            Specifies if MTLS support should be enabled
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.MutualTlsOptions.ClientCertificateAuthenticationScheme">
            <summary>
            Specifies the name of the authentication handler for X.509 client certificates
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.MutualTlsOptions.DomainName">
            <summary>
            Specifies a separate domain to run the MTLS endpoints on.
            </summary>
            <remarks>If the string does not contain any dots, it is treated as a 
            subdomain. For example, if the non-mTLS endpoints are hosted at 
            example.com, configuring this option with the value "mtls" means that 
            mtls is required for requests to mtls.example.com.
            
            If the string contains dots, it is treated as a complete domain.
            mTLS will be required for requests whose host name matches the 
            configured domain name completely, including the port number. 
            This allows for separate domains for the mTLS and non-mTLS endpoints. 
            For example, identity.example.com and mtls.example.com.
            </remarks>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.MutualTlsOptions.AlwaysEmitConfirmationClaim">
            <summary>
            Specifies whether a cnf claim gets emitted for access tokens if a client certificate was present.
            Normally the cnf claims only gets emitted if the client used the client certificate for authentication,
            setting this to true, will set the claim regardless of the authentication method. (defaults to false).
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.PreviewFeatureOptions">
            <summary>
            Provides configuration options for enabling and managing preview features in IdentityServer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.PreviewFeatureOptions.EnableDiscoveryDocumentCache">
            <summary>
            Enables Caching of Discovery Document based on ResponseCaching Interval 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.PreviewFeatureOptions.StrictClientAssertionAudienceValidation">
            <summary>
            When clients authenticate with private_key_jwt assertions, validate the audience of the assertion strictly: the audience must be this IdentityServer's issuer identifier as a single string.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.PreviewFeatureOptions.DiscoveryDocumentCacheDuration">
            <summary>
            DiscoveryDocument Cache Duration
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.PushedAuthorizationOptions">
            <summary>
            The Pushed Authorization Options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.PushedAuthorizationOptions.Required">
            <summary>
            Specifies whether pushed authorization requests are globally required.
            Defaults to false.
            </summary>
            <remarks>
            There is also a per-client configuration flag in the Client
            configuration. Pushed authorization is required for a client if either
            this global configuration flag is enabled or if the flag is set for that
            client.
            </remarks>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.PushedAuthorizationOptions.Lifetime">
             <summary>
             Lifetime of pushed authorization requests in seconds.
            
             The pushed authorization request's lifetime begins when the request to
             the PAR endpoint is received, and is validated until the authorize
             endpoint returns a response to the client application. Note that user
             interaction, such as entering credentials or granting consent, may need
             to occur before the authorize endpoint can do so. Setting the lifetime
             too low will likely cause login failures for interactive users, if
             pushed authorization requests expire before those users complete
             authentication. Some security profiles, such as the FAPI 2.0 Security
             Profile recommend an expiration within 10 minutes to prevent attackers
             from pre-generating requests. To balance these constraints, the Lifetime
             defaults to 10 minutes.
             </summary>
             <remarks>There is also a per-client configuration setting that takes
             precedence over this global configuration.
             </remarks>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.PushedAuthorizationOptions.AllowUnregisteredPushedRedirectUris">
            <summary>
            Specifies whether clients may use redirect uris that were not previously
            registered. Defaults to false. 
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.ServerSideSessionOptions">
            <summary>
            Configures the behavior for server-side sessions.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.ServerSideSessionOptions.UserDisplayNameClaimType">
            <summary>
            The claim type used for the user's display name.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.ServerSideSessionOptions.RemoveExpiredSessions">
            <summary>
            If enabled, will perodically cleanup expired sessions.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.ServerSideSessionOptions.ExpiredSessionsTriggerBackchannelLogout">
            <summary>
            If enabled, when server-side sessions are removed due to expiration, will back-channel logout notifications be sent.
            This will, in effect, tie a user's session lifetime at a client to their session lifetime at IdentityServer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.ServerSideSessionOptions.RemoveExpiredSessionsFrequency">
            <summary>
            Frequency expired sessions will be removed.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.ServerSideSessionOptions.FuzzExpiredSessionRemovalStart">
            <summary>
            If multiple nodes are running the server side session cleaup at the same time, there will be
            concurrency issues in the database updates. To reduce the rsk, the startup time
            of the first run can be fuzzed (randomized). The default is <c>true</c>.
            </summary>
            <value>
            <c>true</c> if startup time should be fuzzed, otherwise false.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.ServerSideSessionOptions.RemoveExpiredSessionsBatchSize">
            <summary>
            Number of expired sessions records to be removed at a time.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.UserInteractionOptions">
            <summary>
            Options for aspects of the user interface.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.LoginUrl">
            <summary>
            Gets or sets the login URL. If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The login URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.LoginReturnUrlParameter">
            <summary>
            Gets or sets the login return URL parameter.
            </summary>
            <value>
            The login return URL parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.LogoutUrl">
            <summary>
            Gets or sets the logout URL. If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The logout URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.LogoutIdParameter">
            <summary>
            Gets or sets the logout identifier parameter.
            </summary>
            <value>
            The logout identifier parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.ConsentUrl">
            <summary>
            Gets or sets the consent URL. If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The consent URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.ConsentReturnUrlParameter">
            <summary>
            Gets or sets the consent return URL parameter.
            </summary>
            <value>
            The consent return URL parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.CreateAccountUrl">
            <summary>
            Gets or sets the create account (or register) URL, for use with the OIDC prompt parameter. If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The create account URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.CreateAccountReturnUrlParameter">
            <summary>
            Gets or sets the create account (or register) return URL parameter.
            </summary>
            <value>
            The create account return URL parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.ErrorUrl">
            <summary>
            Gets or sets the error URL. If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The error URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.ErrorIdParameter">
            <summary>
            Gets or sets the error identifier parameter.
            </summary>
            <value>
            The error identifier parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.CustomRedirectReturnUrlParameter">
            <summary>
            Gets or sets the custom redirect return URL parameter.
            </summary>
            <value>
            The custom redirect return URL parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.CookieMessageThreshold">
            <summary>
            Gets or sets the cookie message threshold. This limits how many cookies are created, and older ones will be purged.
            </summary>
            <value>
            The cookie message threshold.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.DeviceVerificationUrl">
            <summary>
            Gets or sets the device verification URL.  If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The device verification URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.DeviceVerificationUserCodeParameter">
            <summary>
            Gets or sets the device verification user code parameter.
            </summary>
            <value>
            The device verification user code parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.AllowOriginInReturnUrl">
            <summary>
            Flag that allows return URL validation to accept full URL that includes the IdentityServer origin. Defaults to false.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.PromptValuesSupported">
            <summary>
            The collection of OIDC prompt modes supported and that will be published
            in discovery. By default, this includes all values in <see
            cref="F:Duende.IdentityServer.Constants.SupportedPromptModes"/>. If the <see
            cref="P:Duende.IdentityServer.Configuration.UserInteractionOptions.CreateAccountUrl"/> option is set, then the "create" value is also
            included. If additional prompt values are added, a customized <see
            cref="T:Duende.IdentityServer.ResponseHandling.IAuthorizeInteractionResponseGenerator"/> is also required to
            handle those values.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.ValidationOptions">
            <summary>
            The ValidationOptions contains settings that affect some of the default validation behavior.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.ValidationOptions.InvalidRedirectUriPrefixes">
            <summary>
             Collection of URI scheme prefixes that should never be used as custom
             URI schemes in the redirect_uri passed to the authorize endpoint or the
             post_logout_redirect_uri passed to the end_session endpoint.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.PostConfigureApplicationCookieTicketStore">
            <summary>
            Cookie configuration for the user session plumbing
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.PostConfigureApplicationCookieTicketStore.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authentication.AuthenticationOptions},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Configuration.PostConfigureApplicationCookieTicketStore})">
            <summary>
            ctor
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="identityServerOptions"></param>
            <param name="options"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.PostConfigureApplicationCookieTicketStore.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,System.String)">
            <summary>
            ctor
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="scheme"></param>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.PostConfigureApplicationCookieTicketStore.PostConfigure(System.String,Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Configuration.TicketStoreShim">
            <summary>
            this shim class is needed since ITicketStore is not configured in DI, rather it's a property 
            of the cookie options and coordinated with PostConfigureApplicationCookie. #lame
            https://github.com/aspnet/AspNetCore/issues/6946 
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.TicketStoreShim.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            ctor
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.TicketStoreShim.Inner">
            <summary>
            The inner
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.TicketStoreShim.RemoveAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Configuration.TicketStoreShim.RenewAsync(System.String,Microsoft.AspNetCore.Authentication.AuthenticationTicket)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Configuration.TicketStoreShim.RetrieveAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Configuration.TicketStoreShim.StoreAsync(Microsoft.AspNetCore.Authentication.AuthenticationTicket)">
            <inheritdoc />
        </member>
        <member name="F:Duende.IdentityServer.Constants.SuppressedPrompt">
            <summary>
            The name of the parameter passed to the authorize callback to indicate
            prompt modes that have already been used. This constant is deprecated in
            favor of <see cref="F:Duende.IdentityServer.Constants.ProcessedPrompt"/>.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Constants.ProcessedPrompt">
            <summary>
            The name of the parameter passed to the authorize callback to indicate
            prompt modes that have already been used. This constant replaces the
            deprecated <see cref="F:Duende.IdentityServer.Constants.SuppressedPrompt"/>, while keeping the underlying
            value unchanged.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Constants.ProcessedMaxAge">
            <summary>
            The name of the parameter passed to the authorize callback to indicate
            max age that have already been used.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.DeviceAuthorizationEndpoint">
            <summary>
            The device authorization endpoint
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointHandler" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.DeviceAuthorizationEndpoint.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.IntrospectionEndpoint">
            <summary>
            Introspection endpoint
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointHandler" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.IntrospectionEndpoint.#ctor(Duende.IdentityServer.Validation.IApiSecretValidator,Duende.IdentityServer.Validation.IClientSecretValidator,Duende.IdentityServer.Validation.IIntrospectionRequestValidator,Duende.IdentityServer.ResponseHandling.IIntrospectionResponseGenerator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Endpoints.IntrospectionEndpoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.IntrospectionEndpoint" /> class.
            </summary>
            <param name="apiSecretValidator">The API secret validator.</param>
            <param name="clientValidator"></param>
            <param name="requestValidator">The request validator.</param>
            <param name="responseGenerator">The generator.</param>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.IntrospectionEndpoint.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.AuthorizeInteractionPageResult">
            <summary>
            Result for an interactive page
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.AuthorizeInteractionPageResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.AuthorizeInteractionPageResult"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="redirectUrl"></param>
            <param name="returnUrlParameterName"></param>
            <exception cref="T:System.ArgumentNullException">request</exception>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.AuthorizeInteractionPageResult.Request">
            <summary>
            The validated authorize request
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.AuthorizeInteractionPageResult.RedirectUrl">
            <summary>
            The redirect URI
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.AuthorizeInteractionPageResult.ReturnUrlParameterName">
            <summary>
            The return URL param name
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.AuthorizeInteractionPageHttpWriter.#ctor(Duende.IdentityServer.Services.IServerUrls,Duende.IdentityServer.Stores.IAuthorizationParametersMessageStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.AuthorizeInteractionPageResult"/> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.AuthorizeInteractionPageHttpWriter.WriteHttpResponse(Duende.IdentityServer.Endpoints.Results.AuthorizeInteractionPageResult,Microsoft.AspNetCore.Http.HttpContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.AuthorizeResult">
            <summary>
            Models the result from the authorize endpoint
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.AuthorizeResult.Response">
            <summary>
            The authorize response
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.AuthorizeResult.#ctor(Duende.IdentityServer.ResponseHandling.AuthorizeResponse)">
            <summary>
            Ctor
            </summary>
            <param name="response"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.AuthorizeHttpWriter">
            <summary>
            Writes http responses for <see cref="T:Duende.IdentityServer.Endpoints.Results.AuthorizeResult"/>s.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.AuthorizeHttpWriter.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Services.IUserSession,Duende.IdentityServer.Services.IPushedAuthorizationService,Duende.IdentityServer.Stores.IMessageStore{Duende.IdentityServer.Models.ErrorMessage},Duende.IdentityServer.Services.IServerUrls,Duende.IdentityServer.IClock)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.AuthorizeHttpWriter"/> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.AuthorizeHttpWriter.WriteHttpResponse(Duende.IdentityServer.Endpoints.Results.AuthorizeResult,Microsoft.AspNetCore.Http.HttpContext)">
            <inheritdoc />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.AuthorizeHttpWriter.FormPostHeader">
            <summary>
            Gets the header tags that will be included in the response when
            response_mode is form_post.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.AuthorizeHttpWriter.FormPostBody">
            <summary>
            Gets the body tags that will be included in the response when
            response_mode is form_post. The string "{body}" (including the curly
            braces) within this string will be replaced with the response
            parameters, serialized as form data.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.AuthorizeHttpWriter.GetFormPostHtml(Duende.IdentityServer.ResponseHandling.AuthorizeResponse)">
            <summary>
            Gets the html that will set as the response when response_mode is
            form_post. 
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.BackchannelAuthenticationResult">
            <summary>
            Models the result of backchannel authentication 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.BackchannelAuthenticationResult.Response">
            <summary>
            The response
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.BackchannelAuthenticationResult.#ctor(Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse)">
            <summary>
            Ctor
            </summary>
            <param name="response"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.BadRequestResult">
            <summary>
            The result of a bad request
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.BadRequestResult.Error">
            <summary>
            The error
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.BadRequestResult.ErrorDescription">
            <summary>
            The error description
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.BadRequestResult.#ctor(System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="error"></param>
            <param name="errorDescription"></param>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.CheckSessionResult">
            <summary>
            The resukt of the check session endpoint
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.ConsentPageResult">
            <summary>
            Result for consent page
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.ConsentPageResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.ConsentPageResult"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="options"></param>
            <exception cref="T:System.ArgumentNullException">request</exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.CreateAccountPageResult">
            <summary>
            Result for create account page
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.CreateAccountPageResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.CreateAccountPageResult"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="options"></param>
            <exception cref="T:System.ArgumentNullException">request</exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.CustomRedirectResult">
            <summary>
            Result for a custom redirect
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.CustomRedirectResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,System.String,Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.CustomRedirectResult"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="url">The URL.</param>
            <param name="options"></param>
            <exception cref="T:System.ArgumentNullException">
            request
            or
            url
            </exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.DeviceAuthorizationResult">
            <summary>
            The result of device authorization
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.DeviceAuthorizationResult.Response">
            <summary>
            The response
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.DeviceAuthorizationResult.#ctor(Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponse)">
            <summary>
            Ctor
            </summary>
            <param name="response"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult">
            <summary>
            Result for a discovery document
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult.MaxAge">
            <summary>
            Gets the maximum age.
            </summary>
            <value>
            The maximum age.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult.Json">
            <summary>
            Gets the JSON representation of the entries in the discovery document.
            </summary>
            <value>
            A JSON string that represents the entries.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult.Entries">
            <summary>
            Gets or sets the collection of entries within the discovery document result.
            </summary>
            <value>
            A dictionary containing the discovery document's entries.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult" /> class.
            </summary>
            <param name="entries">The entries.</param>
            <param name="maxAge">The maximum age.</param>
            <exception cref="T:System.ArgumentNullException">entries</exception>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Represents the result of a discovery document operation.
            </summary>
            <remarks>
            Encapsulates the properties and logic required to represent the discovery document's
            data along with optional age-based caching information applicable to the response.
            </remarks>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult" /> class.
            </summary>
            <param name="entries">The entries.</param>
            <param name="isUsingPreviewFeature">Enable preview feature</param>
            <param name="maxAge">The maximum age.</param>
            <exception cref="T:System.ArgumentNullException">entries</exception>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentHttpWriter.WriteHttpResponse(Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult,Microsoft.AspNetCore.Http.HttpContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.EndpointResult`1">
            <summary>
            Provides the base implementation of <see cref="T:Duende.IdentityServer.Hosting.IEndpointResult"/> that
            invokes the corresponding <see cref="T:Duende.IdentityServer.Hosting.IHttpResponseWriter`1"/> to write the
            result as an http response.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.EndpointResult`1.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.EndSessionCallbackResult">
            <summary>
            Models the result of end session callback
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.EndSessionCallbackResult.Result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.EndSessionCallbackResult.#ctor(Duende.IdentityServer.Validation.EndSessionCallbackValidationResult)">
            <summary>
            Ctor
            </summary>
            <param name="result"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.EndSessionResult">
            <summary>
            Result for endsession
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.EndSessionResult.Result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.EndSessionResult.#ctor(Duende.IdentityServer.Validation.EndSessionValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.EndSessionResult"/> class.
            </summary>
            <param name="result">The result.</param>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.IntrospectionResult">
            <summary>
            Result for introspection
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.IntrospectionResult.Entries">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.IntrospectionResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.IntrospectionResult"/> class.
            </summary>
            <param name="entries">The result.</param>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult">
            <summary>
            Result for the jwks document
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult.WebKeys">
            <summary>
            Gets the web keys.
            </summary>
            <value>
            The web keys.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult.MaxAge">
            <summary>
            Gets the maximum age.
            </summary>
            <value>
            The maximum age.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.JsonWebKey},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult" /> class.
            </summary>
            <param name="webKeys">The web keys.</param>
            <param name="maxAge">The maximum age.</param>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.LoginPageResult">
            <summary>
            Result for login page
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.LoginPageResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.LoginPageResult"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="options"></param>
            <exception cref="T:System.ArgumentNullException">request</exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.ProtectedResourceErrorResult">
            <summary>
            Models result of a protected resource
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.ProtectedResourceErrorResult.Error">
            <summary>
            The error
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.ProtectedResourceErrorResult.ErrorDescription">
            <summary>
            The error description
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.ProtectedResourceErrorResult.#ctor(System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="error"></param>
            <param name="errorDescription"></param>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.PushedAuthorizationErrorResult">
            <summary>
            Represents an error result from the pushed authorization endpoint that can be written to the http response.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.PushedAuthorizationErrorResult.Response">
            <summary>
            The error response model.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.PushedAuthorizationErrorResult.#ctor(Duende.IdentityServer.ResponseHandling.PushedAuthorizationFailure)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.PushedAuthorizationErrorResult"/> class.
            </summary>
            <param name="response">The error response model.</param>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.PushedAuthorizationResult">
            <summary>
            Represents a successful result from the pushed authorization endpoint that can be written to the http response.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.PushedAuthorizationResult.Response">
            <summary>
            The successful response model.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.PushedAuthorizationResult.#ctor(Duende.IdentityServer.ResponseHandling.PushedAuthorizationSuccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.PushedAuthorizationResult"/> class.
            </summary>
            <param name="response">The successful response model.</param>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.StatusCodeResult">
            <summary>
            Result for a raw HTTP status code
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.StatusCodeResult.StatusCode">
            <summary>
            Gets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.StatusCodeResult"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.StatusCodeResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.StatusCodeResult"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.TokenErrorResult">
            <summary>
            Models a token error result
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.TokenErrorResult.Response">
            <summary>
            The response
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.TokenErrorResult.#ctor(Duende.IdentityServer.ResponseHandling.TokenErrorResponse)">
            <summary>
            Ctor
            </summary>
            <param name="error"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.TokenResult">
            <summary>
            Models a token result
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.TokenResult.Response">
            <summary>
            The response
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.TokenResult.#ctor(Duende.IdentityServer.ResponseHandling.TokenResponse)">
            <summary>
            Ctor
            </summary>
            <param name="response"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.TokenRevocationErrorResult">
            <summary>
            Result for revocation error
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.TokenRevocationErrorResult.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.TokenRevocationErrorResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.TokenRevocationErrorResult"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.UserInfoResult">
            <summary>
            The result of userinfo 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.UserInfoResult.Claims">
            <summary>
            The claims
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.UserInfoResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Ctor
            </summary>
            <param name="claims"></param>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.TokenEndpoint">
            <summary>
            The token endpoint
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointHandler" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.TokenEndpoint.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Validation.IClientSecretValidator,Duende.IdentityServer.Validation.ITokenRequestValidator,Duende.IdentityServer.ResponseHandling.ITokenResponseGenerator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Endpoints.TokenEndpoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.TokenEndpoint" /> class.
            </summary>
            <param name="identityServerOptions"></param>
            <param name="clientValidator">The client validator.</param>
            <param name="requestValidator">The request validator.</param>
            <param name="responseGenerator">The response generator.</param>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.TokenEndpoint.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.TokenRevocationEndpoint">
            <summary>
            The revocation endpoint
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointHandler" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.TokenRevocationEndpoint.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Endpoints.TokenRevocationEndpoint},Duende.IdentityServer.Validation.IClientSecretValidator,Duende.IdentityServer.Validation.ITokenRevocationRequestValidator,Duende.IdentityServer.ResponseHandling.ITokenRevocationResponseGenerator,Duende.IdentityServer.Services.IEventService)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.TokenRevocationEndpoint" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="clientValidator">The client validator.</param>
            <param name="requestValidator">The request validator.</param>
            <param name="responseGenerator">The response generator.</param>
            <param name="events">The events.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.TokenRevocationEndpoint.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.UserInfoEndpoint">
            <summary>
            The userinfo endpoint
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointHandler" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.UserInfoEndpoint.#ctor(Duende.IdentityServer.Validation.BearerTokenUsageValidator,Duende.IdentityServer.Validation.IUserInfoRequestValidator,Duende.IdentityServer.ResponseHandling.IUserInfoResponseGenerator,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Endpoints.UserInfoEndpoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.UserInfoEndpoint" /> class.
            </summary>
            <param name="tokenUsageValidator">The token usage validator.</param>
            <param name="requestValidator">The request validator.</param>
            <param name="responseGenerator">The response generator.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.UserInfoEndpoint.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Events.ApiAuthenticationFailureEvent">
            <summary>
            Event for failed API authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ApiAuthenticationFailureEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ApiAuthenticationFailureEvent"/> class.
            </summary>
            <param name="apiName">Name of the API.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ApiAuthenticationFailureEvent.ApiName">
            <summary>
            Gets or sets the name of the API.
            </summary>
            <value>
            The name of the API.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.ApiAuthenticationSuccessEvent">
            <summary>
            Event for successful API authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ApiAuthenticationSuccessEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ApiAuthenticationSuccessEvent"/> class.
            </summary>
            <param name="apiName">Name of the API.</param>
            <param name="authenticationMethod">The authentication method.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ApiAuthenticationSuccessEvent.ApiName">
            <summary>
            Gets or sets the name of the API.
            </summary>
            <value>
            The name of the API.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ApiAuthenticationSuccessEvent.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method.
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent">
            <summary>
            Event for failed backchannel authentication result
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent.#ctor(Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="error">The error.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent.#ctor(Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationFailureEvent.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.BackchannelAuthenticationSuccessEvent">
            <summary>
            Event for successful backchannel authentication result
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.BackchannelAuthenticationSuccessEvent.#ctor(Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.BackchannelAuthenticationSuccessEvent"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.BackchannelAuthenticationSuccessEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.BackchannelAuthenticationSuccessEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationSuccessEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationSuccessEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationSuccessEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationSuccessEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.BackchannelAuthenticationSuccessEvent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.ClientAuthenticationFailureEvent">
            <summary>
            Event for failed client authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ClientAuthenticationFailureEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ClientAuthenticationFailureEvent"/> class.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ClientAuthenticationFailureEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.ClientAuthenticationSuccessEvent">
            <summary>
            Event for successful client authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ClientAuthenticationSuccessEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ClientAuthenticationSuccessEvent"/> class.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="authenticationMethod">The authentication method.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ClientAuthenticationSuccessEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ClientAuthenticationSuccessEvent.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method.
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.ConsentDeniedEvent">
            <summary>
            Event for denied consent.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ConsentDeniedEvent.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ConsentDeniedEvent" /> class.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="requestedScopes">The requested scopes.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentDeniedEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentDeniedEvent.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentDeniedEvent.RequestedScopes">
            <summary>
            Gets or sets the requested scopes.
            </summary>
            <value>
            The requested scopes.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.ConsentGrantedEvent">
            <summary>
            Event for granted consent.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ConsentGrantedEvent.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ConsentGrantedEvent" /> class.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="requestedScopes">The requested scopes.</param>
            <param name="grantedScopes">The granted scopes.</param>
            <param name="consentRemembered">if set to <c>true</c> consent was remembered.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentGrantedEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentGrantedEvent.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentGrantedEvent.RequestedScopes">
            <summary>
            Gets or sets the requested scopes.
            </summary>
            <value>
            The requested scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentGrantedEvent.GrantedScopes">
            <summary>
            Gets or sets the granted scopes.
            </summary>
            <value>
            The granted scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentGrantedEvent.ConsentRemembered">
            <summary>
            Gets or sets a value indicating whether consent was remembered.
            </summary>
            <value>
              <c>true</c> if consent was remembered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent">
            <summary>
            Event for device authorization failure
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.#ctor(Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent">
            <summary>
            Event for device authorization failure
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.#ctor(Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponse,Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent"/> class.
            </summary>
            <param name="response">The response.</param>
            <param name="request">The request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.GrantsRevokedEvent">
            <summary>
            Event for revoked grants.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.GrantsRevokedEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.GrantsRevokedEvent" /> class.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.GrantsRevokedEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.GrantsRevokedEvent.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.Event">
            <summary>
            Models base class for events raised from IdentityServer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Events.Event.#ctor(System.String,System.String,Duende.IdentityServer.Events.EventTypes,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.Event" /> class.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">category</exception>
        </member>
        <member name="M:Duende.IdentityServer.Events.Event.PrepareAsync">
            <summary>
            Allows implementing custom initialization logic.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.EventType">
            <summary>
            Gets or sets the event type.
            </summary>
            <value>
            The type of the event.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.Message">
            <summary>
            Gets or sets the event message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.ActivityId">
            <summary>
            Gets or sets the per-request trace identifier (not the Activity Id)
            </summary>
            <value>
            The HttpContext.TraceIdentifier.
            </value>
            <remarks>Note that this is not the Activity Id despite the name.</remarks>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.TimeStamp">
            <summary>
            Gets or sets the time stamp when the event was raised.
            </summary>
            <value>
            The time stamp.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.ProcessId">
            <summary>
            Gets or sets the server process identifier.
            </summary>
            <value>
            The process identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.LocalIpAddress">
            <summary>
            Gets or sets the local ip address of the current request.
            </summary>
            <value>
            The local ip address.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.RemoteIpAddress">
            <summary>
            Gets or sets the remote ip address of the current request.
            </summary>
            <value>
            The remote ip address.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Events.Event.Obfuscate(System.String)">
            <summary>
            Obfuscates a token.
            </summary>
            <param name="value">The token.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Events.Event.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Events.EventCategories">
            <summary>
            Categories for events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.Authentication">
            <summary>
            Authentication related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.BackchannelAuthentication">
            <summary>
            Backchannel authentication related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.Token">
            <summary>
            Token related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.Grants">
            <summary>
            Grants related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.Error">
            <summary>
            Error related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.DeviceFlow">
            <summary>
            Device flow related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventIds.AuthenticationEventsStart">
            Authentication related events
        </member>
        <member name="F:Duende.IdentityServer.Events.EventIds.TokenEventsStart">
            Token related events
        </member>
        <member name="F:Duende.IdentityServer.Events.EventIds.ErrorEventsStart">
            Error related events
        </member>
        <member name="F:Duende.IdentityServer.Events.EventIds.GrantsEventsStart">
            Grants related events
        </member>
        <member name="F:Duende.IdentityServer.Events.EventIds.DeviceFlowEventsStart">
            Device flow related events
        </member>
        <member name="F:Duende.IdentityServer.Events.EventIds.BackchannelAuthenticationEventsStart">
            Backchannel authentication related events
        </member>
        <member name="T:Duende.IdentityServer.Events.EventTypes">
            <summary>
            Indicates if the event is a success or fail event.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventTypes.Success">
            <summary>
            Success event
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventTypes.Failure">
            <summary>
            Failure event
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventTypes.Information">
            <summary>
            Information event
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventTypes.Error">
            <summary>
            Error event
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Events.InvalidClientConfigurationEvent">
            <summary>
            Event for unhandled exceptions
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.InvalidClientConfigurationEvent.#ctor(Duende.IdentityServer.Models.Client,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.InvalidClientConfigurationEvent" /> class.
            </summary>
            <param name="client">The client.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.InvalidClientConfigurationEvent.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.InvalidClientConfigurationEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.InvalidIdentityProviderConfiguration">
            <summary>
            Event for unhandled exceptions
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.InvalidIdentityProviderConfiguration.#ctor(Duende.IdentityServer.Models.IdentityProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.InvalidIdentityProviderConfiguration" /> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.InvalidIdentityProviderConfiguration.Scheme">
            <summary>
            Gets or sets the scheme.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.InvalidIdentityProviderConfiguration.DisplayName">
            <summary>
            Gets or sets the display name of the identity provider.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.InvalidIdentityProviderConfiguration.Type">
            <summary>
            Gets or sets the type of the identity provider.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent">
            <summary>
            Event for failed token introspection
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent" /> class.
            </summary>
            <param name="apiName">Name of the API.</param>
            <param name="errorMessage">The error message.</param>
            <param name="token">The token.</param>
            <param name="apiScopes">The API scopes.</param>
            <param name="tokenScopes">The token scopes.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent.ApiName">
            <summary>
            Gets or sets the name of the API.
            </summary>
            <value>
            The name of the API.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent.ApiScopes">
            <summary>
            Gets or sets the API scopes.
            </summary>
            <value>
            The API scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent.TokenScopes">
            <summary>
            Gets or sets the token scopes.
            </summary>
            <value>
            The token scopes.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent">
            <summary>
            Event for successful token introspection
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.#ctor(Duende.IdentityServer.Validation.IntrospectionRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent" /> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.ApiName">
            <summary>
            Gets or sets the name of the API.
            </summary>
            <value>
            The name of the API.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.ClaimTypes">
            <summary>
            Gets or sets the claim types.
            </summary>
            <value>
            The claim types.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.TokenScopes">
            <summary>
            Gets or sets the token scopes.
            </summary>
            <value>
            The token scopes.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenIssuedFailureEvent">
            <summary>
            Event for failed token issuance
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedFailureEvent.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedFailureEvent"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="error">The error.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedFailureEvent.#ctor(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedFailureEvent"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedFailureEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedFailureEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.GrantType">
            <summary>
            Gets or sets the grant type.
            </summary>
            <value>
            The grant type.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent">
            <summary>
            Event for successful token issuance
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.#ctor(Duende.IdentityServer.ResponseHandling.AuthorizeResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent"/> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.#ctor(Duende.IdentityServer.ResponseHandling.TokenResponse,Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent"/> class.
            </summary>
            <param name="response">The response.</param>
            <param name="request">The request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.GrantType">
            <summary>
            Gets or sets the grant type.
            </summary>
            <value>
            The grant type.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Tokens">
            <summary>
            Gets or sets the tokens.
            </summary>
            <value>
            The tokens.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Token">
            <summary>
            Data structure serializing issued tokens
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Token.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Token"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Token.TokenType">
            <summary>
            Gets the type of the token.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Token.TokenValue">
            <summary>
            Gets the token value.
            </summary>
            <value>
            The token value.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenRevokedSuccessEvent">
            <summary>
            Event for successful token revocation
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenRevokedSuccessEvent.#ctor(Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult,Duende.IdentityServer.Models.Client)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenRevokedSuccessEvent"/> class.
            </summary>
            <param name="requestResult">The request result.</param>
            <param name="client">The client.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenRevokedSuccessEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenRevokedSuccessEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenRevokedSuccessEvent.TokenType">
            <summary>
            Gets or sets the type of the token.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenRevokedSuccessEvent.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.UnhandledExceptionEvent">
            <summary>
            Event for unhandled exceptions
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.UnhandledExceptionEvent.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UnhandledExceptionEvent"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.UnhandledExceptionEvent.Details">
            <summary>
            Gets or sets the details.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.UserLoginFailureEvent">
            <summary>
            Event for failed user authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.UserLoginFailureEvent.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UserLoginFailureEvent" /> class.
            </summary>
            <param name="username">The username.</param>
            <param name="error">The error.</param>
            <param name="interactive">Specifies if login was interactive</param>
            <param name="clientId">The client id</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginFailureEvent.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginFailureEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginFailureEvent.ClientId">
            <summary>
            Gets or sets the client id.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.UserLoginSuccessEvent">
            <summary>
            Event for successful user authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.UserLoginSuccessEvent.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UserLoginSuccessEvent"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="providerUserId">The provider user identifier.</param>
            <param name="subjectId">The subject identifier.</param>
            <param name="name">The name.</param>
            <param name="interactive">if set to <c>true</c> [interactive].</param>
            <param name="clientId">The client id.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.UserLoginSuccessEvent.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UserLoginSuccessEvent"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="subjectId">The subject identifier.</param>
            <param name="name">The name.</param>
            <param name="interactive">if set to <c>true</c> [interactive].</param>
            <param name="clientId">The client id.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.UserLoginSuccessEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UserLoginSuccessEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.ProviderUserId">
            <summary>
            Gets or sets the provider user identifier.
            </summary>
            <value>
            The provider user identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.ClientId">
            <summary>
            Gets or sets the client id.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.UserLogoutSuccessEvent">
            <summary>
            Event for successful user logout
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.UserLogoutSuccessEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UserLogoutSuccessEvent"/> class.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLogoutSuccessEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLogoutSuccessEvent.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.DefaultEventService">
            <summary>
            The default event service
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IEventService" />
        </member>
        <member name="F:Duende.IdentityServer.Events.DefaultEventService.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.DefaultEventService.Context">
            <summary>
            The context
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.DefaultEventService.Sink">
            <summary>
            The sink
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.DefaultEventService.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Events.DefaultEventService.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.AspNetCore.Http.IHttpContextAccessor,Duende.IdentityServer.Services.IEventSink,Duende.IdentityServer.IClock)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.DefaultEventService"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="context">The context.</param>
            <param name="sink">The sink.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.DefaultEventService.RaiseAsync(Duende.IdentityServer.Events.Event)">
            <summary>
            Raises the specified event.
            </summary>
            <param name="evt">The event.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">evt</exception>
        </member>
        <member name="M:Duende.IdentityServer.Events.DefaultEventService.CanRaiseEventType(Duende.IdentityServer.Events.EventTypes)">
            <summary>
            Indicates if the type of event will be persisted.
            </summary>
            <param name="evtType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Duende.IdentityServer.Events.DefaultEventService.CanRaiseEvent(Duende.IdentityServer.Events.Event)">
            <summary>
            Determines whether this event would be persisted.
            </summary>
            <param name="evt">The evt.</param>
            <returns>
              <c>true</c> if this event would be persisted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Events.DefaultEventService.PrepareEventAsync(Duende.IdentityServer.Events.Event)">
            <summary>
            Prepares the event.
            </summary>
            <param name="evt">The evt.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions">
            <summary>
            Extensions for AuthenticationProperties
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.GetSessionId(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Gets the user's session identifier.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.SetSessionId(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)">
            <summary>
            Sets the user's session identifier.
            </summary>
            <param name="properties"></param>
            <param name="sid">The session id</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.GetClientList(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Gets the list of client ids the user has signed into during their session.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.RemoveClientList(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Removes the list of client ids.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.SetClientList(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the list of client ids.
            </summary>
            <param name="properties"></param>
            <param name="clientIds"></param>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.AddClientId(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)">
            <summary>
            Adds a client to the list of clients the user has signed into during their session.
            </summary>
            <param name="properties"></param>
            <param name="clientId"></param>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions">
            <summary>
             Extension methods for AuthenticationTicket
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.GetSubjectId(Microsoft.AspNetCore.Authentication.AuthenticationTicket)">
            <summary>
            Extracts a subject identifier
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.GetSessionId(Microsoft.AspNetCore.Authentication.AuthenticationTicket)">
            <summary>
            Extracts the session ID
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.GetDisplayName(Microsoft.AspNetCore.Authentication.AuthenticationTicket,System.String)">
            <summary>
            Extracts the display name
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.GetIssuer(Microsoft.AspNetCore.Authentication.AuthenticationTicket)">
            <summary>
            Gets the issuer
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.SetIssuer(Microsoft.AspNetCore.Authentication.AuthenticationTicket,System.String)">
            <summary>
            Sets a issuer
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.GetIssued(Microsoft.AspNetCore.Authentication.AuthenticationTicket)">
            <summary>
            Extracts the issuance time
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.GetExpiration(Microsoft.AspNetCore.Authentication.AuthenticationTicket)">
            <summary>
            Extracts the expiration time
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.Serialize(Microsoft.AspNetCore.Authentication.AuthenticationTicket,Microsoft.AspNetCore.DataProtection.IDataProtector)">
            <summary>
            Serializes and AuthenticationTicket to a string
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.Deserialize(Duende.IdentityServer.Models.ServerSideSession,Microsoft.AspNetCore.DataProtection.IDataProtector,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Deserializes a UserSession's Ticket to an AuthenticationTicket
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.AuthenticationTicketLite">
            <summary>
            Serialization friendly AuthenticationTicket
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.AuthenticationTicketLite.Scheme">
            <summary>
            The scheme
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.AuthenticationTicketLite.User">
            <summary>
            The user
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.AuthenticationTicketLite.Items">
            <summary>
            The items
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.AuthenticationTicketEnvelope">
            <summary>
            Envelope for serialized data
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.AuthenticationTicketEnvelope.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Extensions.AuthenticationTicketExtensions.AuthenticationTicketEnvelope.Payload">
            <summary>
            Payload
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.JsonWebKeyExtensions">
            <summary>
            Extensions methods for JsonWebKey
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.JsonWebKeyExtensions.CreateThumbprintCnf(Microsoft.IdentityModel.Tokens.JsonWebKey)">
            <summary>
            Create the value of a thumbprint-based cnf claim
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.JsonWebKeyExtensions.CreateThumbprint(Microsoft.IdentityModel.Tokens.JsonWebKey)">
            <summary>
            Create the value of a thumbprint
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.KeyManagementExtensions">
            <summary>
            Extensions for Key Management
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.PrincipalExtensions">
            <summary>
            Extension methods for <see cref="T:System.Security.Principal.IPrincipal"/> and <see cref="T:System.Security.Principal.IIdentity"/> .
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationTime(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication time.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationTimeEpoch(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication epoch time.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationTimeEpoch(System.Security.Principal.IIdentity)">
            <summary>
            Gets the authentication epoch time.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetSubjectId(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the subject identifier.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetSubjectId(System.Security.Principal.IIdentity)">
            <summary>
            Gets the subject identifier.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">sub claim is missing</exception>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetDisplayName(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the name.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationMethod(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication method.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationMethods(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication method claims.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationMethod(System.Security.Principal.IIdentity)">
            <summary>
            Gets the authentication method.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">amr claim is missing</exception>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationMethods(System.Security.Principal.IIdentity)">
            <summary>
            Gets the authentication method claims.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetIdentityProvider(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the identity provider.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetIdentityProvider(System.Security.Principal.IIdentity)">
            <summary>
            Gets the identity provider.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">idp claim is missing</exception>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetTenant(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the tenant.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.IsAuthenticated(System.Security.Principal.IPrincipal)">
            <summary>
            Determines whether this instance is authenticated.
            </summary>
            <param name="principal">The principal.</param>
            <returns>
              <c>true</c> if the specified principal is authenticated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.ServerSideSessionExtensions">
            <summary>
            Extensions for ServerSideSession
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.ServerSideSessionExtensions.Clone(Duende.IdentityServer.Models.ServerSideSession)">
            <summary>
            Clones the instance
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.ServerUrlExtensions">
            <summary>
            Extension methods for IServerUrls
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.ServerUrlExtensions.GetUnicodeOrigin(Duende.IdentityServer.Services.IServerUrls)">
            <summary>
            Returns the origin in unicode, and not in punycode (if we have a unicode hostname)
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.ServerUrlExtensions.GetAbsoluteUrl(Duende.IdentityServer.Services.IServerUrls,System.String)">
            <summary>
            Returns an absolute URL for the URL or path.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.ServerUrlExtensions.GetIdentityServerRelativeUrl(Duende.IdentityServer.Services.IServerUrls,System.String)">
            <summary>
            Returns the URL into the server based on the relative path. The path parameter can start with "~/" or "/".
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.TokenExtensions">
            <summary>
            Extensions for Token
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.TokenExtensions.CreateJwtPayloadDictionary(Duende.IdentityServer.Models.Token,Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.IClock,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates the default JWT payload dictionary
            </summary>
            <param name="token"></param>
            <param name="options"></param>
            <param name="clock"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.X509CertificateExtensions">
            <summary>
            Extensions methods for X509Certificate2
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.X509CertificateExtensions.CreateThumbprintCnf(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create the value of a thumbprint-based cnf claim
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.X509CertificateExtensions.GetSha256Thumbprint(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Returns the SHA256 thumbprint of the certificate as a base64url encoded string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Models.ClientExtensions">
            <summary>
            Extension methods for client.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ClientExtensions.IsImplicitOnly(Duende.IdentityServer.Models.Client)">
            <summary>
            Returns true if the client is an implicit-only client.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ClientExtensions.GetKeysAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret})">
            <summary>
            Constructs a list of SecurityKey from a Secret collection
            </summary>
            <param name="secrets">The secrets</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Models.HashExtensions">
            <summary>
            Extension methods for hashing strings
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.HashExtensions.Sha256(System.String)">
            <summary>
            Creates a SHA256 hash of the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>A hash</returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.HashExtensions.Sha256(System.Byte[])">
            <summary>
            Creates a SHA256 hash of the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>A hash.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.HashExtensions.Sha512(System.String)">
            <summary>
            Creates a SHA512 hash of the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>A hash</returns>
        </member>
        <member name="T:Duende.IdentityServer.Models.ProfileDataRequestContextExtensions">
            <summary>
            Extensions for ProfileDataRequestContext
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContextExtensions.FilterClaims(Duende.IdentityServer.Models.ProfileDataRequestContext,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Filters the claims based on requested claim types.
            </summary>
            <param name="context">The context.</param>
            <param name="claims">The claims.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContextExtensions.AddRequestedClaims(Duende.IdentityServer.Models.ProfileDataRequestContext,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Filters the claims based on the requested claim types and then adds them to the IssuedClaims collection.
            </summary>
            <param name="context">The context.</param>
            <param name="claims">The claims.</param>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContextExtensions.LogProfileRequest(Duende.IdentityServer.Models.ProfileDataRequestContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Logs the profile request.
            </summary>
            <param name="context">The context.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContextExtensions.LogIssuedClaims(Duende.IdentityServer.Models.ProfileDataRequestContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Logs the issued claims.
            </summary>
            <param name="context">The context.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:Duende.IdentityServer.Models.ResourceExtensions">
            <summary>
            Extensions for Resource
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ResourceExtensions.GetRequiredScopeValues(Duende.IdentityServer.Validation.ResourceValidationResult)">
            <summary>
            Returns the collection of scope values that are required.
            </summary>
            <param name="resourceValidationResult"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.ResourceExtensions.ToScopeNames(Duende.IdentityServer.Models.Resources)">
            <summary>
            Converts to scope names.
            </summary>
            <param name="resources">The resources.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.ResourceExtensions.FindIdentityResourcesByScope(Duende.IdentityServer.Models.Resources,System.String)">
            <summary>
            Finds the IdentityResource that matches the scope.
            </summary>
            <param name="resources">The resources.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.ResourceExtensions.FindApiResourcesByScope(Duende.IdentityServer.Models.Resources,System.String)">
            <summary>
            Finds the API resources that contain the scope.
            </summary>
            <param name="resources">The resources.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.ResourceExtensions.FindApiScope(Duende.IdentityServer.Models.Resources,System.String)">
            <summary>
            Finds the API scope.
            </summary>
            <param name="resources">The resources.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Models.BackchannelUserLoginRequest">
            <summary>
            Models the information to initiate a user login request due to a CIBA request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.BackchannelUserLoginRequest.InternalId">
            <summary>
            Gets or sets the id of the request in the store.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.BackchannelUserLoginRequest.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.BackchannelUserLoginRequest.BindingMessage">
            <summary>
            Gets or sets the binding message.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.BackchannelUserLoginRequest.AuthenticationContextReferenceClasses">
            <summary>
            Gets or sets the authentication context reference classes.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.BackchannelUserLoginRequest.Tenant">
            <summary>
            Gets or sets the tenant passed in the acr_values.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.BackchannelUserLoginRequest.IdP">
            <summary>
            Gets or sets the idp passed in the acr_values.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.BackchannelUserLoginRequest.RequestedResourceIndicators">
            <summary>
            Gets or sets the resource indicator.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.BackchannelUserLoginRequest.Client">
            <summary>
            Gets or sets the client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.BackchannelUserLoginRequest.ValidatedResources">
            <summary>
            Gets or sets the validated resources.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.BackchannelUserLoginRequest.Properties">
            <summary> 
            Gets or sets a dictionary of custom properties associated with this
            request. These properties by default are copied from the validated
            custom request parameters.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IsActiveContext">
            <summary>
            Context describing the is-active check
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.IsActiveContext.#ctor(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IsActiveContext"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.IsActiveContext.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.IsActiveContext.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.IsActiveContext.Caller">
            <summary>
            Gets or sets the caller.
            </summary>
            <value>
            The caller.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.IsActiveContext.IsActive">
            <summary>
            Gets or sets a value indicating whether the subject is active and can receive tokens.
            </summary>
            <value>
              <c>true</c> if the subject is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.LogoutNotificationContext">
            <summary>
            Provides the context necessary to construct a logout notification.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutNotificationContext.SubjectId">
            <summary>
             The SubjectId of the user.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutNotificationContext.SessionId">
            <summary>
            The session Id of the user's authentication session.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutNotificationContext.Issuer">
            <summary>
            The issuer for the back-channel logout
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutNotificationContext.ClientIds">
            <summary>
            The list of client Ids that the user has authenticated to.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutNotificationContext.LogoutReason">
            <summary>
            Indicates why the user's session ended, if known.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.LogoutNotificationReason">
            <summary>
            Models the reason the user's session was ended.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.LogoutNotificationReason.UserLogout">
            <summary>
            The user interactively triggered logout.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.LogoutNotificationReason.SessionExpiration">
            <summary>
            The user's session expired due to inactivity.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.LogoutNotificationReason.Terminated">
            <summary>
            The user's session was explicitly terminated by some other means (e.g. an admin)
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.ProfileDataRequestContext">
            <summary>
            Class describing the profile data request
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.ProfileDataRequestContext"/> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContext.#ctor(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.ProfileDataRequestContext" /> class.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <param name="caller">The caller.</param>
            <param name="requestedClaimTypes">The requested claim types.</param>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.ValidatedRequest">
            <summary>
            Gets or sets the validatedRequest.
            </summary>
            <value>
            The validatedRequest.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.RequestedClaimTypes">
            <summary>
            Gets or sets the requested claim types.
            </summary>
            <value>
            The requested claim types.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.Client">
            <summary>
            Gets or sets the client id.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.Caller">
            <summary>
            Gets or sets the caller.
            </summary>
            <value>
            The caller.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.RequestedResources">
            <summary>
            Gets or sets the requested resources (if available).
            </summary>
            <value>
            The resources.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.IssuedClaims">
            <summary>
            Gets or sets the issued claims.
            </summary>
            <value>
            The issued claims.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.DeviceFlowAuthorizationRequest">
            <summary>
            Represents contextual information about a device flow authorization request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.DeviceFlowAuthorizationRequest.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.DeviceFlowAuthorizationRequest.ValidatedResources">
            <summary>
            Gets or sets the validated resources.
            </summary>
            <value>
            The scopes requested.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.DeviceFlowInteractionResult">
            <summary>
            Request object for device flow interaction
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.DeviceFlowInteractionResult.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.DeviceFlowInteractionResult.IsError">
            <summary>
            Gets a value indicating whether this instance is error.
            </summary>
            <value>
              <c>true</c> if this instance is error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.DeviceFlowInteractionResult.IsAccessDenied">
            <summary>
            Gets or sets a value indicating whether this instance is access denied.
            </summary>
            <value>
              <c>true</c> if this instance is access denied; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Models.DeviceFlowInteractionResult.Failure(System.String)">
            <summary>
            Create failure result
            </summary>
            <param name="errorDescription">The error description.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Models.Grant">
            <summary>
            Models a grant the user has given.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.Description">
            <summary>
            Gets the description the user assigned to the device being authorized.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.Expiration">
            <summary>
            Gets or sets the expiration.
            </summary>
            <value>
            The expiration.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources">
            <summary>
            Convenience class that defines standard identity resources.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources.OpenId">
            <summary>
            Models the standard openid scope
            </summary>
            <seealso cref="T:Duende.IdentityServer.Models.IdentityResource" />
        </member>
        <member name="M:Duende.IdentityServer.Models.IdentityResources.OpenId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IdentityResources.OpenId"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources.Profile">
            <summary>
            Models the standard profile scope
            </summary>
            <seealso cref="T:Duende.IdentityServer.Models.IdentityResource" />
        </member>
        <member name="M:Duende.IdentityServer.Models.IdentityResources.Profile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IdentityResources.Profile"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources.Email">
            <summary>
            Models the standard email scope
            </summary>
            <seealso cref="T:Duende.IdentityServer.Models.IdentityResource" />
        </member>
        <member name="M:Duende.IdentityServer.Models.IdentityResources.Email.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IdentityResources.Email"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources.Phone">
            <summary>
            Models the standard phone scope
            </summary>
            <seealso cref="T:Duende.IdentityServer.Models.IdentityResource" />
        </member>
        <member name="M:Duende.IdentityServer.Models.IdentityResources.Phone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IdentityResources.Phone"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources.Address">
            <summary>
            Models the standard address scope
            </summary>
            <seealso cref="T:Duende.IdentityServer.Models.IdentityResource" />
        </member>
        <member name="M:Duende.IdentityServer.Models.IdentityResources.Address.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IdentityResources.Address"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.AuthorizationRequest">
            <summary>
            Represents contextual information about a authorization request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.DisplayMode">
            <summary>
            The display mode passed from the authorization request.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.UiLocales">
            <summary>
            The UI locales passed from the authorization request.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.IdP">
            <summary>
            The external identity provider requested. This is used to bypass home realm 
            discovery (HRD). This is provided via the <c>"idp:"</c> prefix to the <c>acr</c> 
            parameter on the authorize request.
            </summary>
            <value>
            The external identity provider identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.Tenant">
            <summary>
            The tenant requested. This is provided via the <c>"tenant:"</c> prefix to 
            the <c>acr</c> parameter on the authorize request.
            </summary>
            <value>
            The tenant.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.LoginHint">
            <summary>
            The expected username the user will use to login. This is requested from the client 
            via the <c>login_hint</c> parameter on the authorize request.
            </summary>
            <value>
            The LoginHint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.PromptModes">
            <summary>
            Gets or sets the collection of prompt modes.
            </summary>
            <value>
            The collection of prompt modes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.AcrValues">
            <summary>
            The acr values passed from the authorization request.
            </summary>
            <value>
            The acr values.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.ValidatedResources">
            <summary>
            The validated resources.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.Parameters">
            <summary>
            Gets the entire parameter collection.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.RequestObjectValues">
            <summary>
            Gets the validated contents of the request object (if present)
            </summary>
            <value>
            The request object values
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Models.AuthorizationRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.AuthorizationRequest"/> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.AuthorizationRequest.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.AuthorizationRequest"/> class.
            </summary>
            <param name="request">Authorized request validated parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is null.</exception>
        </member>
        <member name="T:Duende.IdentityServer.Models.ConsentRequest">
            <summary>
            Models the parameters to identify a request for consent.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ConsentRequest.#ctor(Duende.IdentityServer.Models.AuthorizationRequest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.ConsentRequest"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Duende.IdentityServer.Models.ConsentRequest.#ctor(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.ConsentRequest"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentRequest.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentRequest.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentRequest.ScopesRequested">
            <summary>
            Gets or sets the scopes requested.
            </summary>
            <value>
            The scopes requested.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentRequest.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentRequest.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.ConsentResponse">
            <summary>
            Models the user's response to the consent screen.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.Error">
            <summary>
            Error, if any, for the consent response.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.ErrorDescription">
            <summary>
            Error description.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.Granted">
            <summary>
            Gets if consent was granted.
            </summary>
            <value>
              <c>true</c> if consent was granted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.ScopesValuesConsented">
            <summary>
            Gets or sets the scope values consented to.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.RememberConsent">
            <summary>
            Gets or sets a value indicating whether the user wishes the consent to be remembered.
            </summary>
            <value>
              <c>true</c> if consent is to be remembered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.Description">
            <summary>
            Gets the description of the device.
            </summary>
            <value>
            The description of the device.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.AuthorizationError">
            <summary>
            Enum to model interaction authorization errors.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.AccessDenied">
            <summary>
            Access denied
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.InteractionRequired">
            <summary>
            Interaction required
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.LoginRequired">
            <summary>
            Login required
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.AccountSelectionRequired">
            <summary>
            Account selection required
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.ConsentRequired">
            <summary>
            Consent required
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.TemporarilyUnavailable">
            <summary>
            Temporarily unavailable
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.UnmetAuthenticationRequirements">
            <summary>
            Unmet Authentication Requirements
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.ErrorMessage">
            <summary>
            Models the data for the error page.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.DisplayMode">
            <summary>
            The display mode passed from the authorization request.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.UiLocales">
            <summary>
            The UI locales passed from the authorization request.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.Error">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.RequestId">
            <summary>
            The per-request identifier. This can be used to display to the end user and can be used in diagnostics.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.ActivityId">
            <summary>
            The current Activity Id when the error message was captured.
            </summary>
            <value>
            The Activity Identifier
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.RedirectUri">
            <summary>
            The redirect URI.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.ResponseMode">
            <summary>
            The response mode.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.ClientId">
            <summary>
            The client id making the request (if available).
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.LogoutMessage">
            <summary>
            Models the validated singout context.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.LogoutMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.LogoutMessage"/> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.LogoutMessage.#ctor(Duende.IdentityServer.Validation.ValidatedEndSessionRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.LogoutMessage"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.ClientName">
            <summary>
            Gets or sets the client name.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.PostLogoutRedirectUri">
            <summary>
            Gets or sets the post logout redirect URI.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.SubjectId">
            <summary>
            Gets or sets the subject identifier for the user at logout time.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.SessionId">
            <summary>
            Gets or sets the session identifier for the user at logout time.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.ClientIds">
            <summary>
             Ids of clients known to have an authentication session for user at end session time
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.UiLocales">
            <summary>
            The UI locales.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.Parameters">
            <summary>
            Gets the entire parameter collection.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.ContainsPayload">
            <summary>
             Flag to indicate if the payload contains useful information or not to avoid serialization.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.LogoutRequest">
            <summary>
            Models the request from a client to sign the user out.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.LogoutRequest.#ctor(System.String,Duende.IdentityServer.Models.LogoutMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.LogoutRequest"/> class.
            </summary>
            <param name="iframeUrl">The iframe URL.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.ClientName">
            <summary>
            Gets or sets the client name.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.PostLogoutRedirectUri">
            <summary>
            Gets or sets the post logout redirect URI.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.SubjectId">
            <summary>
            Gets or sets the subject identifier for the user at logout time.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.SessionId">
            <summary>
            Gets or sets the session identifier for the user at logout time.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.ClientIds">
            <summary>
             Ids of clients known to have an authentication session for user at end session time
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.UiLocales">
            <summary>
            The UI locales.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.Parameters">
            <summary>
            Gets the entire parameter collection.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.SignOutIFrameUrl">
            <summary>
            Gets or sets the sign out iframe URL.
            </summary>
            <value>
            The sign out iframe URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.ShowSignoutPrompt">
            <summary>
            Gets or sets a value indicating whether the user should be prompted for signout.
            </summary>
            <value>
              <c>true</c> if the signout prompt should be shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.Message`1">
            <summary>
            Base class for data that needs to be written out as cookies.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.Message`1.#ctor(`0)">
            <summary>
            Should only be used from unit tests
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Duende.IdentityServer.Models.Message`1.#ctor">
            <summary>
            For JSON serializer. 
            System.Text.Json.JsonSerializer requires public, parameterless constructor
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.Message`1.#ctor(`0,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.Message`1"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="now">The current UTC date/time.</param>
        </member>
        <member name="P:Duende.IdentityServer.Models.Message`1.Created">
            <summary>
            Gets or sets the UTC ticks the <see cref="T:Duende.IdentityServer.Models.Message`1" /> was created.
            </summary>
            <value>
            The created UTC ticks.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Message`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.ParsedSecret">
            <summary>
            Represents a secret extracted from the HttpContext
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ParsedSecret.Id">
            <summary>
            Gets or sets the identifier associated with this secret
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ParsedSecret.Credential">
            <summary>
            Gets or sets the credential to verify the secret
            </summary>
            <value>
            The credential.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ParsedSecret.Type">
            <summary>
            Gets or sets the type of the secret
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ParsedSecret.Properties">
            <summary>
            Gets or sets additional properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.RefreshTokenCreationRequest">
            <summary>
            Models the data to create a refresh token from a validated request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenCreationRequest.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenCreationRequest.Subject">
            <summary>
            The subject.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenCreationRequest.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenCreationRequest.AuthorizedScopes">
            <summary>
            The scopes.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenCreationRequest.AuthorizedResourceIndicators">
            <summary>
            The resource indicators. Null indicates there was no authorization step, thus no restrictions. 
            Non-null means there was an authorization step, and subsequent requested resource indicators must be in the original list.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenCreationRequest.RequestedResourceIndicator">
            <summary>
            The requested resource indicator.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenCreationRequest.AccessToken">
            <summary>
            The access token.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenCreationRequest.ProofType">
            <summary>
            The proof type used.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.RefreshTokenCreationRequest.Validate">
            <summary>
            Called to validate the <see cref="T:Duende.IdentityServer.Models.RefreshTokenCreationRequest"/> before it is processed.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.RefreshTokenUpdateRequest">
            <summary>
            Models the data to update a refresh token.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenUpdateRequest.Handle">
            <summary>
            The handle of the refresh token.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenUpdateRequest.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenUpdateRequest.RefreshToken">
            <summary>
            The refresh token to update.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.RefreshTokenUpdateRequest.MustUpdate">
            <summary>
            Flag to indicate that the refreth token was modified, and requires an update to the database.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.SecurityKeyInfo">
            <summary>
            Information about a security key
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.SecurityKeyInfo.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.SecurityKeyInfo.SigningAlgorithm">
            <summary>
            The signing algorithm
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.TokenCreationRequest">
            <summary>
            Models the data to create a token from a validated request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.ValidatedResources">
            <summary>
            Gets or sets the validated resources.
            </summary>
            <value>
            The resources.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.ValidatedRequest">
            <summary>
            Gets or sets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.IncludeAllIdentityClaims">
            <summary>
            Gets or sets a value indicating whether [include all identity claims].
            </summary>
            <value>
            <c>true</c> if [include all identity claims]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.AccessTokenToHash">
            <summary>
            Gets or sets the access token to hash.
            </summary>
            <value>
            The access token to hash.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.AuthorizationCodeToHash">
            <summary>
            Gets or sets the authorization code to hash.
            </summary>
            <value>
            The authorization code to hash.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.StateHash">
            <summary>
            Gets or sets pre-hashed state
            </summary>
            <value>
            The pre-hashed state
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.Description">
            <summary>
            Gets the description the user assigned to the device being authorized.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Models.TokenCreationRequest.Validate">
            <summary>
            Called to validate the <see cref="T:Duende.IdentityServer.Models.TokenCreationRequest"/> before it is processed.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.TokenRequestErrors">
            <summary>
            Token request errors
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.InvalidRequest">
            <summary>
            invalid_request
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.InvalidClient">
            <summary>
            invalid_client
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.InvalidGrant">
            <summary>
            invalid_grant
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.UnauthorizedClient">
            <summary>
            unauthorized_client
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.UnsupportedGrantType">
            <summary>
            unsupported_grant_type
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.InvalidScope">
            <summary>
            invalid_scope
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.InvalidTarget">
            <summary>
            invalid_target
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.UserSession">
            <summary>
            Results from querying user sessions from session management service.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.UserSession.SubjectId">
            <summary>
            The subject ID
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.UserSession.SessionId">
            <summary>
            The session ID
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.UserSession.DisplayName">
            <summary>
            The display name for the user
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.UserSession.Created">
            <summary>
            The creation time
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.UserSession.Renewed">
            <summary>
            The renewal time
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.UserSession.Expires">
            <summary>
            The expiration time
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.UserSession.Issuer">
            <summary>
            The issuer of the token service at login time.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.UserSession.ClientIds">
            <summary>
            The client ids for the session
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.UserSession.AuthenticationTicket">
            <summary>
            The underlying AuthenticationTicket
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IClientStoreExtensions">
            <summary>
            Extension for IClientStore
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IClientStoreExtensions.FindEnabledClientByIdAsync(Duende.IdentityServer.Stores.IClientStore,System.String)">
            <summary>
            Finds the enabled client by identifier.
            </summary>
            <param name="store">The store.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IResourceStoreExtensions">
            <summary>
            Extensions for IResourceStore
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IResourceStoreExtensions.FindResourcesByScopeAsync(Duende.IdentityServer.Stores.IResourceStore,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds the resources by scope.
            </summary>
            <param name="store">The store.</param>
            <param name="scopeNames">The scope names.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IResourceStoreExtensions.FindEnabledResourcesByScopeAsync(Duende.IdentityServer.Stores.IResourceStore,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds the enabled resources by scope.
            </summary>
            <param name="store">The store.</param>
            <param name="scopeNames">The scope names.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IResourceStoreExtensions.GetAllEnabledResourcesAsync(Duende.IdentityServer.Stores.IResourceStore)">
            <summary>
            Gets all enabled resources.
            </summary>
            <param name="store">The store.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IResourceStoreExtensions.FindEnabledIdentityResourcesByScopeAsync(Duende.IdentityServer.Stores.IResourceStore,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds the enabled identity resources by scope.
            </summary>
            <param name="store">The store.</param>
            <param name="scopeNames">The scope names.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IResourceStoreExtensions.FindEnabledApiResourcesByNameAsync(Duende.IdentityServer.Stores.IResourceStore,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds the enabled API resources by name.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Stores.CachingClientStore`1">
            <summary>
            Cache decorator for IClientStore
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Duende.IdentityServer.Stores.IClientStore" />
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingClientStore`1.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,`0,Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Models.Client})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.CachingClientStore`1"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="inner">The inner.</param>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingClientStore`1.FindClientByIdAsync(System.String)">
            <summary>
            Finds a client by id
            </summary>
            <param name="clientId">The client id</param>
            <returns>
            The client
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.CachingCorsPolicyService`1">
            <summary>
            Caching decorator for ICorsPolicyService
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.ICorsPolicyService" />
        </member>
        <member name="T:Duende.IdentityServer.Stores.CachingCorsPolicyService`1.CorsCacheEntry">
            <summary>
            Class to model entries in CORS origin cache.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingCorsPolicyService`1.CorsCacheEntry.#ctor(System.Boolean)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.CachingCorsPolicyService`1.CorsCacheEntry.Allowed">
            <summary>
            Is origin allowed.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingCorsPolicyService`1.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,`0,Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Stores.CachingCorsPolicyService{`0}.CorsCacheEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.CachingResourceStore`1"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="inner">The inner.</param>
            <param name="corsCache">The CORS origin cache.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingCorsPolicyService`1.IsOriginAllowedAsync(System.String)">
            <summary>
            Determines whether origin is allowed.
            </summary>
            <param name="origin">The origin.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.CachingResourceStore`1">
            <summary>
            Caching decorator for IResourceStore
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Duende.IdentityServer.Stores.IResourceStore" />
        </member>
        <member name="T:Duende.IdentityServer.Stores.CachingResourceStore`1.ApiResourceNames">
            <summary>
            Used to cache the ApiResource names for ApiScopes requested.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.CachingResourceStore`1.ApiResourceNames.Names">
            <summary>
            The ApiResource names.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,`0,Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Models.IdentityResource},Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Models.ApiResource},Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Models.ApiScope},Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Models.Resources},Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Stores.CachingResourceStore{`0}.ApiResourceNames})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.CachingResourceStore`1"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="inner">The inner.</param>
            <param name="identityCache">The IdentityResource cache.</param>
            <param name="apisCache">The ApiResource cache.</param>
            <param name="scopeCache">The ApiScope cache.</param>
            <param name="allCache">All Resources cache.</param>
            <param name="apiResourceNames"></param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.GetAllResourcesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.FindApiResourcesByScopeNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.FindApiResourcesByNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.FindIdentityResourcesByScopeNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.FindApiScopesByNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore">
            <summary>
            Default authorization code store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore.StoreAuthorizationCodeAsync(Duende.IdentityServer.Models.AuthorizationCode)">
            <summary>
            Stores the authorization code asynchronous.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore.GetAuthorizationCodeAsync(System.String)">
            <summary>
            Gets the authorization code asynchronous.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore.RemoveAuthorizationCodeAsync(System.String)">
            <summary>
            Removes the authorization code asynchronous.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultBackChannelAuthenticationRequestStore">
            <summary>
            Default authorization code store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultBackChannelAuthenticationRequestStore.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.DefaultBackChannelAuthenticationRequestStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultBackChannelAuthenticationRequestStore.CreateRequestAsync(Duende.IdentityServer.Models.BackChannelAuthenticationRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultBackChannelAuthenticationRequestStore.GetByInternalIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultBackChannelAuthenticationRequestStore.GetByAuthenticationRequestIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultBackChannelAuthenticationRequestStore.RemoveByInternalIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultBackChannelAuthenticationRequestStore.GetLoginsForUserAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultBackChannelAuthenticationRequestStore.UpdateByInternalIdAsync(System.String,Duende.IdentityServer.Models.BackChannelAuthenticationRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultGrantStore`1">
            <summary>
            Base class for persisting grants using the IPersistedGrantStore.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Duende.IdentityServer.Stores.DefaultGrantStore`1.GrantType">
            <summary>
            The grant type being stored.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.DefaultGrantStore`1.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.DefaultGrantStore`1.Store">
            <summary>
            The PersistedGrantStore.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.DefaultGrantStore`1.Serializer">
            <summary>
            The PersistentGrantSerializer;
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.DefaultGrantStore`1.HandleGenerationService">
            <summary>
            The HandleGenerationService.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.#ctor(System.String,Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultGrantStore`1"/> class.
            </summary>
            <param name="grantType">Type of the grant.</param>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentNullException">grantType</exception>
        </member>
        <member name="F:Duende.IdentityServer.Stores.DefaultGrantStore`1.HexEncodingFormatSuffix">
            <summary>
            The suffix added to keys to indicate that hex encoding should be used.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.CreateHandleAsync">
            <summary>
            Creates a handle.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.GetHashedKey(System.String)">
            <summary>
            Gets the hashed key.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.GetItemAsync(System.String)">
            <summary>
            Gets the item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.GetItemByHashedKeyAsync(System.String)">
            <summary>
            Gets the item by the hashed key.
            </summary>
            <param name="hashedKey"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.GetAllAsync(Duende.IdentityServer.Stores.PersistedGrantFilter)">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.CreateItemAsync(`0,System.String,System.String,System.String,System.String,System.DateTime,System.Int32)">
            <summary>
            Creates the item.
            </summary>
            <param name="item">The item.</param>
            <param name="clientId">The client identifier.</param>
            <param name="subjectId">The subject identifier.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="description">The description.</param>
            <param name="created">The created.</param>
            <param name="lifetime">The lifetime.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.StoreItemAsync(System.String,`0,System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Stores the item.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <param name="clientId">The client identifier.</param>
            <param name="subjectId">The subject identifier.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="description">The description.</param>
            <param name="created">The created time.</param>
            <param name="expiration">The expiration.</param>
            <param name="consumedTime">The consumed time.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.StoreItemByHashedKeyAsync(System.String,`0,System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Stores the item.
            </summary>
            <param name="hashedKey">The key.</param>
            <param name="item">The item.</param>
            <param name="clientId">The client identifier.</param>
            <param name="subjectId">The subject identifier.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="description">The description.</param>
            <param name="created">The created time.</param>
            <param name="expiration">The expiration.</param>
            <param name="consumedTime">The consumed time.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.RemoveItemAsync(System.String)">
            <summary>
            Removes the item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.RemoveItemByHashedKeyAsync(System.String)">
            <summary>
            Removes the item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.RemoveAllAsync(System.String,System.String,System.String)">
            <summary>
            Removes all items for a subject id / client id combination.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="sessionId">The optional session identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultReferenceTokenStore">
            <summary>
            Default reference token store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultReferenceTokenStore.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.DefaultReferenceTokenStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultReferenceTokenStore"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultReferenceTokenStore.StoreReferenceTokenAsync(Duende.IdentityServer.Models.Token)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultReferenceTokenStore.GetReferenceTokenAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultReferenceTokenStore.RemoveReferenceTokenAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultReferenceTokenStore.RemoveReferenceTokensAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultRefreshTokenStore">
            <summary>
            Default refresh token store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.DefaultRefreshTokenStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultRefreshTokenStore"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.StoreRefreshTokenAsync(Duende.IdentityServer.Models.RefreshToken)">
            <summary>
            Stores the refresh token.
            </summary>
            <param name="refreshToken">The refresh token.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.UpdateRefreshTokenAsync(System.String,Duende.IdentityServer.Models.RefreshToken)">
            <summary>
            Updates the refresh token.
            </summary>
            <param name="handle">The handle.</param>
            <param name="refreshToken">The refresh token.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.GetRefreshTokenAsync(System.String)">
            <summary>
            Gets the refresh token.
            </summary>
            <param name="refreshTokenHandle">The refresh token handle.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.RemoveRefreshTokenAsync(System.String)">
            <summary>
            Removes the refresh token.
            </summary>
            <param name="refreshTokenHandle">The refresh token handle.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.RemoveRefreshTokensAsync(System.String,System.String)">
            <summary>
            Removes the refresh tokens.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultUserConsentStore">
            <summary>
            Default user consent store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultUserConsentStore.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.DefaultUserConsentStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultUserConsentStore"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultUserConsentStore.StoreUserConsentAsync(Duende.IdentityServer.Models.Consent)">
            <summary>
            Stores the user consent asynchronous.
            </summary>
            <param name="consent">The consent.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultUserConsentStore.GetUserConsentAsync(System.String,System.String)">
            <summary>
            Gets the user consent asynchronous.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultUserConsentStore.RemoveUserConsentAsync(System.String,System.String)">
            <summary>
            Removes the user consent asynchronous.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.Default.DistributedCacheAuthorizationParametersMessageStore">
            <summary>
            Implementation of IAuthorizationParametersMessageStore that uses the IDistributedCache.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.Default.DistributedCacheAuthorizationParametersMessageStore.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Duende.IdentityServer.Services.IHandleGenerationService)">
            <summary>
            Ctor.
            </summary>
            <param name="distributedCache"></param>
            <param name="handleGenerationService"></param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.Default.DistributedCacheAuthorizationParametersMessageStore.WriteAsync(Duende.IdentityServer.Models.Message{System.Collections.Generic.IDictionary{System.String,System.String[]}})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.Default.DistributedCacheAuthorizationParametersMessageStore.ReadAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.Default.DistributedCacheAuthorizationParametersMessageStore.DeleteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1">
            <summary>
            IMessageStore implementation that uses data protection to protect message.
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="F:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1.Protector">
            <summary>
            The data protector.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.ProtectedDataMessageStore{`0}})">
            <summary>
            Ctor
            </summary>
            <param name="provider"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1.ReadAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1.WriteAsync(Duende.IdentityServer.Models.Message{`0})">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Stores.ServerSideTicketStore">
            <summary>
            IServerSideSessionService backed by server side session store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ServerSideTicketStore.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Services.IIssuerNameService,Duende.IdentityServer.Stores.IServerSideSessionStore,Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.ServerSideTicketStore})">
            <summary>
            ctor
            </summary>
            <param name="options"></param>
            <param name="issuerNameService"></param>
            <param name="store"></param>
            <param name="dataProtectionProvider"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ServerSideTicketStore.StoreAsync(Microsoft.AspNetCore.Authentication.AuthenticationTicket)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.ServerSideTicketStore.RetrieveAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.ServerSideTicketStore.RenewAsync(System.String,Microsoft.AspNetCore.Authentication.AuthenticationTicket)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.ServerSideTicketStore.RemoveAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.ServerSideTicketStore.GetSessionsAsync(Duende.IdentityServer.Stores.SessionFilter,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ServerSideTicketStore.QuerySessionsAsync(Duende.IdentityServer.Stores.SessionQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.ServerSideTicketStore.GetAndRemoveExpiredSessionsAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IAuthorizationParametersMessageStore">
            <summary>
            Interface for authorization request messages that are sent from the authorization endpoint to the login and consent UI.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IAuthorizationParametersMessageStore.WriteAsync(Duende.IdentityServer.Models.Message{System.Collections.Generic.IDictionary{System.String,System.String[]}})">
            <summary>
            Writes the authorization parameters.
            </summary>
            <param name="message">The message.</param>
            <returns>The identifier for the stored message.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IAuthorizationParametersMessageStore.ReadAsync(System.String)">
            <summary>
            Reads the authorization parameters.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IAuthorizationParametersMessageStore.DeleteAsync(System.String)">
            <summary>
            Deletes the authorization parameters.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IConsentMessageStore">
            <summary>
            Interface for consent messages that are sent from the consent UI to the authorization endpoint.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IConsentMessageStore.WriteAsync(System.String,Duende.IdentityServer.Models.Message{Duende.IdentityServer.Models.ConsentResponse})">
            <summary>
            Writes the consent response message.
            </summary>
            <param name="id">The id for the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IConsentMessageStore.ReadAsync(System.String)">
            <summary>
            Reads the consent response message.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IConsentMessageStore.DeleteAsync(System.String)">
            <summary>
            Deletes the consent response message.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IMessageStore`1">
            <summary>
            Interface for a message store
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IMessageStore`1.WriteAsync(Duende.IdentityServer.Models.Message{`0})">
            <summary>
            Writes the message.
            </summary>
            <param name="message">The message.</param>
            <returns>An identifier for the message</returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IMessageStore`1.ReadAsync(System.String)">
            <summary>
            Reads the message.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryClientStore">
            <summary>
            In-memory client store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryClientStore.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Client})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.InMemoryClientStore"/> class.
            </summary>
            <param name="clients">The clients.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryClientStore.FindClientByIdAsync(System.String)">
            <summary>
            Finds a client by id
            </summary>
            <param name="clientId">The client id</param>
            <returns>
            The client
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore">
            <summary>
            In-memory device flow store
            </summary>
            <seealso cref="T:Duende.IdentityServer.Stores.IDeviceFlowStore" />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore.StoreDeviceAuthorizationAsync(System.String,System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Stores the device authorization request.
            </summary>
            <param name="deviceCode">The device code.</param>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore.FindByUserCodeAsync(System.String)">
            <summary>
            Finds device authorization by user code.
            </summary>
            <param name="userCode">The user code.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore.FindByDeviceCodeAsync(System.String)">
            <summary>
            Finds device authorization by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore.UpdateByUserCodeAsync(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Updates device authorization, searching by user code.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore.RemoveByDeviceCodeAsync(System.String)">
            <summary>
            Removes the device authorization, searching by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore">
            <summary>
            In-memory persisted grant store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore.StoreAsync(Duende.IdentityServer.Models.PersistedGrant)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore.GetAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore.GetAllAsync(Duende.IdentityServer.Stores.PersistedGrantFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore.RemoveAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore.RemoveAllAsync(Duende.IdentityServer.Stores.PersistedGrantFilter)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryPushedAuthorizationRequestStore">
            <summary>
            In-memory implementation of the pushed authorization request store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPushedAuthorizationRequestStore.StoreAsync(Duende.IdentityServer.Models.PushedAuthorizationRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPushedAuthorizationRequestStore.GetByHashAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPushedAuthorizationRequestStore.ConsumeByHashAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryResourcesStore">
            <summary>
            In-memory resource store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.IdentityResource},System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiResource},System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiScope})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.InMemoryResourcesStore" /> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.GetAllResourcesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.FindApiResourcesByNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.FindIdentityResourcesByScopeNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.FindApiResourcesByScopeNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.FindApiScopesByNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryServerSideSessionStore">
            <summary>
            In-memory user session store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryServerSideSessionStore.CreateSessionAsync(Duende.IdentityServer.Models.ServerSideSession,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryServerSideSessionStore.GetSessionAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryServerSideSessionStore.UpdateSessionAsync(Duende.IdentityServer.Models.ServerSideSession,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryServerSideSessionStore.DeleteSessionAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryServerSideSessionStore.GetSessionsAsync(Duende.IdentityServer.Stores.SessionFilter,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryServerSideSessionStore.DeleteSessionsAsync(Duende.IdentityServer.Stores.SessionFilter,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryServerSideSessionStore.GetAndRemoveExpiredSessionsAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryServerSideSessionStore.QuerySessionsAsync(Duende.IdentityServer.Stores.SessionQuery,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemorySigningCredentialsStore">
            <summary>
            Default signing credentials store
            </summary>
            <seealso cref="T:Duende.IdentityServer.Stores.ISigningCredentialStore" />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemorySigningCredentialsStore.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.InMemorySigningCredentialsStore"/> class.
            </summary>
            <param name="credential">The credential.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemorySigningCredentialsStore.GetSigningCredentialsAsync">
            <summary>
            Gets the signing credentials.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryValidationKeysStore">
            <summary>
            The default validation key store
            </summary>
            <seealso cref="T:Duende.IdentityServer.Stores.IValidationKeysStore" />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryValidationKeysStore.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.SecurityKeyInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.InMemoryValidationKeysStore"/> class.
            </summary>
            <param name="keys">The keys.</param>
            <exception cref="T:System.ArgumentNullException">keys</exception>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryValidationKeysStore.GetValidationKeysAsync">
            <summary>
            Gets all validation keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IServerSideTicketStore">
            <summary>
            Custom type for ITicketStore
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IServerSideTicketStore.GetSessionsAsync(Duende.IdentityServer.Stores.SessionFilter,System.Threading.CancellationToken)">
            <summary>
            Gets sessions for a specific subject id and/or session id
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IServerSideTicketStore.QuerySessionsAsync(Duende.IdentityServer.Stores.SessionQuery,System.Threading.CancellationToken)">
            <summary>
            Queries user sessions based on filter
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IServerSideTicketStore.GetAndRemoveExpiredSessionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Removes and returns expired sessions
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Stores.ISigningCredentialStore">
            <summary>
            Interface for a signing credential store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ISigningCredentialStore.GetSigningCredentialsAsync">
            <summary>
            Gets the signing credentials.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IValidationKeysStore">
            <summary>
            Interface for the validation key store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IValidationKeysStore.GetValidationKeysAsync">
            <summary>
            Gets all validation keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.ValidatingClientStore`1">
            <summary>
            Client store decorator for running runtime configuration validation checks
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ValidatingClientStore`1.#ctor(`0,Duende.IdentityServer.Validation.IClientConfigurationValidator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.ValidatingClientStore{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.ValidatingClientStore`1" /> class.
            </summary>
            <param name="inner">The inner.</param>
            <param name="validator">The validator.</param>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ValidatingClientStore`1.FindClientByIdAsync(System.String)">
            <summary>
            Finds a client by id (and runs the validation logic)
            </summary>
            <param name="clientId">The client id</param>
            <returns>
            The client or an InvalidOperationException
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ClientConfigurationValidationContext">
            <summary>
            Context for client configuration validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientConfigurationValidationContext.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientConfigurationValidationContext.IsValid">
            <summary>
            Returns true if client configuration is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientConfigurationValidationContext.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ClientConfigurationValidationContext.#ctor(Duende.IdentityServer.Models.Client)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.ClientConfigurationValidationContext"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ClientConfigurationValidationContext.SetError(System.String)">
            <summary>
            Sets a validation error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.CustomAuthorizeRequestValidationContext">
            <summary>
            Context for custom authorize request validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.CustomAuthorizeRequestValidationContext.Result">
            <summary>
            The result of custom validation. 
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.CustomBackchannelAuthenticationRequestValidationContext">
            <summary>
            The validation context for a custom CIBA validator.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.CustomBackchannelAuthenticationRequestValidationContext.#ctor(Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult)">
            <summary>
            Creates a new instance of the <see cref="T:Duende.IdentityServer.Validation.CustomBackchannelAuthenticationRequestValidationContext"/> 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.CustomBackchannelAuthenticationRequestValidationContext.ValidationResult">
            <summary>
            Gets or sets the CIBA validation result.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.CustomTokenRequestValidationContext">
            <summary>
            Context class for custom token request validation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.CustomTokenRequestValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DPoPProofValidatonContext">
            <summary>
            Models the context for validaing DPoP proof tokens.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.ExpirationValidationMode">
            <summary>
            Enum setting to control validation for the DPoP proof token expiration.
            This supports both the client generated 'iat' value and/or the server generated 'nonce' value. 
            Defaults to only using the 'iat' value.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.ClientClockSkew">
            <summary>
            Clock skew used in validating the DPoP proof token 'iat' claim value. Defaults to 5 minutes.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.Url">
            <summary>
            The HTTP URL to validate
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.Method">
            <summary>
            The HTTP method to validate
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.ProofToken">
            <summary>
            The DPoP proof token to validate
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.ValidateAccessToken">
            <summary>
            If the access token should also be validated
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.AccessToken">
            <summary>
            The access token to validate if <see cref="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.ValidateAccessToken"/> is set
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.AccessTokenClaims">
            <summary>
            The claims associated with the access token, used if <see cref="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.ValidateAccessToken"/> is set. 
            This is included separately from the <see cref="P:Duende.IdentityServer.Validation.DPoPProofValidatonContext.AccessToken"/> because getting the claims 
            might be an expensive operation (especially if the token is a reference token).
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ExtensionGrantValidationContext">
            <summary>
            Class describing the extension grant validation context
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ExtensionGrantValidationContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ExtensionGrantValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext">
            <summary>
            Context for identity provider configuration validation.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext.#ctor(Duende.IdentityServer.Models.IdentityProvider)">
            <summary>
            Initializes a new instance of the IdentityProviderConfigurationValidationContext class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext`1">
            <summary>
            Context for identity provider configuration validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext`1.IdentityProvider">
            <summary>
            Gets or sets the identity provider.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext`1.IsValid">
            <summary>
            Returns true if the configuration is valid.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext`1.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the IdentityProviderConfigurationValidationContext class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext`1.SetError(System.String)">
            <summary>
            Sets a validation error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IntrospectionRequestValidationContext">
            <summary>
            Context for validating an introspection request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationContext.Parameters">
            <summary>
            The request parameters 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationContext.Api">
            <summary>
            The ApiResource that is making the request
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationContext.Client">
            <summary>
            The Client that is making the request
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.JwtRequestValidationContext">
            <summary>
            Context for validating a JWT sent as a request parameter.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.JwtRequestValidationContext.Client">
            <summary>
            The Client for which the validation is being performed.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.JwtRequestValidationContext.JwtTokenString">
            <summary>
            The JWT request object string.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.JwtRequestValidationContext.StrictJarValidation">
            <summary>
            Specifies whether the JWT typ and content-type for JWT secured authorization requests is checked according to IETF spec.
            This might break older OIDC conformant request objects.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.JwtRequestValidationContext.IncludeJti">
            <summary>
            Indicates if the JTI claim is expected in the result.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.PushedAuthorizationRequestValidationContext">
            <summary>
            Context needed to validate a pushed authorization request.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PushedAuthorizationRequestValidationContext.#ctor(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Models.Client)">
            <summary>
            Initializes an instance of the <see cref="T:Duende.IdentityServer.Validation.PushedAuthorizationRequestValidationContext"/> class.
            </summary>
            <param name="requestParameters">The raw parameters that were passed to the PAR endpoint.</param>
            <param name="client">The client that made the request.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.PushedAuthorizationRequestValidationContext.RequestParameters">
            <summary>
            The request form parameters
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.PushedAuthorizationRequestValidationContext.Client">
            <summary>
            The validation result of client authentication
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext">
            <summary>
            Class describing the resource owner password validation context
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ResourceValidationContext">
            <summary>
            Class describing the resource validation context
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.TokenRequestValidationContext">
            <summary>
            Class describing the token endpoint request validation context
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRequestValidationContext.RequestParameters">
            <summary>
            The request form parameters
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRequestValidationContext.ClientValidationResult">
            <summary>
            The validation result of client authentication
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRequestValidationContext.ClientCertificate">
            <summary>
            The client certificate used on the mTLS connection.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRequestValidationContext.DPoPProofToken">
            <summary>
            The header value containing the DPoP proof token presented on the request
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ApiSecretValidator">
            <summary>
            Validates API secrets using the registered secret validators and parsers
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ApiSecretValidator.#ctor(Duende.IdentityServer.Stores.IResourceStore,Duende.IdentityServer.Validation.ISecretsListParser,Duende.IdentityServer.Validation.ISecretsListValidator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.ApiSecretValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.ApiSecretValidator"/> class.
            </summary>
            <param name="resources">The resources.</param>
            <param name="parsers">The parsers.</param>
            <param name="validator">The validator.</param>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ApiSecretValidator.ValidateAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Validates the secret on the current request.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestIdValidator">
            <summary>
            Default implementation of IBackchannelAuthenticationRequestIdValidator.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestIdValidator.ValidateAsync(Duende.IdentityServer.Validation.BackchannelAuthenticationRequestIdValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BasicAuthenticationSecretParser">
            <summary>
            Parses a Basic Authentication header
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BasicAuthenticationSecretParser.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.BasicAuthenticationSecretParser})">
            <summary>
            Creates the parser with a reference to identity server options
            </summary>
            <param name="options">IdentityServer options</param>
            <param name="logger">The logger</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BasicAuthenticationSecretParser.AuthenticationMethod">
            <summary>
            Returns the authentication method name that this parser implements
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BasicAuthenticationSecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to find a secret that can be used for authentication
            </summary>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BearerTokenUsageValidator">
            <summary>
            Validates a request that uses a bearer token for authentication
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BearerTokenUsageValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.BearerTokenUsageValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.BearerTokenUsageValidator"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BearerTokenUsageValidator.ValidateAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Validates the request.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BearerTokenUsageValidator.ValidateAuthorizationHeader(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Validates the authorization header.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BearerTokenUsageValidator.ValidatePostBodyAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Validates the post body.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ClientSecretValidator">
            <summary>
            Validates a client secret using the registered secret validators and parsers
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ClientSecretValidator.#ctor(Duende.IdentityServer.Stores.IClientStore,Duende.IdentityServer.Validation.ISecretsListParser,Duende.IdentityServer.Validation.ISecretsListValidator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.ClientSecretValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.ClientSecretValidator"/> class.
            </summary>
            <param name="clients">The clients.</param>
            <param name="parser">The parser.</param>
            <param name="validator">The validator.</param>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ClientSecretValidator.ValidateAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Validates the current request.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator">
            <summary>
            Default client configuration validator
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IClientConfigurationValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Constructor for DefaultClientConfigurationValidator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Determines whether the configuration of a client is valid.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateGrantTypesAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates grant type related configuration settings.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateLifetimesAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates lifetime related configuration settings.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateRedirectUriAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates redirect URI related configuration.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateAllowedCorsOriginsAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates allowed CORS origins for valid format.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateUriSchemesAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates that URI schemes is not in the list of invalid URI scheme prefixes, as controlled by the ValidationOptions.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateSecretsAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates secret related configuration.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidatePropertiesAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates properties related configuration settings.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultCustomAuthorizeRequestValidator">
            <summary>
            Default custom request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultCustomAuthorizeRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.CustomAuthorizeRequestValidationContext)">
            <summary>
            Custom validation logic for the authorize request.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultCustomBackchannelAuthenticationValidator">
            <summary>
            Default implementation of the CIBA validator extensibility point. This
            validator deliberately does nothing.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultCustomBackchannelAuthenticationValidator.ValidateAsync(Duende.IdentityServer.Validation.CustomBackchannelAuthenticationRequestValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultCustomTokenRequestValidator">
            <summary>
            Default custom request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultCustomTokenRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.CustomTokenRequestValidationContext)">
            <summary>
            Custom validation logic for a token request.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultCustomTokenValidator">
            <summary>
            Default custom token validator
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.DefaultCustomTokenValidator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.DefaultCustomTokenValidator.Profile">
            <summary>
            The user service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.DefaultCustomTokenValidator.Clients">
            <summary>
            The client store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultCustomTokenValidator.ValidateAccessTokenAsync(Duende.IdentityServer.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for access tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultCustomTokenValidator.ValidateIdentityTokenAsync(Duende.IdentityServer.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for identity tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultDPoPProofValidator">
            <summary>
            Default implementation of IDPoPProofValidator
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.ReplayCache">
            <summary>
            The replay cache
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.DataProtector">
            <summary>
            The data protection provider
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Services.IReplayCache,Duende.IdentityServer.IClock,Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.DefaultDPoPProofValidator})">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.ValidateAsync(Duende.IdentityServer.Validation.DPoPProofValidatonContext)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.ValidateHeaderAsync(Duende.IdentityServer.Validation.DPoPProofValidatonContext,Duende.IdentityServer.Validation.DPoPProofValidatonResult)">
            <summary>
            Validates the header.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.ValidateSignatureAsync(Duende.IdentityServer.Validation.DPoPProofValidatonContext,Duende.IdentityServer.Validation.DPoPProofValidatonResult)">
            <summary>
            Validates the signature.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.ValidatePayloadAsync(Duende.IdentityServer.Validation.DPoPProofValidatonContext,Duende.IdentityServer.Validation.DPoPProofValidatonResult)">
            <summary>
            Validates the payload.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.ValidateReplayAsync(Duende.IdentityServer.Validation.DPoPProofValidatonContext,Duende.IdentityServer.Validation.DPoPProofValidatonResult)">
            <summary>
            Validates is the token has been replayed.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.ValidateFreshnessAsync(Duende.IdentityServer.Validation.DPoPProofValidatonContext,Duende.IdentityServer.Validation.DPoPProofValidatonResult)">
            <summary>
            Validates the freshness.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.ValidateIatAsync(Duende.IdentityServer.Validation.DPoPProofValidatonContext,Duende.IdentityServer.Validation.DPoPProofValidatonResult)">
            <summary>
            Validates the freshness of the iat value.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.ValidateNonceAsync(Duende.IdentityServer.Validation.DPoPProofValidatonContext,Duende.IdentityServer.Validation.DPoPProofValidatonResult)">
            <summary>
            Validates the freshness of the nonce value.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.CreateNonce(Duende.IdentityServer.Validation.DPoPProofValidatonContext,Duende.IdentityServer.Validation.DPoPProofValidatonResult)">
            <summary>
            Creates a nonce value to return to the client.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.GetUnixTimeFromNonceAsync(Duende.IdentityServer.Validation.DPoPProofValidatonContext,Duende.IdentityServer.Validation.DPoPProofValidatonResult)">
            <summary>
            Reads the time the nonce was created.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultDPoPProofValidator.IsExpired(Duende.IdentityServer.Validation.DPoPProofValidatonContext,Duende.IdentityServer.Validation.DPoPProofValidatonResult,System.TimeSpan,System.Int64)">
            <summary>
            Validates the expiration of the DPoP proof.
            Returns true if the time is beyond the allowed limits, false otherwise.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultIdentityProviderConfigurationValidator">
            <summary>
            Default identity provider configuration validator
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IIdentityProviderConfigurationValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultIdentityProviderConfigurationValidator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Constructor for DefaultIdentityProviderConfigurationValidator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultIdentityProviderConfigurationValidator.ValidateAsync(Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultIdentityProviderConfigurationValidator.ValidateOidcProviderAsync(Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext{Duende.IdentityServer.Models.OidcProvider})">
            <summary>
            Validates the OIDC identity provider.
            </summary>
            <returns>A string that represents the error. Null if there is no error.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultResourceValidator">
            <summary>
            Default implementation of IResourceValidator.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.#ctor(Duende.IdentityServer.Stores.IResourceStore,Duende.IdentityServer.Validation.IScopeParser,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.DefaultResourceValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.DefaultResourceValidator"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="scopeParser"></param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.ValidateRequestedResourcesAsync(Duende.IdentityServer.Validation.ResourceValidationRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.ValidateScopeAsync(Duende.IdentityServer.Models.Client,Duende.IdentityServer.Models.Resources,Duende.IdentityServer.Validation.ParsedScopeValue,Duende.IdentityServer.Validation.ResourceValidationResult)">
            <summary>
            Validates that the requested scopes is contained in the store, and the client is allowed to request it.
            </summary>
            <param name="client"></param>
            <param name="resourcesFromStore"></param>
            <param name="requestedScope"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.IsClientAllowedIdentityResourceAsync(Duende.IdentityServer.Models.Client,Duende.IdentityServer.Models.IdentityResource)">
            <summary>
            Determines if client is allowed access to the identity scope.
            </summary>
            <param name="client"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.IsClientAllowedApiScopeAsync(Duende.IdentityServer.Models.Client,Duende.IdentityServer.Models.ApiScope)">
            <summary>
            Determines if client is allowed access to the API scope.
            </summary>
            <param name="client"></param>
            <param name="apiScope"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.IsClientAllowedOfflineAccessAsync(Duende.IdentityServer.Models.Client)">
            <summary>
            Validates if the client is allowed offline_access.
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultScopeParser">
            <summary>
            Default implementation of IScopeParser.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.DefaultScopeParser})">
            <summary>
            Ctor.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeValues(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeValue(Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext)">
            <summary>
            Parses a scope value.
            </summary>
            <param name="scopeContext"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext">
            <summary>
            Models the context for parsing a scope.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.RawValue">
            <summary>
            The original (raw) value of the scope.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.ParsedName">
            <summary>
            The parsed name of the scope. 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.ParsedParameter">
            <summary>
            The parsed parameter value of the scope. 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.Error">
            <summary>
            The error encountered parsing the scope.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.Ignore">
            <summary>
            Indicates if the scope should be excluded from the parsed results.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.Succeeded">
            <summary>
            Indicates if parsing the scope was successful.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.#ctor(System.String)">
            <summary>
            Ctor. Indicates success, but the scope should not be included in result.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.SetParsedValues(System.String,System.String)">
            <summary>
            Sets the parsed name and parsed parameter value for the scope.
            </summary>
            <param name="parsedName"></param>
            <param name="parsedParameter"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.SetError(System.String)">
            <summary>
            Set the error encountered parsing the scope.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.SetIgnore">
            <summary>
            Sets that the scope is to be ignore/excluded from the parsed results.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DeviceCodeValidator">
            <summary>
            Validates an incoming token request using the device flow
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DeviceCodeValidator.#ctor(Duende.IdentityServer.Services.IDeviceFlowCodeService,Duende.IdentityServer.Services.IProfileService,Duende.IdentityServer.Services.IDeviceFlowThrottlingService,Duende.IdentityServer.IClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.DeviceCodeValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.DeviceCodeValidator"/> class.
            </summary>
            <param name="devices">The devices.</param>
            <param name="profile">The profile.</param>
            <param name="throttlingService">The throttling service.</param>
            <param name="systemClock">The system clock.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DeviceCodeValidator.ValidateAsync(Duende.IdentityServer.Validation.DeviceCodeValidationContext)">
            <summary>
            Validates the device code.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.EndSessionRequestValidator">
            <summary>
            Validates requests to the end session endpoint.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.Options">
            <summary>
             The IdentityServer options.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.TokenValidator">
            <summary>
            The token validator.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.UriValidator">
            <summary>
            The URI validator.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.UserSession">
            <summary>
            The user session service.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.EndSessionRequestValidator.LogoutNotificationService">
            <summary>
            The logout notification service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.EndSessionMessageStore">
            <summary>
            The end session message store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.EndSessionRequestValidator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Validation.ITokenValidator,Duende.IdentityServer.Validation.IRedirectUriValidator,Duende.IdentityServer.Services.IUserSession,Duende.IdentityServer.Services.ILogoutNotificationService,Duende.IdentityServer.Stores.IMessageStore{Duende.IdentityServer.Models.LogoutNotificationContext},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.EndSessionRequestValidator})">
            <summary>
            Creates a new instance of the EndSessionRequestValidator.
            </summary>
            <param name="options"></param>
            <param name="tokenValidator"></param>
            <param name="uriValidator"></param>
            <param name="userSession"></param>
            <param name="logoutNotificationService"></param>
            <param name="endSessionMessageStore"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.EndSessionRequestValidator.ValidateAsync(System.Collections.Specialized.NameValueCollection,System.Security.Claims.ClaimsPrincipal)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Validation.EndSessionRequestValidator.Invalid(System.String,Duende.IdentityServer.Validation.ValidatedEndSessionRequest)">
            <summary>
            Creates a result that indicates an error.
            </summary>
            <param name="message"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.EndSessionRequestValidator.LogSuccess(Duende.IdentityServer.Validation.ValidatedEndSessionRequest)">
            <summary>
            Logs a success result.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.EndSessionRequestValidator.ValidateCallbackAsync(System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Validation.ExtensionGrantValidator">
            <summary>
            Validates an extension grant request using the registered validators
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ExtensionGrantValidator.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.IExtensionGrantValidator},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.ExtensionGrantValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.ExtensionGrantValidator"/> class.
            </summary>
            <param name="validators">The validators.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ExtensionGrantValidator.GetAvailableGrantTypes">
            <summary>
            Gets the available grant types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ExtensionGrantValidator.ValidateAsync(Duende.IdentityServer.Validation.ValidatedTokenRequest)">
            <summary>
            Validates the request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.HashedSharedSecretValidator">
            <summary>
            Validates a shared secret stored in SHA256 or SHA512
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.HashedSharedSecretValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.HashedSharedSecretValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.HashedSharedSecretValidator"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.HashedSharedSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>
            A validation result
            </returns>
            <exception cref="T:System.ArgumentNullException">Id or credential</exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IntrospectionRequestValidator">
            <summary>
            The introspection request validator
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IIntrospectionRequestValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.IntrospectionRequestValidator.#ctor(Duende.IdentityServer.Validation.ITokenValidator,Duende.IdentityServer.Services.IRefreshTokenService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.IntrospectionRequestValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.IntrospectionRequestValidator"/> class.
            </summary>
            <param name="tokenValidator">The token validator.</param>
            <param name="refreshTokenService"></param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IntrospectionRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.IntrospectionRequestValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IntrospectionRequestValidator.GetRefreshTokenClaimsAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Attempt to obtain the claims for a token as a refresh token for a client.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IntrospectionRequestValidator.GetAccessTokenClaimsAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Attempt to obtain the claims for a token as an access token, and validate that it belongs to the client. 
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IntrospectionRequestValidator.GetAccessTokenClaimsAsync(System.String)">
            <summary>
            Attempt to obtain the claims for a token as an access token. This overload does no validation that the
            token belongs to a particular client, and is intended for use when we have an API caller (any API can 
            introspect a token). 
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser">
            <summary>
            Parses a POST body for a JWT bearer client assertion
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser.AuthenticationMethod">
            <summary>
            Returns the authentication method name that this parser implements
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to find a JWT client assertion token in the request body that can be used for authentication
            Used for "private_key_jwt" client authentication method as defined in http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication
            </summary>
            <param name="context">The HTTP context</param>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.JwtRequestValidator">
            <summary>
            Validates JWT authorization request objects
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.JwtRequestValidator.Handler">
            <summary>
            JWT handler
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.GetAudienceUri">
            <summary>
            The audience URI to use
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.JwtRequestValidator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.JwtRequestValidator.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.JwtRequestValidator.IssuerNameService">
            <summary>
            The issuer name service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Services.IIssuerNameService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.JwtRequestValidator})">
            <summary>
            Instantiates an instance of private_key_jwt secret validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.#ctor(System.String,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.JwtRequestValidator})">
            <summary>
            Instantiates an instance of private_key_jwt secret validator (used for testing)
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.JwtRequestValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.GetKeysAsync(Duende.IdentityServer.Models.Client)">
            <summary>
            Retrieves keys for a given client
            </summary>
            <param name="client">The client</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.ValidateJwtAsync(Duende.IdentityServer.Validation.JwtRequestValidationContext,System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Tokens.SecurityKey})">
            <summary>
            Validates the JWT token
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.ProcessPayloadAsync(Duende.IdentityServer.Validation.JwtRequestValidationContext,Microsoft.IdentityModel.JsonWebTokens.JsonWebToken)">
            <summary>
            Processes the JWT contents
            </summary>
            <param name="context"></param>
            <param name="token">The JWT token</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.MutualTlsSecretParser">
            <summary>
            Parses secret according to MTLS spec
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.MutualTlsSecretParser.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.MutualTlsSecretParser})">
            <summary>
            ctor
            </summary>
            <param name="options"></param>
            <param name="logger"></param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.MutualTlsSecretParser.AuthenticationMethod">
            <summary>
            Name of authentication method (blank to suppress in discovery since we do special handling)
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.MutualTlsSecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Parses the HTTP context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.NopBackchannelAuthenticationUserValidator">
            <summary>
            Nop implementation of IBackchannelAuthenticationUserValidator.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.NopBackchannelAuthenticationUserValidator.ValidateRequestAsync(Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Validation.NopClientConfigurationValidator">
            <summary>
            No-op client configuration validator (for backwards-compatibility).
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IClientConfigurationValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.NopClientConfigurationValidator.ValidateAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Determines whether the configuration of a client is valid.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.NotSupportedResourceOwnerPasswordValidator">
            <summary>
            Default resource owner password validator (no implementation == not supported)
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.NotSupportedResourceOwnerPasswordValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.NotSupportedResourceOwnerPasswordValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.NotSupportedResourceOwnerPasswordValidator"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.NotSupportedResourceOwnerPasswordValidator.ValidateAsync(Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext)">
            <summary>
            Validates the resource owner password credential
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.PlainTextSharedSecretValidator">
            <summary>
            Validates a secret stored in plain text
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PlainTextSharedSecretValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.PlainTextSharedSecretValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.PlainTextSharedSecretValidator"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PlainTextSharedSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>
            A validation result
            </returns>
            <exception cref="T:System.ArgumentException">id or credential is missing.</exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.PostBodySecretParser">
            <summary>
            Parses a POST body for secrets
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PostBodySecretParser.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.PostBodySecretParser})">
            <summary>
            Creates the parser with options
            </summary>
            <param name="options">IdentityServer options</param>
            <param name="logger">Logger</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.PostBodySecretParser.AuthenticationMethod">
            <summary>
            Returns the authentication method name that this parser implements
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PostBodySecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to find a secret on the context that can be used for authentication
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.PrivateKeyJwtSecretValidator">
            <summary>
            Validates a secret based on RS256 signed JWT token
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PrivateKeyJwtSecretValidator.#ctor(Duende.IdentityServer.Services.IIssuerNameService,Duende.IdentityServer.Services.IReplayCache,Duende.IdentityServer.Services.IServerUrls,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.PrivateKeyJwtSecretValidator})">
            <summary>
            Instantiates an instance of private_key_jwt secret validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PrivateKeyJwtSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>
            A validation result
            </returns>
            <exception cref="T:System.ArgumentException">ParsedSecret.Credential is not a JWT token</exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.PushedAuthorizationRequestValidator">
            <summary>
            Default validator for pushed authorization requests. This validator performs
            checks that are specific to pushed authorization and also invokes the <see
            cref="T:Duende.IdentityServer.Validation.IAuthorizeRequestValidator"/> to validate the pushed parameters as if
            they had been sent to the authorize endpoint directly. 
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PushedAuthorizationRequestValidator.#ctor(Duende.IdentityServer.Validation.IAuthorizeRequestValidator,Duende.IdentityServer.Licensing.V2.LicenseUsageTracker)">
            <summary>
            Initializes a new instance of the <see
            cref="T:Duende.IdentityServer.Validation.PushedAuthorizationRequestValidator"/> class. 
            </summary>
            <param name="authorizeRequestValidator">The authorize request validator,
            used to validate the pushed authorization parameters as if they were
            used directly at the authorize endpoint.</param>
            <param name="features">The feature manager</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PushedAuthorizationRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.PushedAuthorizationRequestValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Validation.PushedAuthorizationRequestValidator.ValidateRequestUriAsync(Duende.IdentityServer.Validation.PushedAuthorizationRequestValidationContext)">
            <summary>
            Validates a PAR request to ensure that it does not contain a request
            URI, which is explicitly disallowed by RFC 9126.
            </summary>
            <param name="context">The pushed authorization validation
            context.</param>
            <returns>A task containing the <see
            cref="T:Duende.IdentityServer.Validation.PushedAuthorizationValidationResult"/>.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ResponseTypeEqualityComparer">
            <summary>
            Compares resource_type strings, where the order of space-delimited values is insignificant.
            </summary>
            <remarks>
            <para>
            This is to handle the fact that the order of multi-valued response_type lists is
            insignificant, per the <see href="https://tools.ietf.org/html/rfc6749#section-3.1.1">OAuth2 spec</see>
            and the 
            (<see href="http://openid.net/specs/oauth-v2-multiple-response-types-1_0-03.html#terminology">OAuth 
            2.0 Multiple Response Type Encoding Practices draft </see>).
            </para>
            </remarks>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResponseTypeEqualityComparer.Equals(System.String,System.String)">
            <summary>
            Determines whether the specified values are equal.
            </summary>
            <param name="x">The first string to compare.</param>
            <param name="y">The second string to compare.</param>
            <returns>true if the specified values are equal; otherwise, false.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResponseTypeEqualityComparer.GetHashCode(System.String)">
            <summary>
            Returns a hash code for the value.
            </summary>
            <param name="value">The value for which a hash code is to be returned.</param>
            <returns>A hash code for the value, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.SecretParser">
            <summary>
            Uses the registered secret parsers to parse a secret on the current request
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.SecretParser.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ISecretParser},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.ISecretsListParser})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.SecretParser"/> class.
            </summary>
            <param name="parsers">The parsers.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.SecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Checks the context to find a secret.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.SecretParser.GetAvailableAuthenticationMethods">
            <summary>
            Gets all available authentication methods.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.SecretValidator">
            <summary>
            Validates secrets using the registered validators
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.SecretValidator.#ctor(Duende.IdentityServer.IClock,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ISecretValidator},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.ISecretsListValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.SecretValidator"/> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="validators">The validators.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.SecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates the secret.
            </summary>
            <param name="parsedSecret">The parsed secret.</param>
            <param name="secrets">The secrets.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.StrictRedirectUriValidator">
            <summary>
            Default implementation of redirect URI validator. Validates the URIs against
            the client's configured URIs.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.StrictRedirectUriValidator" />.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidator.StringCollectionContainsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Checks if a given URI string is in a collection of strings (using ordinal ignore case comparison)
            </summary>
            <param name="uris">The uris.</param>
            <param name="requestedUri">The requested URI.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidator.IsRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a redirect URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns>
              <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidator.IsPostLogoutRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a post logout URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns>
              <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidator.IsRedirectUriValidAsync(Duende.IdentityServer.Validation.RedirectUriValidationContext)">
            <summary>
            Determines whether a redirect uri is valid for a context.
            </summary>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth">
            <summary>
            Implementation of strict redirect URI validator that allows a random port if 127.0.0.1 is used.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.StrictRedirectUriValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth},Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth.IsRedirectUriValidAsync(Duende.IdentityServer.Validation.RedirectUriValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth.IsPostLogoutRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a post logout URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns>
            <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth.IsLoopback(System.String)">
            <summary>
            Check if <paramref name="requestedUri"/> is of the form http://127.0.0.1:port/path.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <returns>
            <c>true</c> if <paramref name="requestedUri"/> is a valid Loopback URI; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRequestValidator.ValidateRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Validation.TokenRevocationRequestValidator">
            <summary>
            The token revocation request validator
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.ITokenRevocationRequestValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRevocationRequestValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.TokenRevocationRequestValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.TokenRevocationRequestValidator"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRevocationRequestValidator.ValidateRequestAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Models.Client)">
            <summary>
            Validates the request.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="client">The client.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            parameters
            or
            client
            </exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.UserInfoRequestValidator">
            <summary>
            Default userinfo request validator
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IUserInfoRequestValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.UserInfoRequestValidator.#ctor(Duende.IdentityServer.Validation.ITokenValidator,Duende.IdentityServer.Services.IProfileService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.UserInfoRequestValidator},Duende.IdentityServer.Stores.IServerSideTicketStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.UserInfoRequestValidator" /> class.
            </summary>
            <param name="tokenValidator">The token validator.</param>
            <param name="profile">The profile service</param>
            <param name="logger">The logger.</param>
            <param name="serverSideTicketStore"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.UserInfoRequestValidator.ValidateRequestAsync(System.String)">
            <summary>
            Validates a userinfo request.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.X509NameSecretValidator">
            <summary>
            Validator for an X.509 certificate based client secret using the common name
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.X509NameSecretValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.X509NameSecretValidator})">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.X509NameSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Validation.X509ThumbprintSecretValidator">
            <summary>
            Validator for an X.509 certificate based client secret using the thumbprint
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.X509ThumbprintSecretValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.X509ThumbprintSecretValidator})">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.X509ThumbprintSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IApiSecretValidator">
            <summary>
            Validator for handling API client authentication.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IApiSecretValidator.ValidateAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to authenticate an API client based on the incoming request
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IAuthorizeRequestValidator">
            <summary>
             Authorize endpoint request validator.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IAuthorizeRequestValidator.ValidateAsync(System.Collections.Specialized.NameValueCollection,System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Validation.AuthorizeRequestType)">
            <summary>
             Validates authorize request parameters.
            </summary>
            <param name="parameters"></param>
            <param name="subject"></param>
            <param name="authorizeRequestType"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IBackchannelAuthenticationRequestIdValidator">
            <summary>
            The backchannel authentication request id validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IBackchannelAuthenticationRequestIdValidator.ValidateAsync(Duende.IdentityServer.Validation.BackchannelAuthenticationRequestIdValidationContext)">
            <summary>
            Validates the authentication request id.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IBackchannelAuthenticationRequestValidator">
            <summary>
            Interface for the backchannel authentication request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IBackchannelAuthenticationRequestValidator.ValidateRequestAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Validation.ClientSecretValidationResult)">
            <summary>
            Validates the request.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="clientValidationResult">The client validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IBackchannelAuthenticationUserValidator">
            <summary>
            Interface for the backchannel authentication user validation
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IBackchannelAuthenticationUserValidator.ValidateRequestAsync(Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext)">
            <summary>
            Validates the user.
            </summary>
            <param name="userValidatorContext"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IClientConfigurationValidator">
            <summary>
            Validator for handling client authentication
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IClientConfigurationValidator.ValidateAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Determines whether the configuration of a client is valid.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IClientSecretValidator">
            <summary>
            Validator for handling client authentication
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IClientSecretValidator.ValidateAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to authenticate a client based on the incoming request
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ICustomAuthorizeRequestValidator">
            <summary>
            Allows inserting custom validation logic into authorize and token requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ICustomAuthorizeRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.CustomAuthorizeRequestValidationContext)">
            <summary>
            Custom validation logic for the authorize request.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ICustomBackchannelAuthenticationValidator">
            <summary>
            Extensibility point for CIBA authentication request validation.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ICustomBackchannelAuthenticationValidator.ValidateAsync(Duende.IdentityServer.Validation.CustomBackchannelAuthenticationRequestValidationContext)">
            <summary>
            Validates a CIBA authentication request.
            </summary>
            <param name="customValidationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ICustomTokenRequestValidator">
            <summary>
            Allows inserting custom validation logic into token requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ICustomTokenRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.CustomTokenRequestValidationContext)">
            <summary>
            Custom validation logic for a token request.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ICustomTokenValidator">
            <summary>
            Allows inserting custom token validation logic
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ICustomTokenValidator.ValidateAccessTokenAsync(Duende.IdentityServer.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for access tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>The validation result</returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ICustomTokenValidator.ValidateIdentityTokenAsync(Duende.IdentityServer.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for identity tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>The validation result</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IDeviceAuthorizationRequestValidator">
            <summary>
             Device authorization endpoint request validator.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IDeviceAuthorizationRequestValidator.ValidateAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Validation.ClientSecretValidationResult)">
            <summary>
             Validates authorize request parameters.
            </summary>
            <param name="parameters"></param>
            <param name="clientValidationResult"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IDeviceCodeValidator">
            <summary>
            The device code validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IDeviceCodeValidator.ValidateAsync(Duende.IdentityServer.Validation.DeviceCodeValidationContext)">
            <summary>
            Validates the device code.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IDPoPProofValidator">
            <summary>
            Validator for handling DPoP proofs.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IDPoPProofValidator.ValidateAsync(Duende.IdentityServer.Validation.DPoPProofValidatonContext)">
            <summary>
            Validates the DPoP proof.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IEndSessionRequestValidator">
            <summary>
             Validates end session requests.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IEndSessionRequestValidator.ValidateAsync(System.Collections.Specialized.NameValueCollection,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Validates end session endpoint requests.
            </summary>
            <param name="parameters"></param>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IEndSessionRequestValidator.ValidateCallbackAsync(System.Collections.Specialized.NameValueCollection)">
            <summary>
             Validates requests from logout page iframe to trigger single signout.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IExtensionGrantValidator">
            <summary>
            Handles validation of token requests using custom grant types
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IExtensionGrantValidator.ValidateAsync(Duende.IdentityServer.Validation.ExtensionGrantValidationContext)">
            <summary>
            Validates the custom grant request.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A principal
            </returns>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IExtensionGrantValidator.GrantType">
            <summary>
            Returns the grant type this validator can deal with
            </summary>
            <value>
            The type of the grant.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IIdentityProviderConfigurationValidator">
            <summary>
            Validator for handling identity provider configuration
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IIdentityProviderConfigurationValidator.ValidateAsync(Duende.IdentityServer.Validation.IdentityProviderConfigurationValidationContext)">
            <summary>
            Determines whether the configuration of an identity provider is valid.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IIntrospectionRequestValidator">
            <summary>
            Interface for the introspection request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IIntrospectionRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.IntrospectionRequestValidationContext)">
            <summary>
            Validates the request.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IJwtRequestValidator">
            <summary>
            Interface for request object validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IJwtRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.JwtRequestValidationContext)">
            <summary>
            Validates a JWT request object
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IPushedAuthorizationRequestValidator">
            <summary>
            Validation service for pushed authorization requests. Note that, in addition
            to validation performed specially for pushed authorization requests, the
            pushed parameters should be validated in the same way as an authorization
            request sent to the authorization endpoint. Typical implementations of this
            service will delegate to the <see cref="T:Duende.IdentityServer.Validation.IAuthorizeRequestValidator"/> for
            this purpose.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IPushedAuthorizationRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.PushedAuthorizationRequestValidationContext)">
            <summary>
            Validates the pushed authorization request.
            </summary>
            <param name="context">The validation context</param>
            <returns>A  task containing a pushed authorization result that either
            wraps the validated request values or indicates the error code and
            description.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IRedirectUriValidator">
            <summary>
            Models the logic when validating redirect and post logout redirect URIs.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IRedirectUriValidator.IsRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a redirect URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns><c>true</c> is the URI is valid; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IRedirectUriValidator.IsRedirectUriValidAsync(Duende.IdentityServer.Validation.RedirectUriValidationContext)">
            <summary>
            Determines whether a redirect URI is valid for a client.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IRedirectUriValidator.IsPostLogoutRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a post logout URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns><c>true</c> is the URI is valid; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.RedirectUriValidationContext">
            <summary>
            Models the context for validating a client's redirect URI
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.RedirectUriValidationContext.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.RedirectUriValidationContext.#ctor(System.String,Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.RedirectUriValidationContext.RequestedUri">
            <summary>
            The URI to validate for the client
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.RedirectUriValidationContext.Client">
            <summary>
            The client
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.RedirectUriValidationContext.RequestParameters">
            <summary>
            The request parameters
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.RedirectUriValidationContext.RequestObjectValues">
            <summary>
            Validated request object values
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.RedirectUriValidationContext.AuthorizeRequestType">
            <summary>
            Indicates the context (PAR vs Authorize with or without pushed parameters)
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator">
            <summary>
            Handles validation of resource owner password credentials
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator.ValidateAsync(Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext)">
            <summary>
            Validates the resource owner password credential
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IResourceValidator">
            <summary>
            Validates requested resources (scopes and resource indicators)
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IResourceValidator.ValidateRequestedResourcesAsync(Duende.IdentityServer.Validation.ResourceValidationRequest)">
            <summary>
            Validates the requested resources for the client.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IScopeParser">
            <summary>
            Allows parsing raw scopes values into structured scope values.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IScopeParser.ParseScopeValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses the requested scopes.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ISecretParser">
            <summary>
            A service for parsing secrets found on the request
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ISecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to find a secret on the context that can be used for authentication
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ISecretParser.AuthenticationMethod">
            <summary>
            Returns the authentication method name that this parser implements
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ISecretsListParser">
            <summary>
            Parser for finding the best secret in an Enumerable List
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ISecretsListParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to find the best secret on the context that can be used for authentication
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ISecretsListParser.GetAvailableAuthenticationMethods">
            <summary>
            Gets all available authentication methods.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ISecretsListValidator">
            <summary>
            Validator for an Enumerable List of Secrets
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ISecretsListValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates a list of secrets
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>A validation result</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ISecretValidator">
            <summary>
            Service for validating a received secret against a stored secret
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ISecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>A validation result</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ITokenRequestValidator">
            <summary>
            Interface for the token request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ITokenRequestValidator.ValidateRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationContext)">
            <summary>
            Validates the request.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ITokenRevocationRequestValidator">
            <summary>
            Interface for the token revocation request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ITokenRevocationRequestValidator.ValidateRequestAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Models.Client)">
            <summary>
            Validates the request.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ITokenValidator">
            <summary>
            Interface for the token validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ITokenValidator.ValidateAccessTokenAsync(System.String,System.String)">
            <summary>
            Validates an access token.
            </summary>
            <param name="token">The access token.</param>
            <param name="expectedScope">The expected scope.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ITokenValidator.ValidateIdentityTokenAsync(System.String,System.String,System.Boolean)">
            <summary>
            Validates an identity token.
            </summary>
            <param name="token">The token.</param>
            <param name="clientId">The client identifier.</param>
            <param name="validateLifetime">if set to <c>true</c> the lifetime gets validated. Otherwise not.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IUserInfoRequestValidator">
            <summary>
            Validator for userinfo requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IUserInfoRequestValidator.ValidateRequestAsync(System.String)">
            <summary>
            Validates a userinfo request.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult">
            <summary>
            Validation result for authorize requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult" /> class.
            </summary>
            <param name="request">The request.</param>
            <param name="error">The error.</param>
            <param name="errorDescription">The error description.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult.ValidatedRequest">
            <summary>
            Gets or sets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestIdValidationContext">
            <summary>
            Context for backchannel authentication request id validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestIdValidationContext.AuthenticationRequestId">
            <summary>
            Gets or sets the authentication request id.
            </summary>
            <value>
            The device code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestIdValidationContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestIdValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult">
            <summary>
            Validation result for backchannel authentication requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult"/> class.
            </summary>
            <param name="validatedRequest">The validated request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult"/> class.
            </summary>
            <param name="validatedRequest">The validated request.</param>
            <param name="error">The error.</param>
            <param name="errorDescription">The error description.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult.ValidatedRequest">
            <summary>
            Gets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidationResult">
            <summary>
            Represents the result of a backchannel authentication request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidationResult.IsError">
            <summary>
            Indicates if this represents an error.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidationResult.Error">
            <summary>
            Gets or sets the error.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidationResult.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidationResult.Subject">
            <summary>
            Gets or sets the subject based upon the provided hint.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext">
            <summary>
            Context information for validating a user during backchannel authentication request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext.Client">
            <summary>
            Gets or sets the client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext.LoginHintToken">
            <summary>
            Gets or sets the login hint token.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext.IdTokenHint">
            <summary>
            Gets or sets the id token hint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext.IdTokenHintClaims">
            <summary>
            Gets or sets the validated claims from the id token hint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext.LoginHint">
            <summary>
            Gets or sets the login hint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext.UserCode">
            <summary>
            Gets or sets the user code.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext.BindingMessage">
            <summary>
            Gets or sets the binding message.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BearerTokenUsageValidationResult">
            <summary>
            Models usage of a bearer token
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BearerTokenUsageValidationResult.TokenFound">
            <summary>
            Gets or sets a value indicating whether the token was found.
            </summary>
            <value>
              <c>true</c> if the token was found; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BearerTokenUsageValidationResult.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BearerTokenUsageValidationResult.UsageType">
            <summary>
            Gets or sets the usage type.
            </summary>
            <value>
            The type of the usage.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ClientSecretValidationResult">
            <summary>
            Validation result for client validation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientSecretValidationResult.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientSecretValidationResult.Secret">
            <summary>
            Gets or sets the secret used to authenticate the client.
            </summary>
            <value>
            The secret.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientSecretValidationResult.Confirmation">
            <summary>
            Gets or sets the value of the confirmation method (will become the cnf claim). Must be a JSON object.
            </summary>
            <value>
            The confirmation.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult">
            <summary>
            Validation result for device authorization requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="error">The error.</param>
            <param name="errorDescription">The error description.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult.ValidatedRequest">
            <summary>
            Gets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DeviceCodeValidationContext">
            <summary>
            Validation result for device code validation request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DeviceCodeValidationContext.DeviceCode">
            <summary>
            Gets or sets the device code.
            </summary>
            <value>
            The device code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DeviceCodeValidationContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DeviceCodeValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DPoPProofValidatonResult">
            <summary>
            Models the result of DPoP proof validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonResult.JsonWebKey">
            <summary>
            The serialized JWK from the validated DPoP proof token.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonResult.JsonWebKeyThumbprint">
            <summary>
            The JWK thumbprint from the validated DPoP proof token.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonResult.Confirmation">
            <summary>
            The 'cnf' value for the DPoP proof token.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonResult.Payload">
            <summary>
            The payload values of the DPoP proof token.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonResult.AccessTokenHash">
            <summary>
            The ath value read from the payload.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonResult.TokenId">
            <summary>
            The 'jti' value read from the payload.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonResult.Nonce">
            <summary>
            The 'nonce' value read from the payload.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonResult.IssuedAt">
            <summary>
            The 'iat' value read from the payload.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DPoPProofValidatonResult.ServerIssuedNonce">
            <summary>
            The 'nonce' value issued by the server that should be emitted on the response.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.EndSessionCallbackValidationResult">
            <summary>
            Validation result for end session callback requests.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.ValidationResult" />
        </member>
        <member name="P:Duende.IdentityServer.Validation.EndSessionCallbackValidationResult.FrontChannelLogoutUrls">
            <summary>
            Gets the client front-channel logout urls.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.EndSessionValidationResult">
            <summary>
            Validation result for end session requests
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.ValidationResult" />
        </member>
        <member name="P:Duende.IdentityServer.Validation.EndSessionValidationResult.ValidatedRequest">
            <summary>
            Gets or sets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.GrantValidationResult">
            <summary>
            Models the result of custom grant validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.GrantValidationResult.Subject">
            <summary>
            Gets or sets the principal which represents the result of the validation.
            </summary>
            <value>
            The principal.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.GrantValidationResult.CustomResponse">
            <summary>
            Custom fields for the token response
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.GrantValidationResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.GrantValidationResult"/> class with no subject.
            Warning: the resulting access token will only contain the client identity.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.GrantValidationResult.#ctor(System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.GrantValidationResult"/> class with a given principal.
            Warning: the principal needs to include the required claims - it is recommended to use the other constructor that does validation.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.GrantValidationResult.#ctor(Duende.IdentityServer.Models.TokenRequestErrors,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.GrantValidationResult"/> class with an error and description.
            </summary>
            <param name="error">The error.</param>
            <param name="errorDescription">The error description.</param>
            <param name="customResponse">Custom response elements</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.GrantValidationResult.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.GrantValidationResult" /> class.
            </summary>
            <param name="subject">The subject claim used to uniquely identifier the user.</param>
            <param name="authenticationMethod">The authentication method which describes the custom grant type.</param>
            <param name="claims">Additional claims that will be maintained in the principal. 
            If you want these claims to appear in token, you need to add them explicitly in your custom implementation of <see cref="T:Duende.IdentityServer.Services.IProfileService"/> service.</param>
            <param name="identityProvider">The identity provider.</param>
            <param name="customResponse">The custom response.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.GrantValidationResult.#ctor(System.String,System.String,System.DateTime,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.GrantValidationResult" /> class.
            </summary>
            <param name="subject">The subject claim used to uniquely identifier the user.</param>
            <param name="authenticationMethod">The authentication method which describes the custom grant type.</param>
            <param name="authTime">The UTC date/time of authentication.</param>
            <param name="claims">Additional claims that will be maintained in the principal.
            If you want these claims to appear in token, you need to add them explicitly in your custom implementation of <see cref="T:Duende.IdentityServer.Services.IProfileService"/> service.</param>
            <param name="identityProvider">The identity provider.</param>
            <param name="customResponse">The custom response.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult">
            <summary>
            Validation result for introspection request
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.ValidationResult" />
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.Parameters">
            <summary>
            Gets or sets the request parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.Api">
            <summary>
            Gets or sets the API.
            </summary>
            <value>
            The API.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.IsActive">
            <summary>
            Gets or sets a value indicating whether the token is active.
            </summary>
            <value>
              <c>true</c> if the token is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IntrospectionRequestValidationFailureReason">
            <summary>
            Failure reasons for introspection request
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.IntrospectionRequestValidationFailureReason.None">
            <summary>
            none
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.IntrospectionRequestValidationFailureReason.MissingToken">
            <summary>
            missing token
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.IntrospectionRequestValidationFailureReason.InvalidToken">
            <summary>
            invalid token
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.IntrospectionRequestValidationFailureReason.InvalidScope">
            <summary>
            invalid scope
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.JwtRequestValidationResult">
            <summary>
            Models the result of JWT request validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.JwtRequestValidationResult.Payload">
            <summary>
            The key/value pairs from the JWT payload of a successfully validated
            request, or null if a validation error occurred.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ParsedScopesResult">
            <summary>
            Represents the result of scope parsing.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopesResult.ParsedScopes">
            <summary>
            The valid parsed scopes.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopesResult.Errors">
            <summary>
            The errors encountered while parsing.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopesResult.Succeeded">
            <summary>
            Indicates if the result of parsing the scopes was successful.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ParsedScopeValidationError">
            <summary>
            Models an error parsing a scope.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ParsedScopeValidationError.#ctor(System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="rawValue"></param>
            <param name="error"></param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopeValidationError.RawValue">
            <summary>
            The original (raw) value of the scope.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopeValidationError.Error">
            <summary>
            Error message describing why the raw scope failed to be parsed.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ParsedScopeValue">
            <summary>
            Models a parsed scope value.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ParsedScopeValue.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="rawValue"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ParsedScopeValue.#ctor(System.String,System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="rawValue"></param>
            <param name="parsedName"></param>
            <param name="parsedParameter"></param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopeValue.RawValue">
            <summary>
            The original (raw) value of the scope.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopeValue.ParsedName">
            <summary>
            The parsed name of the scope. If the scope has no structure, the parsed name will be the same as the raw value.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopeValue.ParsedParameter">
            <summary>
            The parameter value of the parsed scope. If the scope has no structure, then the value will be null.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ProofKeyThumbprint">
            <summary>
            Models the thumbprint of a proof key
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ProofKeyThumbprint.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ProofKeyThumbprint.Thumbprint">
            <summary>
            The thumbprint value used in a cnf thumbprint claim value
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.PushedAuthorizationValidationResult">
            <summary>
            Represents the results of validating a pushed authorization request.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PushedAuthorizationValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedPushedAuthorizationRequest)">
            <summary>
            Initializes a new instance of the <see
            cref="T:Duende.IdentityServer.Validation.PushedAuthorizationValidationResult"/> class, indicating that
            PAR specific validation succeeded.
            </summary>
            <param name="validatedParRequest">The validated pushed authorization
            request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PushedAuthorizationValidationResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see
            cref="T:Duende.IdentityServer.Validation.PushedAuthorizationValidationResult"/> class, indicating that
            validation failed while validating the request specifically as for
            pushed authorization.
            </summary>
            <param name="error">The error code, as specified by RFC 9126,
            etc</param>
            <param name="errorDescription">The error description: "human-readable
            ASCII text providing additional information, used to assist the client
            developer in understanding the error that occurred."</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PushedAuthorizationValidationResult.#ctor(System.String,System.String,Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Initializes a new instance of the <see
            cref="T:Duende.IdentityServer.Validation.PushedAuthorizationValidationResult"/> class, indicating that
            validation failed while validating the pushed parameters for use as
            authorize parameters. In other words, the pushed parameters contain an
            error that would be an error even if the pushed parameters were used
            directly at the authorize endpoint.
            </summary>
            <param name="error">The error code, as specified by RFC 9126,
            etc</param>
            <param name="errorDescription">The error description: "human-readable
            ASCII text providing additional information, used to assist the client
            developer in understanding the error that occurred."</param>
            <param name="authorizeRequest">The partial results of validating the
            pushed authorize parameters.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.PushedAuthorizationValidationResult.ValidatedRequest">
            <summary>
            The validated pushed authorization request, or null if a validation error occurred. 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.PushedAuthorizationValidationResult.PartiallyValidatedAuthorizeRequest">
             <summary>
             The partially validated authorize request returned by the <see
             cref="T:Duende.IdentityServer.Validation.IAuthorizeRequestValidator" /> when authorize request validation
             errors occur, or null otherwise.
            
             <para>If errors occur while the pushed authorization parameters are
             being validated as an authorize request, the <see
             cref="T:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest" /> that is being populated by that
             validation process can be used to enhance diagnostics and logging. 
             </para>
             </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ResourceValidationRequest">
            <summary>
            Models the request to validate scopes and resource indicators for a client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationRequest.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationRequest.Scopes">
            <summary>
            The requested scope values.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationRequest.ResourceIndicators">
            <summary>
            The requested resource indicators.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ResourceValidationResult">
            <summary>
            Result of validation of requested scopes and resource indicators.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResourceValidationResult.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResourceValidationResult.#ctor(Duende.IdentityServer.Models.Resources)">
            <summary>
            Ctor
            </summary>
            <param name="resources"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResourceValidationResult.#ctor(Duende.IdentityServer.Models.Resources,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ParsedScopeValue})">
            <summary>
            Ctor
            </summary>
            <param name="resources"></param>
            <param name="parsedScopeValues"></param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.Succeeded">
            <summary>
            Indicates if the result was successful.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.Resources">
            <summary>
            The resources of the result.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.ParsedScopes">
            <summary>
            The parsed scopes represented by the result.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.RawScopeValues">
            <summary>
            The original (raw) scope values represented by the validated result.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.InvalidResourceIndicators">
            <summary>
            The requested resource indicators that are invalid.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.InvalidScopes">
            <summary>
            The requested scopes that are invalid.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResourceValidationResult.Filter(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns new result filted by the scope values.
            </summary>
            <param name="scopeValues"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResourceValidationResult.FilterByResourceIndicator(System.String)">
            <summary>
            Filters the result by the resource indicator for issuing access tokens.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ApiSecretValidationResult">
            <summary>
            Validation result for API validation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ApiSecretValidationResult.Resource">
            <summary>
            Gets or sets the resource.
            </summary>
            <value>
            The resource.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.SecretValidationResult">
            <summary>
            Validation result for secrets
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.SecretValidationResult.Success">
            <summary>
            Gets or sets a value indicating whether the secret validation was successful.
            </summary>
            <value>
              <c>true</c> if success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.SecretValidationResult.Confirmation">
            <summary>
            Gets or sets the value of the confirmation method (will become the cnf claim). Must be a JSON object.
            </summary>
            <value>
            The confirmation.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.TokenRequestValidationResult">
            <summary>
            Validation result for token requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedTokenRequest,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.TokenRequestValidationResult"/> class.
            </summary>
            <param name="validatedRequest">The validated request.</param>
            <param name="customResponse">The custom response.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedTokenRequest,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.TokenRequestValidationResult"/> class.
            </summary>
            <param name="validatedRequest">The validated request.</param>
            <param name="error">The error.</param>
            <param name="errorDescription">The error description.</param>
            <param name="customResponse">The custom response.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRequestValidationResult.ValidatedRequest">
            <summary>
            Gets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRequestValidationResult.CustomResponse">
            <summary>
            Gets or sets the custom response.
            </summary>
            <value>
            The custom response.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRequestValidationResult.DPoPNonce">
            <summary>
            The DPoP nonce value issued by the server.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult">
            <summary>
            Models the validation result of access tokens and id tokens.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult.TokenTypeHint">
            <summary>
            Gets or sets the token type hint.
            </summary>
            <value>
            The token type hint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.TokenValidationResult">
            <summary>
            Models the validation result of access tokens and id tokens.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.Jwt">
            <summary>
            Gets or sets the JWT.
            </summary>
            <value>
            The JWT.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.ReferenceToken">
            <summary>
            Gets or sets the reference token (in case of access token validation).
            </summary>
            <value>
            The reference token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.ReferenceTokenId">
            <summary>
            Gets or sets the reference token identifier (in case of access token validation).
            </summary>
            <value>
            The reference token identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.RefreshToken">
            <summary>
            Gets or sets the refresh token (in case of refresh token validation).
            </summary>
            <value>
            The reference token identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.UserInfoRequestValidationResult">
            <summary>
            Validation result for userinfo requests
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.UserInfoRequestValidationResult.TokenValidationResult">
            <summary>
            Gets or sets the token validation result.
            </summary>
            <value>
            The token validation result.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.UserInfoRequestValidationResult.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest">
            <summary>
            Models a validated request to the authorize endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.ResponseType">
            <summary>
            Gets or sets the type of the response.
            </summary>
            <value>
            The type of the response.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.ResponseMode">
            <summary>
            Gets or sets the response mode.
            </summary>
            <value>
            The response mode.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.GrantType">
            <summary>
            Gets or sets the grant type.
            </summary>
            <value>
            The grant type.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.RequestedScopes">
            <summary>
            Gets or sets the requested scopes.
            </summary>
            <value>
            The requested scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.RequestedResourceIndicators">
            <summary>
            Gets or sets the requested resource indicators.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.WasConsentShown">
            <summary>
            Gets or sets a value indicating whether consent was shown.
            </summary>
            <value>
              <c>true</c> if consent was shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.Description">
            <summary>
            Gets the description the user assigned to the device being authorized.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.UiLocales">
            <summary>
            Gets or sets the UI locales.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.IsOpenIdRequest">
            <summary>
            Gets or sets a value indicating whether the request was an OpenID Connect request.
            </summary>
            <value>
            <c>true</c> if the request was an OpenID Connect request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.IsApiResourceRequest">
            <summary>
            Gets or sets a value indicating whether this instance is API resource request.
            </summary>
            <value>
            <c>true</c> if this instance is API resource request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.AuthenticationContextReferenceClasses">
            <summary>
            Gets or sets the authentication context reference classes.
            </summary>
            <value>
            The authentication context reference classes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.DisplayMode">
            <summary>
            Gets or sets the display mode.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.PromptModes">
            <summary>
            Gets or sets the collection of prompt modes.
            </summary>
            <remarks>
            The <see cref="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.PromptModes"/> change as they are used. For example, if
            the prompt mode is login (to force the login UI to be displayed), the
            collection will initially contain login, but when the login page is
            displayed, the login prompt will be removed from the collection of
            prompt modes so that the login page will only be displayed once.
            <para>
            See also: <see cref="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.ProcessedPromptModes"/> and <see
            cref="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.OriginalPromptModes"/>.
            </para>
            </remarks>
            <value>
            The collection of prompt modes, which changes as the request is
            processed and various prompts are displayed.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.OriginalPromptModes">
            <summary>
            Gets or sets the collection of original prompt modes.
            </summary>
            <remarks>
            The <see cref="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.PromptModes"/> change as they are used. For example, if
            the prompt mode is login (to force the login UI to be displayed), the
            collection will initially contain login, but when the login page is
            displayed, the login prompt will be removed from the collection of
            prompt modes so that the login page will only be displayed once.
            <para>
            See also:
            <list type="bullet">
            <item><seealso cref="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.ProcessedPromptModes"/></item>
            <item><seealso cref="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.PromptModes"/></item>
            </list>
            </para>
            </remarks>
            <value>
            The collection of original prompt modes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.ProcessedPromptModes">
            <summary>
            Gets or sets the collection of previously processed prompt modes.
            </summary>
            <remarks>
            The <see cref="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.PromptModes"/> change as they are used. For example, if
            the prompt mode is login (to force the login UI to be displayed), the
            collection will initially contain login, but when the login page is
            displayed, the login prompt will be removed from the collection of
            prompt modes so that the login page will only be displayed once.
            </remarks>
            <para>
            See also:
            <list type="bullet">
            <item><seealso cref="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.PromptModes"/></item>
            <item><seealso cref="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.OriginalPromptModes"/></item>
            </list>
            </para>
            <value>
            The collection of processed prompt modes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.MaxAge">
            <summary>
            Gets or sets the maximum age.
            </summary>
            <value>
            The maximum age.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.LoginHint">
            <summary>
            Gets or sets the login hint.
            </summary>
            <value>
            The login hint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.CodeChallenge">
            <summary>
            Gets or sets the code challenge
            </summary>
            <value>
            The code challenge
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.CodeChallengeMethod">
            <summary>
            Gets or sets the code challenge method
            </summary>
            <value>
            The code challenge method
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.RequestObjectValues">
            <summary>
            Gets or sets the validated contents of the request object (if present)
            </summary>
            <value>
            The request object values
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.RequestObject">
            <summary>
            Gets or sets the request object (either passed by value or retrieved by reference)
            </summary>
            <value>
            The request object
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.DPoPKeyThumbprint">
            <summary>
            The thumbprint of the associated DPoP proof key, if one was used.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.PushedAuthorizationReferenceValue">
            <summary>
            The reference value of the pushed authorization request, if one was used. Pushed authorization requests are
            passed by reference using the request_uri parameter, which is in the form
            urn:ietf:params:oauth:request_uri:{ReferenceValue}, where ReferenceValue is a random identifier. If a
            request_uri in that format is passed, the reference value portion will be extracted and saved here.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.AuthorizeRequestType">
            <summary>
            Gets or sets a value indicating the context in which authorization
            validation is occurring (the PAR endpoint or the authorize endpoint with
            or without pushed parameters).
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.AccessTokenRequested">
            <summary>
            Gets a value indicating whether an access token was requested.
            </summary>
            <value>
            <c>true</c> if an access token was requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.AuthorizeRequestType">
            <summary>
            Indicates the context in which authorization validation is occurring (is
            this the authorize endpoint with or without PAR or the PAR endpoint itself?)
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.AuthorizeRequestType.Authorize">
            <summary>
            A request to the authorize endpoint without PAR
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.AuthorizeRequestType.PushedAuthorization">
            <summary>
            A request to the PAR endpoint
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.AuthorizeRequestType.AuthorizeWithPushedParameters">
            <summary>
            A request to the authorize endpoint with pushed parameters
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest">
            <summary>
            Models a validated request to the backchannel authentication endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.RequestedScopes">
            <summary>
            Gets or sets the scopes.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.RequestedResourceIndicators">
            <summary>
            Gets or sets the resource indicator.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.AuthenticationContextReferenceClasses">
            <summary>
            Gets or sets the authentication context reference classes.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.Tenant">
            <summary>
            Gets or sets the tenant.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.IdP">
            <summary>
            Gets or sets the idp.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.LoginHintToken">
            <summary>
            Gets or sets the login hint token.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.IdTokenHint">
            <summary>
            Gets or sets the id token hint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.IdTokenHintClaims">
            <summary>
            Gets or sets the validated claims from the id token hint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.LoginHint">
            <summary>
            Gets or sets the login hint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.BindingMessage">
            <summary>
            Gets or sets the binding message.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.UserCode">
            <summary>
            Gets or sets the user code.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.Expiry">
            <summary>
            Gets or sets the requested expiry if present, otherwise the client configured expiry.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.RequestObjectValues">
            <summary>
            Gets or sets the validated contents of the request object (if present)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.RequestObject">
            <summary>
            Gets or sets the request object (either passed by value or retrieved by reference)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedBackchannelAuthenticationRequest.Properties">
            <summary>
            Gets or sets a dictionary of validated custom request parameters. Custom
            request parameters should be validated and added to this collection in
            an <see cref="T:Duende.IdentityServer.Validation.ICustomBackchannelAuthenticationValidator"/>. These
            properties are persisted to the store and made available in the
            backchannel authentication UI and notification services.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest">
            <summary>
            Models a validated request to the device authorization endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest.RequestedScopes">
            <summary>
            Gets or sets the requested scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest.IsOpenIdRequest">
            <summary>
            Gets or sets a value indicating whether this instance is open identifier request.
            </summary>
            <value>
              <c>true</c> if this instance is open identifier request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest.Description">
            <summary>
            Gets the description the user assigned to the device being authorized.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedEndSessionRequest">
            <summary>
            Represents a validated end session (logout) request
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedEndSessionRequest.IsAuthenticated">
            <summary>
            Gets a value indicating whether this instance is authenticated.
            </summary>
            <value>
            <c>true</c> if this instance is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedEndSessionRequest.PostLogOutUri">
            <summary>
            Gets or sets the post-logout URI.
            </summary>
            <value>
            The post-logout URI.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedEndSessionRequest.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedEndSessionRequest.UiLocales">
            <summary>
            Gets or sets the UI locales.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedEndSessionRequest.ClientIds">
            <summary>
             Ids of clients known to have an authentication session for user at end session time
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedPushedAuthorizationRequest">
            <summary>
            A validated pushed authorization request 
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedRequest">
            <summary>
            Base class for a validate authorize or token request
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Raw">
            <summary>
            Gets or sets the raw request data
            </summary>
            <value>
            The raw.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.IssuerName">
            <summary>
            The name of the issuer for the current request
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Secret">
            <summary>
            Gets or sets the secret used to authenticate the client.
            </summary>
            <value>
            The parsed secret.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.AccessTokenLifetime">
            <summary>
            Gets or sets the effective access token lifetime for the current request.
            This value is initally read from the client configuration but can be modified in the request pipeline
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.ClientClaims">
            <summary>
            Gets or sets the client claims for the current request.
            This value is initally read from the client configuration but can be modified in the request pipeline
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.AccessTokenType">
            <summary>
            Gets or sets the effective access token type for the current request.
            This value is initally read from the client configuration but can be modified in the request pipeline
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>
            The session identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Options">
            <summary>
            Gets or sets the identity server options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.ValidatedResources">
            <summary>
            Gets or sets the validated resources for the request.
            </summary>
            <value>
            The validated resources.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Confirmation">
            <summary>
            Gets or sets the value of the confirmation method (will become the cnf claim). Must be a JSON object.
            </summary>
            <value>
            The confirmation.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.ProofType">
            <summary>
            The type of proof for the request
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.ClientId">
            <summary>
            Gets or sets the client ID that should be used for the current request (this is useful for token exchange scenarios)
            </summary>
            <value>
            The client ID
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ValidatedRequest.SetClient(Duende.IdentityServer.Models.Client,Duende.IdentityServer.Models.ParsedSecret,System.String)">
            <summary>
            Sets the client and the appropriate request specific settings.
            </summary>
            <param name="client">The client.</param>
            <param name="secret">The client secret (optional).</param>
            <param name="confirmation">The confirmation.</param>
            <exception cref="T:System.ArgumentNullException">client</exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedTokenRequest">
            <summary>
            Models a validated request to the token endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.GrantType">
            <summary>
            Gets or sets the type of the grant.
            </summary>
            <value>
            The type of the grant.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.RequestedScopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.RequestedResourceIndicator">
            <summary>
            Gets or sets the resource indicator.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.UserName">
            <summary>
            Gets or sets the username used in the request.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.RefreshToken">
            <summary>
            Gets or sets the refresh token.
            </summary>
            <value>
            The refresh token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.RefreshTokenHandle">
            <summary>
            Gets or sets the refresh token handle.
            </summary>
            <value>
            The refresh token handle.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.AuthorizationCode">
            <summary>
            Gets or sets the authorization code.
            </summary>
            <value>
            The authorization code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.AuthorizationCodeHandle">
            <summary>
            Gets or sets the authorization code handle.
            </summary>
            <value>
            The authorization code handle.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.CodeVerifier">
            <summary>
            Gets or sets the code verifier.
            </summary>
            <value>
            The code verifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.DeviceCode">
            <summary>
            Gets or sets the device code.
            </summary>
            <value>
            The device code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.BackChannelAuthenticationRequest">
            <summary>
            Gets or sets the backchannel authentication request.
            </summary>
            <value>
            The backchannel authentication request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.ProofKeyThumbprint">
            <summary>
            The thumbprint of the associated proof key, if one was used.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidationResult">
            <summary>
            Minimal validation result class (base-class for more complex validation results)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidationResult.IsError">
            <summary>
            Gets or sets a value indicating whether the validation was successful.
            </summary>
            <value>
              <c>true</c> if the validation is failed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidationResult.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidationResult.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationContext`2">
            <summary>
            Context for configuring an authentication handler from a dynamic identity provider.
            </summary>
            <typeparam name="TAuthenticationOptions"></typeparam>
            <typeparam name="TIdentityProvider"></typeparam>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationContext`2.AuthenticationOptions">
            <summary>
            The authentication options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationContext`2.IdentityProvider">
            <summary>
            The identity provider.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationContext`2.DynamicProviderOptions">
            <summary>
            The dynamic identity provider options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationContext`2.PathPrefix">
            <summary>
            The path prefix for callback paths the authentication handler is to use.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationOptions`2">
            <summary>
            Helper class for configuring authentication options from a dynamic identity provider
            </summary>
            <typeparam name="TAuthenticationOptions"></typeparam>
            <typeparam name="TIdentityProvider"></typeparam>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationOptions`2.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationOptions{`0,`1}})">
            <summary>
            Ctor
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationOptions`2.Configure(System.String,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationOptions`2.Configure(Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationContext{`0,`1})">
            <summary>
            Allows for configuring the handler options from the identity provider configuration.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.ConfigureAuthenticationOptions`2.Configure(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.DynamicProviders.DynamicAuthenticationScheme">
            <summary>
            Models a dynamic authentication scheme and it's corresponding IdentityProvider data.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.DynamicAuthenticationScheme.#ctor(Duende.IdentityServer.Models.IdentityProvider,System.Type)">
            <summary>
            Ctor
            </summary>
            <param name="idp"></param>
            <param name="handlerType"></param>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.DynamicProviders.DynamicAuthenticationScheme.IdentityProvider">
            <summary>
            The corresponding IdentityProvider configuration data.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.DynamicProviders.DynamicAuthenticationSchemeCache">
            <summary>
            Cache for DynamicAuthenticationScheme.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.DynamicAuthenticationSchemeCache.Add(System.String,Duende.IdentityServer.Hosting.DynamicProviders.DynamicAuthenticationScheme)">
            <summary>
            Adds the scheme.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.DynamicAuthenticationSchemeCache.Get(System.String)">
            <summary>
            Gets the scheme.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.DynamicAuthenticationSchemeCache.GetIdentityProvider``1(System.String)">
            <summary>
            Returns the downcast IdentityProvider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.DynamicProviders.CachingIdentityProviderStore`1">
            <summary>
            Caching decorator for IIdentityProviderStore
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.CachingIdentityProviderStore`1.#ctor(`0,Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Models.IdentityProvider},Duende.IdentityServer.Services.ICache{System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.IdentityProviderName}},Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Hosting.DynamicProviders.CachingIdentityProviderStore{`0}})">
            <summary>
            Ctor
            </summary>
            <param name="inner"></param>
            <param name="cache"></param>
            <param name="allCache"></param>
            <param name="options"></param>
            <param name="httpContextAccessor"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.CachingIdentityProviderStore`1.GetAllSchemeNamesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.CachingIdentityProviderStore`1.GetBySchemeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.DynamicProviders.NonCachingIdentityProviderStore`1">
            <summary>
            Decorator for IIdentityProviderStore that will purge the IOptionsMonitor so that the options are not cached.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.NonCachingIdentityProviderStore`1.#ctor(`0,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Hosting.DynamicProviders.NonCachingIdentityProviderStore{`0}})">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.NonCachingIdentityProviderStore`1.GetAllSchemeNamesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.NonCachingIdentityProviderStore`1.GetBySchemeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.DynamicProviders.ValidatingIdentityProviderStore`1">
            <summary>
            Validating decorator for IIdentityProviderStore
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.ValidatingIdentityProviderStore`1.#ctor(`0,Duende.IdentityServer.Validation.IIdentityProviderConfigurationValidator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Hosting.DynamicProviders.ValidatingIdentityProviderStore{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Hosting.DynamicProviders.ValidatingIdentityProviderStore`1" /> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.ValidatingIdentityProviderStore`1.GetAllSchemeNamesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.DynamicProviders.ValidatingIdentityProviderStore`1.GetBySchemeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.Endpoint.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.Endpoint.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.Endpoint.Handler">
            <summary>
            Gets or sets the handler.
            </summary>
            <value>
            The handler.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.IdentityServerMiddleware">
            <summary>
            IdentityServer middleware
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IdentityServerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Hosting.IdentityServerMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Hosting.IdentityServerMiddleware"/> class.
            </summary>
            <param name="next">The next.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IdentityServerMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Hosting.IEndpointRouter,Duende.IdentityServer.Services.IUserSession,Duende.IdentityServer.Services.IEventService,Duende.IdentityServer.Services.IIssuerNameService,Duende.IdentityServer.Services.ISessionCoordinationService)">
            <summary>
            Invokes the middleware.
            </summary>
            <param name="context">The context.</param>
            <param name="options"></param>
            <param name="router">The router.</param>
            <param name="userSession">The user session.</param>
            <param name="events">The event service.</param>
            <param name="issuerNameService">The issuer name service</param>
            <param name="sessionCoordinationService"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.IEndpointHandler">
            <summary>
            Endpoint handler
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IEndpointHandler.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.IEndpointResult">
            <summary>
            An <see cref="T:Duende.IdentityServer.Hosting.IEndpointResult"/> is the object model that describes the
            results that will returned by one of the protocol endpoints provided by
            IdentityServer, and can be executed to produce an HTTP response.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IEndpointResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result to write an http response.
            </summary>
            <param name="context">The HTTP context.</param>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.IEndpointRouter">
            <summary>
            The endpoint router is responsible for mapping incoming http requests onto
            <see cref="T:Duende.IdentityServer.Hosting.IEndpointHandler"/>s, for the protocol endpoints that
            IdentityServer supports.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IEndpointRouter.Find(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Finds a matching <see cref="T:Duende.IdentityServer.Hosting.IEndpointHandler"/> for an incoming http
            request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>The handler to process a protocol request, or null, if the
            incoming http request is not a protocol request.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.IHttpResponseWriter`1">
            <summary>
            Contract for a service that writes appropriate http responses for <see
            cref="T:Duende.IdentityServer.Hosting.IEndpointResult"/> objects.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IHttpResponseWriter`1.WriteHttpResponse(`0,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Writes the endpoint result to the HTTP response.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationEvents">
            <summary>
            Events for local API authentication
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationEvents.OnClaimsTransformation">
            <summary>
            Invoked after the security token has passed validation and a ClaimsIdentity has been generated.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationEvents.ClaimsTransformation(Duende.IdentityServer.Hosting.LocalApiAuthentication.ClaimsTransformationContext)">
            <summary>
            Invoked after the security token has passed validation and a ClaimsIdentity has been generated.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.LocalApiAuthentication.ClaimsTransformationContext">
            <summary>
            Context class for local API claims transformation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.ClaimsTransformationContext.Principal">
            <summary>
            The principal
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.ClaimsTransformationContext.HttpContext">
            <summary>
            the HTTP context
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler">
            <summary>
            Authentication handler for validating access token from the local IdentityServer
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Duende.IdentityServer.Validation.ITokenValidator,Duende.IdentityServer.Validation.IDPoPProofValidator,Duende.IdentityServer.Stores.IClientStore)">
            <inheritdoc />
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler.Events">
            <summary>
            The handler calls methods on the events which give the application control at certain points where processing is occurring. 
            If it is not provided a default instance is supplied which does nothing when the methods are called.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler.CreateEventsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler.HandleAuthenticateAsync">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler.HandleChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions">
            <summary>
            Options for local API authentication
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions" />
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions.TokenMode">
            <summary>
            Indicates if bearer and/or DPoP tokens are accepted.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions.ExpectedScope">
            <summary>
            Allows setting a specific required scope (optional)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions.SaveToken">
            <summary>
            Specifies whether the token should be saved in the authentication properties
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions.Events">
            <summary>
            Allows implementing events
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiTokenMode">
            <summary>
            Models the type of tokens accepted for local API authentication
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiTokenMode.BearerOnly">
            <summary>
            Only bearer tokens will be accepted
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiTokenMode.DPoPOnly">
            <summary>
            Only DPoP tokens will be accepted
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiTokenMode.DPoPAndBearer">
            <summary>
            Both DPoP and Bearer tokens will be accepted
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.MutualTlsEndpointMiddleware">
            <summary>
                Middleware for re-writing the MTLS enabled endpoints to the standard protocol endpoints
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.MutualTlsEndpointMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Hosting.MutualTlsEndpointMiddleware})">
            <summary>
                ctor
            </summary>
            <param name="next"></param>
            <param name="options"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.MutualTlsEndpointMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.IdentityServerConstants.LocalApi">
            <summary>
            Constants for local IdentityServer access token authentication.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.LocalApi.AuthenticationScheme">
            <summary>
            The authentication scheme when using the AddLocalApi helper.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.LocalApi.ScopeName">
            <summary>
            The API scope name when using the AddLocalApiAuthentication helper.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.LocalApi.PolicyName">
            <summary>
            The authorization policy name when using the AddLocalApiAuthentication helper.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.OpenId">
            <summary>REQUIRED. Informs the Authorization Server that the Client is making an OpenID Connect request. If the <c>openid</c> scope value is not present, the behavior is entirely unspecified.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.Profile">
            <summary>OPTIONAL. This scope value requests access to the End-User's default profile Claims, which are: <c>name</c>, <c>family_name</c>, <c>given_name</c>, <c>middle_name</c>, <c>nickname</c>, <c>preferred_username</c>, <c>profile</c>, <c>picture</c>, <c>website</c>, <c>gender</c>, <c>birthdate</c>, <c>zoneinfo</c>, <c>locale</c>, and <c>updated_at</c>.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.Email">
            <summary>OPTIONAL. This scope value requests access to the <c>email</c> and <c>email_verified</c> Claims.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.Address">
            <summary>OPTIONAL. This scope value requests access to the <c>address</c> Claim.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.Phone">
            <summary>OPTIONAL. This scope value requests access to the <c>phone_number</c> and <c>phone_number_verified</c> Claims.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.OfflineAccess">
            <summary>This scope value MUST NOT be used with the OpenID Connect Implicit Client Implementer's Guide 1.0. See the OpenID Connect Basic Client Implementer's Guide 1.0 (http://openid.net/specs/openid-connect-implicit-1_0.html#OpenID.Basic) for its usage in that subset of OpenID Connect.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.ContentSecurityPolicyHashes.EndSessionStyle">
            <summary>
            The hash of the inline style used on the end session endpoint. 
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.ContentSecurityPolicyHashes.AuthorizeScript">
            <summary>
            The hash of the inline script used on the authorize endpoint. 
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.ContentSecurityPolicyHashes.CheckSessionScript">
            <summary>
            The hash of the inline script used on the check session endpoint. 
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.IIdentityServerTools">
            <summary>
            Useful helpers for interacting with IdentityServer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.IIdentityServerTools.IssueJwtAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Issues a JWT with a specific lifetime and set of claims.
            </summary>
            <param name="lifetime">The lifetime, in seconds, which will determine
            the exp claim of the token.</param>
            <param name="claims">A collection of additional claims to include in the
            token.</param>
            <returns>A JWT that expires after the specified lifetime and contains
            the given claims.</returns>
            <remarks>Typical implementations depend on the <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>
            or <see cref="P:Duende.IdentityServer.Configuration.IdentityServerOptions.IssuerUri"/> to determine the issuer
            of the token. Ensure that calls to this method will only occur if there
            is an incoming HTTP request or with the option set.
            </remarks>
        </member>
        <member name="M:Duende.IdentityServer.IIdentityServerTools.IssueJwtAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Issues a JWT with a specific lifetime, issuer, and set of claims. 
            </summary>
            <param name="lifetime">The lifetime, in seconds, which will determine
            the exp claim of the token.</param>
            <param name="issuer">The issuer of the token, set in the iss
            claim.</param>
            <param name="claims">A collection of additional claims to include in the
            token.</param>
            <returns>A JWT with the specified lifetime, issuer and additional
            claims.</returns>
        </member>
        <member name="M:Duende.IdentityServer.IIdentityServerTools.IssueJwtAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Issues a JWT with a specific lifetime, issuer, token type, and set of
            claims. 
            </summary>
            <param name="lifetime">The lifetime, in seconds, which will determine
            the exp claim of the token.</param>
            <param name="issuer">The issuer of the token, set in the iss
            claim.</param>
            <param name="tokenType">The token's type, such as "access_token" or
            "id_token", set in the typ claim.</param>
            <param name="claims">A collection of additional claims to include in the
            token.</param>
            <returns>A JWT with the specified lifetime, issuer, token type, and
            additional claims.</returns>
        </member>
        <member name="M:Duende.IdentityServer.IIdentityServerTools.IssueClientJwtAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Issues a JWT access token for a particular client.
            </summary>
            <param name="clientId">The client identifier, set in the client_id
            claim.</param>
            <param name="lifetime">The lifetime, in seconds, which will determine
            the exp claim of the token.</param>
            <param name="scopes">A collection of scopes, which will be added to the
            token as claims with the "scope" type.</param>
            <param name="audiences">A collection of audiences, which will be added
            to the token as claims with the "aud" type.</param>
            <param name="additionalClaims">A collection of additional claims to
            include in the token.</param>
            <returns>A JWT with the specified client, lifetime, scopes, audiences,
            and additional claims.</returns>
            <remarks>Typical implementations depend on the <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>
            or <see cref="P:Duende.IdentityServer.Configuration.IdentityServerOptions.IssuerUri"/> to determine the issuer
            of the token. Ensure that calls to this method will only occur if there
            is an incoming HTTP request or with the option set.
            </remarks>
        </member>
        <member name="T:Duende.IdentityServer.IdentityServerTools">
            <summary>
            Class for useful helpers for interacting with IdentityServer
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerTools.#ctor(Duende.IdentityServer.Services.IIssuerNameService,Duende.IdentityServer.Services.ITokenCreationService,Duende.IdentityServer.IClock,Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerTools.IssueJwtAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerTools.IssueJwtAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerTools.IssueJwtAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerTools.IssueClientJwtAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.IdentityServerUser">
            <summary>
            Model properties of an IdentityServer user
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.SubjectId">
            <summary>
            Subject ID (mandatory)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.DisplayName">
            <summary>
            Display name (optional)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.IdentityProvider">
            <summary>
            Identity provider (optional)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.Tenant">
            <summary>
            Tenant (optional)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.AuthenticationMethods">
            <summary>
            Authentication methods
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.AuthenticationTime">
            <summary>
            Authentication time
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.AdditionalClaims">
            <summary>
            Additional claims
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerUser.#ctor(System.String)">
            <summary>
            Initializes a user identity
            </summary>
            <param name="subjectId">The subject ID</param>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerUser.CreatePrincipal">
            <summary>
            Creates an IdentityServer claims principal
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.IClock">
            <summary>
            Abstraction for the date/time.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IClock.UtcNow">
            <summary>
            The current UTC date/time.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Internal.DefaultConcurrencyLock`1">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Internal.DefaultConcurrencyLock`1.LockAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Internal.DefaultConcurrencyLock`1.Unlock">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Internal.IConcurrencyLock`1">
            <summary>
            Interface to model locking.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Internal.IConcurrencyLock`1.LockAsync(System.Int32)">
            <summary>
            Locks. Returns false if lock was not obtained within in the timeout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Internal.IConcurrencyLock`1.Unlock">
            <summary>
            Unlocks
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Internal.NopConcurrencyLock`1">
            <summary>
            Nop implementation.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Internal.NopConcurrencyLock`1.LockAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Internal.NopConcurrencyLock`1.Unlock">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter">
            <summary>
            State formatter using IDistributedCache
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter.#ctor(System.IServiceProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter"/> class.
            </summary>
            <param name="provider">The service provider.</param>
            <param name="name">The scheme name.</param>
        </member>
        <member name="M:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter.Protect(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Protects the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter.Protect(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)">
            <summary>
            Protects the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="purpose">The purpose.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter.Unprotect(System.String)">
            <summary>
            Unprotects the specified protected text.
            </summary>
            <param name="protectedText">The protected text.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter.Unprotect(System.String,System.String)">
            <summary>
            Unprotects the specified protected text.
            </summary>
            <param name="protectedText">The protected text.</param>
            <param name="purpose">The purpose.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.IdentityServerLicense">
            <summary>
            Models the license for IdentityServer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerLicense.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerLicense.ClientLimit">
            <summary>
            The client limit
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerLicense.IssuerLimit">
            <summary>
            The issuer limit
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerLicense.KeyManagementFeature">
            <summary>
            Automatic key management
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerLicense.ParFeature">
            <summary>
            PAR
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerLicense.ResourceIsolationFeature">
            <summary>
            Resource isolation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerLicense.DynamicProvidersFeature">
            <summary>
            Dynamic providers
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerLicense.RedistributionFeature">
            <summary>
            Redistribution
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerLicense.CibaFeature">
            <summary>
            CIBA
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerLicense.ServerSideSessionsFeature">
            <summary>
            Server-side sessions
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerLicense.DPoPFeature">
            <summary>
            DPoP
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Licensing.LicenseUsageSummary">
            <summary>
            Usage summary for the current IdentityServer instance intended for auditing purposes.
            </summary>
            <param name="LicenseEdition">License edition retrieved from license key.</param>
            <param name="ClientsUsed">Clients used in the current IdentityServer instance.</param>
            <param name="IssuersUsed">Issuers used in the current IdentityServer instance.</param>
            <param name="FeaturesUsed">Features used in the current IdentityServer instance.</param>
        </member>
        <member name="M:Duende.IdentityServer.Licensing.LicenseUsageSummary.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Usage summary for the current IdentityServer instance intended for auditing purposes.
            </summary>
            <param name="LicenseEdition">License edition retrieved from license key.</param>
            <param name="ClientsUsed">Clients used in the current IdentityServer instance.</param>
            <param name="IssuersUsed">Issuers used in the current IdentityServer instance.</param>
            <param name="FeaturesUsed">Features used in the current IdentityServer instance.</param>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.LicenseUsageSummary.LicenseEdition">
            <summary>License edition retrieved from license key.</summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.LicenseUsageSummary.ClientsUsed">
            <summary>Clients used in the current IdentityServer instance.</summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.LicenseUsageSummary.IssuersUsed">
            <summary>Issuers used in the current IdentityServer instance.</summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.LicenseUsageSummary.FeaturesUsed">
            <summary>Features used in the current IdentityServer instance.</summary>
        </member>
        <member name="T:Duende.IdentityServer.Licensing.V2.License">
            <summary>
            Models a Duende commercial license.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Licensing.V2.License.#ctor">
            <summary>
            Initializes an empty (non-configured) license.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Licensing.V2.License.#ctor(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Initializes the license from the claims in a key.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.V2.License.SerialNumber">
            <summary>
            The serial number
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.V2.License.CompanyName">
            <summary>
            The company name
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.V2.License.ContactInfo">
            <summary>
            The company contact info
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.V2.License.Expiration">
            <summary>
            The license expiration
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.V2.License.Edition">
            <summary>
            The license edition 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.V2.License.Redistribution">
            <summary>
            True if redistribution is enabled for this license, and false otherwise.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.V2.License.Features">
            <summary>
            The license features
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.V2.License.Extras">
            <summary>
            Extras
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Licensing.V2.License.IsConfigured">
            <summary>
            True if the license was configured in options or from a file, and false otherwise.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Licensing.V2.License.IsEnabled(Duende.IdentityServer.Licensing.V2.LicenseFeature)">
            <summary>
            Checks if a LicenseFeature is enabled in the current license. If there
            is no configured license, this always returns true.
            </summary>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Licensing.V2.LicenseAccessor">
            <summary>
            Loads the license from configuration or a file, and validates its contents.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Licensing.V2.LicenseAccessor.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Licensing.V2.LicenseAccessor})">
            <summary>
            Loads the license from configuration or a file, and validates its contents.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Licensing.V2.LicenseEdition">
            <summary>
            The editions of our license, which give access to different features.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseEdition.Enterprise">
            <summary>
            Enterprise license edition
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseEdition.Business">
            <summary>
            Business license edition
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseEdition.Starter">
            <summary>
            Starter license edition
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseEdition.Community">
            <summary>
            Community license edition
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseEdition.Bff">
            <summary>
            Bff license edition
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Licensing.V2.LicenseFeature">
            <summary>
            The features of IdentityServer that can be enabled or disabled through the License.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseFeature.KeyManagement">
            <summary>
            Automatic Key Management
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseFeature.PAR">
            <summary>
            Pushed Authorization Requests
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseFeature.ResourceIsolation">
            <summary>
            Resource Isolation
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseFeature.DynamicProviders">
            <summary>
            Dyanmic External Providers
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseFeature.CIBA">
            <summary>
            Client Initiated Backchannel Authorization
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseFeature.ServerSideSessions">
            <summary>
            Server-Side Sessions
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseFeature.DPoP">
            <summary>
            Demonstrating Proof of Possession
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseFeature.DCR">
            <summary>
            Configuration API
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseFeature.ISV">
            <summary>
            ISV (same as Redistribution)
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.LicenseFeature.Redistribution">
            <summary>
            Redistribution
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Licensing.V2.ProtocolRequestCounter.Threshold">
            <summary>
            The number of protocol requests allowed for unlicensed use. This should only be changed in tests.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Logging.LogSerializer">
            <summary>
            Helper to JSON serialize object data for logging.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Logging.LogSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="logObject">The object.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator">
            <summary>
            Default logic for determining if user must login or consent when making requests to the authorization endpoint.
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IAuthorizeInteractionResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.Consent">
            <summary>
            The consent service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.Profile">
            <summary>
            The profile service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.IClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator},Duende.IdentityServer.Services.IConsentService,Duende.IdentityServer.Services.IProfileService)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator"/> class.
            </summary>
            <param name="options"></param>
            <param name="clock">The clock.</param>
            <param name="logger">The logger.</param>
            <param name="consent">The consent.</param>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.ProcessInteractionAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,Duende.IdentityServer.Models.ConsentResponse)">
            <summary>
            Processes the interaction logic.
            </summary>
            <param name="request">The request.</param>
            <param name="consent">The consent.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.ProcessCreateAccountAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Processes the create account logic.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.ProcessLoginAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Processes the login logic.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.ProcessConsentAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,Duende.IdentityServer.Models.ConsentResponse)">
            <summary>
            Processes the consent logic.
            </summary>
            <param name="request">The request.</param>
            <param name="consent">The consent.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Invalid PromptMode</exception>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator">
            <summary>
            The authorize response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IAuthorizeResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.TokenService">
            <summary>
            The token service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.AuthorizationCodeStore">
            <summary>
            The authorization code store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.Events">
            <summary>
            The event service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.KeyMaterialService">
            <summary>
            The key material service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.IClock,Duende.IdentityServer.Services.ITokenService,Duende.IdentityServer.Services.IKeyMaterialService,Duende.IdentityServer.Stores.IAuthorizationCodeStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator},Duende.IdentityServer.Services.IEventService)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="clock">The clock.</param>
            <param name="logger">The logger.</param>
            <param name="tokenService">The token service.</param>
            <param name="keyMaterialService"></param>
            <param name="authorizationCodeStore">The authorization code store.</param>
            <param name="events">The events.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.CreateResponseAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Creates the response
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">invalid grant type: " + request.GrantType</exception>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.CreateHybridFlowResponseAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Creates the response for a hybrid flow request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.CreateCodeFlowResponseAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Creates the response for a code flow request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.CreateImplicitFlowResponseAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,System.String)">
            <summary>
            Creates the response for a implicit flow request
            </summary>
            <param name="request"></param>
            <param name="authorizationCode"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.CreateCodeAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Creates an authorization code
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponseGenerator">
            <summary>
            The backchannel authentication response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IBackchannelAuthenticationResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponseGenerator.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponseGenerator.BackChannelAuthenticationRequestStore">
            <summary>
            The request store.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponseGenerator.UserLoginService">
            <summary>
            The user login service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponseGenerator.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponseGenerator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Stores.IBackChannelAuthenticationRequestStore,Duende.IdentityServer.Services.IBackchannelAuthenticationUserNotificationService,Duende.IdentityServer.IClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponseGenerator"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="backChannelAuthenticationRequestStore"></param>
            <param name="userLoginService"></param>
            <param name="clock">The clock.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator">
            <summary>
            The device authorization response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IDeviceAuthorizationResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.UserCodeService">
            <summary>
            The user code service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.DeviceFlowCodeService">
            <summary>
            The device flow code service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Services.IUserCodeService,Duende.IdentityServer.Services.IDeviceFlowCodeService,Duende.IdentityServer.IClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="userCodeService">The user code service.</param>
            <param name="deviceFlowCodeService">The device flow code service.</param>
            <param name="clock">The clock.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult,System.String)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <param name="baseUrl">The base URL.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">validationResult or Client</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or whitespace. - baseUrl</exception>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator">
            <summary>
            Default implementation of the discovery endpoint response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IDiscoveryResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.ExtensionGrants">
            <summary>
            The extension grants validator
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.Keys">
            <summary>
            The key material service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.ResourceOwnerValidator">
            <summary>
            The resource owner validator
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.ResourceStore">
            <summary>
            The resource store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.SecretParsers">
            <summary>
            The secret parsers
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Stores.IResourceStore,Duende.IdentityServer.Services.IKeyMaterialService,Duende.IdentityServer.Validation.ExtensionGrantValidator,Duende.IdentityServer.Validation.ISecretsListParser,Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="resourceStore">The resource store.</param>
            <param name="keys">The keys.</param>
            <param name="extensionGrants">The extension grants.</param>
            <param name="secretParsers">The secret parsers.</param>
            <param name="resourceOwnerValidator">The resource owner validator.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.CreateDiscoveryDocumentAsync(System.String,System.String)">
            <summary>
            Creates the discovery document.
            </summary>
            <param name="baseUrl">The base URL.</param>
            <param name="issuerUri">The issuer URI.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.CreateJwkDocumentAsync">
            <summary>
            Creates the JWK document.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator">
            <summary>
            The introspection response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IIntrospectionResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator.Events">
            <summary>
            Gets the events.
            </summary>
            <value>
            The events.
            </value>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator.#ctor(Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator" /> class.
            </summary>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.IntrospectionRequestValidationResult)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator.AreExpectedScopesPresentAsync(Duende.IdentityServer.Validation.IntrospectionRequestValidationResult)">
            <summary>
            Checks if the API resource is allowed to introspect the scopes.
            </summary>
            <param name="validationResult">The validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.PushedAuthorizationResponseGenerator">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.PushedAuthorizationResponseGenerator.#ctor(Duende.IdentityServer.Services.IHandleGenerationService,Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Services.IPushedAuthorizationService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.PushedAuthorizationResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.PushedAuthorizationResponseGenerator"/> class.
            </summary>
            <param name="handleGeneration">The handle generation service, used for creation of request uri reference values.
            </param>
            <param name="options">The IdentityServer options</param>
            <param name="pushedAuthorizationService">The pushed authorization service</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.PushedAuthorizationResponseGenerator.CreateResponseAsync(Duende.IdentityServer.Validation.ValidatedPushedAuthorizationRequest)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator">
            <summary>
            The default token response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.ITokenResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.TokenService">
            <summary>
            The token service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.RefreshTokenService">
            <summary>
            The refresh token service
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ScopeParser">
            <summary>
            The scope parser
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.Resources">
            <summary>
            The resource store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.Clients">
            <summary>
            The clients store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.Clock">
            <summary>
             The clock
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.#ctor(Duende.IdentityServer.IClock,Duende.IdentityServer.Services.ITokenService,Duende.IdentityServer.Services.IRefreshTokenService,Duende.IdentityServer.Validation.IScopeParser,Duende.IdentityServer.Stores.IResourceStore,Duende.IdentityServer.Stores.IClientStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.TokenResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator" /> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="tokenService">The token service.</param>
            <param name="refreshTokenService">The refresh token service.</param>
            <param name="scopeParser">The scope parser.</param>
            <param name="resources">The resources.</param>
            <param name="clients">The clients.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Processes the response.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessClientCredentialsRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for a client credentials request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessPasswordRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for a password request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessAuthorizationCodeRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for an authorization code request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Client does not exist anymore.</exception>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessRefreshTokenRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for a refresh token request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessDeviceCodeRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Processes the response for device code grant request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessCibaRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Processes the response for CIBA request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessExtensionGrantRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for an extension grant request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessTokenRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates a response for a token request containing an access token and a
            refresh token if requested.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.CreateAccessTokenAsync(Duende.IdentityServer.Validation.ValidatedTokenRequest)">
            <summary>
            Creates the access/refresh token.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Client does not exist anymore.</exception>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.CreateIdTokenFromRefreshTokenRequestAsync(Duende.IdentityServer.Validation.ValidatedTokenRequest,System.String)">
            <summary>
            Creates an id_token for a refresh token request if identity resources have been requested.
            </summary>
            <param name="request">The request.</param>
            <param name="newAccessToken">The new access token.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator">
            <summary>
            Default revocation response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.ITokenRevocationResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.ReferenceTokenStore">
            <summary>
            Gets the reference token store.
            </summary>
            <value>
            The reference token store.
            </value>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.RefreshTokenStore">
            <summary>
            Gets the refresh token store.
            </summary>
            <value>
            The refresh token store.
            </value>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.#ctor(Duende.IdentityServer.Stores.IReferenceTokenStore,Duende.IdentityServer.Stores.IRefreshTokenStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator" /> class.
            </summary>
            <param name="referenceTokenStore">The reference token store.</param>
            <param name="refreshTokenStore">The refresh token store.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult)">
            <summary>
            Creates the revocation endpoint response and processes the revocation request.
            </summary>
            <param name="validationResult">The userinfo request validation result.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.RevokeAccessTokenAsync(Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult)">
            <summary>
            Revoke access token only if it belongs to client doing the request.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.RevokeRefreshTokenAsync(Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult)">
            <summary>
            Revoke refresh token only if it belongs to client doing the request
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator">
            <summary>
            The userinfo response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IUserInfoResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.Profile">
            <summary>
            The profile service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.Resources">
            <summary>
            The resource store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.#ctor(Duende.IdentityServer.Services.IProfileService,Duende.IdentityServer.Stores.IResourceStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="resourceStore">The resource store.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.UserInfoRequestValidationResult)">
            <summary>
            Creates the response.
            </summary>
            <param name="validationResult">The userinfo request validation result.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Profile service returned incorrect subject value</exception>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.GetRequestedResourcesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Gets the identity resources from the scopes.
            </summary>
            <param name="scopes"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.GetRequestedClaimTypesAsync(Duende.IdentityServer.Validation.ResourceValidationResult)">
            <summary>
            Gets the requested claim types.
            </summary>
            <param name="resourceValidationResult"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IAuthorizeInteractionResponseGenerator">
            <summary>
            Interface for determining if user must login or consent when making requests to the authorization endpoint.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IAuthorizeInteractionResponseGenerator.ProcessInteractionAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,Duende.IdentityServer.Models.ConsentResponse)">
            <summary>
            Processes the interaction logic.
            </summary>
            <param name="request">The request.</param>
            <param name="consent">The consent.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IAuthorizeResponseGenerator">
            <summary>
            Interface for the authorize response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IAuthorizeResponseGenerator.CreateResponseAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Creates the response
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IBackchannelAuthenticationResponseGenerator">
            <summary>
            Interface the backchannel authentication response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IBackchannelAuthenticationResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.BackchannelAuthenticationRequestValidationResult)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IDeviceAuthorizationResponseGenerator">
            <summary>
            Interface for the device authorization response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IDeviceAuthorizationResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult,System.String)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <param name="baseUrl">The base URL.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IDiscoveryResponseGenerator">
            <summary>
            Interface for discovery endpoint response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IDiscoveryResponseGenerator.CreateDiscoveryDocumentAsync(System.String,System.String)">
            <summary>
            Creates the discovery document.
            </summary>
            <param name="baseUrl">The base URL.</param>
            <param name="issuerUri">The issuer URI.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IDiscoveryResponseGenerator.CreateJwkDocumentAsync">
            <summary>
            Creates the JWK document.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IIntrospectionResponseGenerator">
            <summary>
            Interface for introspection response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IIntrospectionResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.IntrospectionRequestValidationResult)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IPushedAuthorizationResponseGenerator">
            <summary>
            Service that generates response models for the pushed authorization endpoint. This service encapsulates the behavior that
            is needed to create a response model from a validated request. 
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IPushedAuthorizationResponseGenerator.CreateResponseAsync(Duende.IdentityServer.Validation.ValidatedPushedAuthorizationRequest)">
            <summary>
            Asynchronously creates a response model from a validated pushed authorization request.
            </summary>
            <param name="request">The validated pushed authorization request.</param>
            <returns>A task that contains response model indicating either success or failure.</returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.ITokenResponseGenerator">
            <summary>
            Interface the token response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.ITokenResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.ITokenRevocationResponseGenerator">
            <summary>
            Interface for the userinfo response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.ITokenRevocationResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult)">
            <summary>
            Creates the revocation endpoint response and processes the revocation request.
            </summary>
            <param name="validationResult">The userinfo request validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IUserInfoResponseGenerator">
            <summary>
            Interface for the userinfo response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IUserInfoResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.UserInfoRequestValidationResult)">
            <summary>
            Creates the response.
            </summary>
            <param name="validationResult">The userinfo request validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse">
            <summary>
            Models a backchannel authentication response
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="error"></param>
            <param name="errorDescription"></param>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse.IsError">
            <summary>
            Indicates if this response represents an error.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse.AuthenticationRequestId">
            <summary>
            Gets or sets the authentication request id.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse.ExpiresIn">
            <summary>
            Gets or sets the expires in.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse.Interval">
            <summary>
            Gets or sets the interval.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.BackchannelAuthenticationResponse.Custom">
            <summary> 
            Gets or sets a dictionary of custom properties that will be included in
            the response to the client. This dictionary is intended to be used to
            implement extensions to CIBA that defines additional response
            parameters.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.InteractionResponseType">
            <summary>
            Models the types of interaction results from the IAuthorizeInteractionResponseGenerator
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.InteractionResponseType.None">
            <summary>
            No interaction response, so a success result should be returned to the client
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.InteractionResponseType.Error">
            <summary>
            Error of some sort. Depending on error, it will be shown to the user, or returned to the client.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.InteractionResponseType.UserInteraction">
            <summary>
            Some sort of user interaction is required, such as login, consent, or something else.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.InteractionResponse">
            <summary>
            Indicates interaction outcome for user on authorization endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.ResponseType">
            <summary>
            The interaction response type.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.IsLogin">
            <summary>
            Gets or sets a value indicating whether the user must login.
            </summary>
            <value>
              <c>true</c> if this instance is login; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.IsConsent">
            <summary>
            Gets or sets a value indicating whether the user must consent.
            </summary>
            <value>
            <c>true</c> if this instance is consent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.IsCreateAccount">
            <summary>
            Gets or sets a value indicating whether the user must create an account.
            </summary>
            <value>
            <c>true</c> if this instance is create an account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.IsError">
            <summary>
            Gets a value indicating whether the result is an error.
            </summary>
            <value>
              <c>true</c> if this instance is error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.IsRedirect">
            <summary>
            Gets a value indicating whether the user must be redirected to a custom page.
            </summary>
            <value>
            <c>true</c> if this instance is redirect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.RedirectUrl">
            <summary>
            Gets or sets the URL for the custom page.
            </summary>
            <value>
            The redirect URL.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.PushedAuthorizationResponse">
            <summary>
            Base class for responses from the pushed authorization endpoint.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.PushedAuthorizationFailure">
            <summary>
            Represents failure from the pushed authorization endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.PushedAuthorizationFailure.Error">
            <summary>
            The error code, as specified by RFC 9126, etc.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.PushedAuthorizationFailure.ErrorDescription">
            <summary>
            The error description: "human-readable ASCII text providing
            additional information, used to assist the client developer in
            understanding the error that occurred."
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.PushedAuthorizationSuccess">
            <summary>
            Represents success from the pushed authorization endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.PushedAuthorizationSuccess.RequestUri">
            <summary>
            The request uri for the pushed request, in the format urn:ietf:params:oauth:request_uri:{ReferenceValue}.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.PushedAuthorizationSuccess.ExpiresIn">
            <summary>
            The number of seconds from now that the pushed request will expire.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.TokenErrorResponse">
            <summary>
            Models a token error response
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenErrorResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenErrorResponse.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenErrorResponse.DPoPNonce">
            <summary>
            The DPoP nonce header to emit.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenErrorResponse.Custom">
            <summary>
            Gets or sets the custom entries.
            </summary>
            <value>
            The custom.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.TokenResponse">
            <summary>
            Models a token response
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.AccessTokenType">
            <summary>
            The type of access token, used to populate the token_type response parameter.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.IdentityToken">
            <summary>
            Gets or sets the identity token.
            </summary>
            <value>
            The identity token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>
            The access token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.AccessTokenLifetime">
            <summary>
            Gets or sets the access token lifetime in seconds.
            </summary>
            <value>
            The access token lifetime in seconds.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.RefreshToken">
            <summary>
            Gets or sets the refresh token.
            </summary>
            <value>
            The refresh token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.Scope">
            <summary>
            Gets or sets the scope.
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.DPoPNonce">
            <summary>
            The DPoP nonce header to emit.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.Custom">
            <summary>
            Gets or sets the custom entries.
            </summary>
            <value>
            The custom entries.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.TokenRevocationResponse">
            <summary>
            Models a token revocation response
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenRevocationResponse.Success">
            <summary>
            Gets or sets a value indicating whether the token revocation was successful.
            </summary>
            <value>
              <c>true</c> if success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenRevocationResponse.TokenType">
            <summary>
            Gets or sets the type of the token that was revoked.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenRevocationResponse.Error">
            <summary>
            Gets or sets an error (if present).
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultBackChannelLogoutHttpClient">
            <summary>
            Models making HTTP requests for back-channel logout notification.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutHttpClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,Duende.IdentityServer.Services.ICancellationTokenProvider)">
            <summary>
            Constructor for BackChannelLogoutHttpClient.
            </summary>
            <param name="client"></param>
            <param name="loggerFactory"></param>
            <param name="cancellationTokenProvider"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutHttpClient.PostAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the payload to the url.
            </summary>
            <param name="url"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultBackchannelAuthenticationInteractionService">
            <summary>
            Default implementation of IBackchannelAuthenticationInteractionService.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackchannelAuthenticationInteractionService.#ctor(Duende.IdentityServer.Stores.IBackChannelAuthenticationRequestStore,Duende.IdentityServer.Stores.IClientStore,Duende.IdentityServer.Services.IUserSession,Duende.IdentityServer.Validation.IResourceValidator,Duende.IdentityServer.IClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultBackchannelAuthenticationInteractionService})">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackchannelAuthenticationInteractionService.GetLoginRequestByInternalIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackchannelAuthenticationInteractionService.GetPendingLoginRequestsForCurrentUserAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackchannelAuthenticationInteractionService.CompleteLoginRequestAsync(Duende.IdentityServer.Services.CompleteBackchannelLoginRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultBackChannelLogoutService">
            <summary>
            Default back-channel logout notification implementation.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.DefaultLogoutTokenLifetime">
            <summary>
            Default value for the back-channel JWT lifetime.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.Clock">
            <summary>
            The system clock;
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.Tools">
            <summary>
            The IdentityServerTools used to create the JWT.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.LogoutNotificationService">
            <summary>
            The ILogoutNotificationService to build the back channel logout requests.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.HttpClient">
            <summary>
            HttpClient to make the outbound HTTP calls.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.IssuerNameService">
            <summary>
            Ths issuer name service.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.#ctor(Duende.IdentityServer.IClock,Duende.IdentityServer.IIdentityServerTools,Duende.IdentityServer.Services.ILogoutNotificationService,Duende.IdentityServer.Services.IBackChannelLogoutHttpClient,Duende.IdentityServer.Services.IIssuerNameService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.IBackChannelLogoutService})">
            <summary>
            Constructor.
            </summary>
            <param name="clock"></param>
            <param name="tools"></param>
            <param name="logoutNotificationService"></param>
            <param name="backChannelLogoutHttpClient"></param>
            <param name="issuerNameService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.SendLogoutNotificationsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.SendLogoutNotificationsAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.BackChannelLogoutRequest})">
            <summary>
            Sends the logout notifications for the collection of clients.
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.SendLogoutNotificationAsync(Duende.IdentityServer.Services.BackChannelLogoutRequest)">
            <summary>
            Performs the back-channel logout for a single client.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.PostLogoutJwt(Duende.IdentityServer.Services.BackChannelLogoutRequest,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs the HTTP POST of the logout payload to the client.
            </summary>
            <param name="client"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.CreateFormPostPayloadAsync(Duende.IdentityServer.Services.BackChannelLogoutRequest)">
            <summary>
            Creates the form-url-encoded payload (as a dictionary) to send to the client.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.CreateTokenAsync(Duende.IdentityServer.Services.BackChannelLogoutRequest)">
            <summary>
            Creates the JWT used for the back-channel logout notification.
            </summary>
            <param name="request"></param>
            <returns>The token.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.CreateClaimsForTokenAsync(Duende.IdentityServer.Services.BackChannelLogoutRequest)">
            <summary>
            Create the claims to be used in the back-channel logout token.
            </summary>
            <param name="request"></param>
            <returns>The claims to include in the token.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultCache`1">
            <summary>
            IMemoryCache-based implementation of the cache
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Duende.IdentityServer.Services.ICache`1" />
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultCache`1.IdentityServerOptions">
            <summary>
            The IdentityServerOptions.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultCache`1.Cache">
            <summary>
            The memory cache.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultCache`1.ConcurrencyLock">
            <summary>
            A lock used for concurrency.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultCache`1.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCache`1.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Caching.Memory.IMemoryCache,Duende.IdentityServer.Internal.IConcurrencyLock{Duende.IdentityServer.Services.DefaultCache{`0}},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultCache{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultCache`1"/> class.
            </summary>
            <param name="identityServerOptions"></param>
            <param name="cache">The cache.</param>
            <param name="concurrencyLock"></param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCache`1.GetKey(System.String)">
            <summary>
            Used to create the key for the cache based on the data type being cached.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCache`1.GetAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCache`1.SetAsync(System.String,`0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCache`1.RemoveAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCache`1.GetOrAddAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{`0}})">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.Default.DefaultCancellationTokenProvider">
            <summary>
            Provides cancellation tokens based on the incoming http request
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultCancellationTokenProvider.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Constructor
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="P:Duende.IdentityServer.Services.Default.DefaultCancellationTokenProvider.CancellationToken">
            <summary>
            Provides access to the cancellation token from the http context
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService">
            <summary>
            Default wrapper service for IDeviceFlowStore, handling key hashing
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IDeviceFlowCodeService" />
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.#ctor(Duende.IdentityServer.Stores.IDeviceFlowStore,Duende.IdentityServer.Services.IHandleGenerationService)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="handleGenerationService">The handle generation service.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.StoreDeviceAuthorizationAsync(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Stores the device authorization request.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.FindByUserCodeAsync(System.String)">
            <summary>
            Finds device authorization by user code.
            </summary>
            <param name="userCode">The user code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.FindByDeviceCodeAsync(System.String)">
            <summary>
            Finds device authorization by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.UpdateByUserCodeAsync(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Updates device authorization, searching by user code.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.RemoveByDeviceCodeAsync(System.String)">
            <summary>
            Removes the device authorization, searching by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultClaimsService">
            <summary>
            Default claims provider implementation
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultClaimsService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultClaimsService.Profile">
            <summary>
            The user service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.#ctor(Duende.IdentityServer.Services.IProfileService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultClaimsService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultClaimsService"/> class.
            </summary>
            <param name="profile">The profile service</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.GetIdentityTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Validation.ResourceValidationResult,System.Boolean,Duende.IdentityServer.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token
            </summary>
            <param name="subject">The subject</param>
            <param name="resources">The requested resources</param>
            <param name="includeAllIdentityClaims">Specifies if all claims should be included in the token, or if the userinfo endpoint can be used to retrieve them</param>
            <param name="request">The raw request</param>
            <returns>
            Claims for the identity token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.GetAccessTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Validation.ResourceValidationResult,Duende.IdentityServer.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an access token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="resourceResult">The validated resource result</param>
            <param name="request">The raw request.</param>
            <returns>
            Claims for the access token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.GetStandardSubjectClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the standard subject claims.
            </summary>
            <param name="subject">The subject.</param>
            <returns>A list of standard claims</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.GetOptionalClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets additional (and optional) claims from the cookie or incoming subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>Additional claims</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.FilterProtocolClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Filters out protocol claims like amr, nonce etc..
            </summary>
            <param name="claims">The claims.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.FilterRequestedClaimTypes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters out protocol claims like amr, nonce etc..
            </summary>
            <param name="claimTypes">The claim types.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultConsentService">
            <summary>
            Default consent service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultConsentService.UserConsentStore">
            <summary>
            The user consent store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultConsentService.Clock">
            <summary>
             The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultConsentService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultConsentService.#ctor(Duende.IdentityServer.IClock,Duende.IdentityServer.Stores.IUserConsentStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultConsentService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultConsentService" /> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="userConsentStore">The user consent store.</param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentNullException">store</exception>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultConsentService.RequiresConsentAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ParsedScopeValue})">
            <summary>
            Checks if consent is required.
            </summary>
            <param name="subject">The user.</param>
            <param name="client">The client.</param>
            <param name="parsedScopes">The parsed scopes.</param>
            <returns>
            Boolean if consent is required.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            client
            or
            subject
            </exception>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultConsentService.UpdateConsentAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ParsedScopeValue})">
            <summary>
            Updates the consent asynchronous.
            </summary>
            <param name="client">The client.</param>
            <param name="subject">The subject.</param>
            <param name="parsedScopes">The parsed scopes.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            client
            or
            subject
            </exception>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultCorsPolicyService">
            <summary>
            Default CORS policy service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultCorsPolicyService.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCorsPolicyService.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultCorsPolicyService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultCorsPolicyService"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultCorsPolicyService.AllowedOrigins">
            <summary>
            The list allowed origins that are allowed.
            </summary>
            <value>
            The allowed origins.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultCorsPolicyService.AllowAll">
            <summary>
            Gets or sets a value indicating whether all origins are allowed.
            </summary>
            <value>
              <c>true</c> if allow all; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCorsPolicyService.IsOriginAllowedAsync(System.String)">
            <summary>
            Determines whether the origin allowed.
            </summary>
            <param name="origin">The origin.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultEventSink">
            <summary>
            Default implementation of the event service. Write events raised to the log.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultEventSink._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultEventSink.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Events.DefaultEventService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultEventSink"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultEventSink.PersistAsync(Duende.IdentityServer.Events.Event)">
            <summary>
            Raises the specified event.
            </summary>
            <param name="evt">The event.</param>
            <exception cref="T:System.ArgumentNullException">evt</exception>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultHandleGenerationService">
            <summary>
            Default handle generation service
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IHandleGenerationService" />
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultHandleGenerationService.GenerateAsync(System.Int32)">
            <summary>
            Generates a handle.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultIssuerNameService">
            <summary>
            Abstracts issuer name access
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultIssuerNameService.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Services.IServerUrls,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            ctor
            </summary>
            <param name="options"></param>
            <param name="urls"></param>
            <param name="httpContextAccessor">The HTTP context accessor</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultIssuerNameService.GetCurrentAsync">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultJwtRequestUriHttpClient">
            <summary>
            Default JwtRequest client
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultJwtRequestUriHttpClient.#ctor(System.Net.Http.HttpClient,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILoggerFactory,Duende.IdentityServer.Services.ICancellationTokenProvider)">
            <summary>
            ctor
            </summary>
            <param name="client">An HTTP client</param>
            <param name="options">The options.</param>
            <param name="loggerFactory">The logger factory</param>
            <param name="cancellationTokenProvider"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultJwtRequestUriHttpClient.GetJwtAsync(System.String,Duende.IdentityServer.Models.Client)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultKeyMaterialService">
            <summary>
            The default key material service
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IKeyMaterialService" />
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultKeyMaterialService.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Stores.IValidationKeysStore},System.Collections.Generic.IEnumerable{Duende.IdentityServer.Stores.ISigningCredentialStore},Duende.IdentityServer.Services.KeyManagement.IAutomaticKeyManagerKeyStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultKeyMaterialService"/> class.
            </summary>
            <param name="validationKeysStores">The validation keys stores.</param>
            <param name="signingCredentialStores">The signing credential store.</param>
            <param name="keyManagerKeyStore">The store for automatic key management.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultKeyMaterialService.GetSigningCredentialsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultKeyMaterialService.GetAllSigningCredentialsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultKeyMaterialService.GetValidationKeysAsync">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultPersistedGrantService">
            <summary>
            Default persisted grant service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultPersistedGrantService.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultPersistedGrantService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultPersistedGrantService"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultPersistedGrantService.GetAllGrantsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultPersistedGrantService.RemoveAllGrantsAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultProfileService">
            <summary>
            Default profile service implementation.
            This implementation sources all claims from the current subject (e.g. the cookie).
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IProfileService" />
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultProfileService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultProfileService.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultProfileService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultProfileService"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultProfileService.GetProfileDataAsync(Duende.IdentityServer.Models.ProfileDataRequestContext)">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultProfileService.IsActiveAsync(Duende.IdentityServer.Models.IsActiveContext)">
            <summary>
            This method gets called whenever identity server needs to determine if the user is valid or active (e.g. if the user's account has been deactivated since they logged in).
            (e.g. during token issuance or validation).
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultRefreshTokenService">
            <summary>
            Default refresh token service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultRefreshTokenService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultRefreshTokenService.RefreshTokenStore">
            <summary>
            The refresh token store
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultRefreshTokenService.Profile">
            <summary>
            The profile service
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultRefreshTokenService.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultRefreshTokenService.Options">
            <summary>
            The persistent grant options
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultRefreshTokenService.#ctor(Duende.IdentityServer.Stores.IRefreshTokenStore,Duende.IdentityServer.Services.IProfileService,Duende.IdentityServer.IClock,Duende.IdentityServer.Stores.Serialization.PersistentGrantOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultRefreshTokenService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultRefreshTokenService" /> class.
            </summary>
            <param name="refreshTokenStore">The refresh token store</param>
            <param name="profile"></param>
            <param name="clock">The clock</param>
            <param name="options">The persistent grant options</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultRefreshTokenService.ValidateRefreshTokenAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Validates a refresh token
            </summary>
            <param name="tokenHandle">The token handle.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultRefreshTokenService.AcceptConsumedTokenAsync(Duende.IdentityServer.Models.RefreshToken)">
            <summary>
            Callback to decide if an already consumed token should be accepted.
            </summary>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultRefreshTokenService.CreateRefreshTokenAsync(Duende.IdentityServer.Models.RefreshTokenCreationRequest)">
            <summary>
            Creates the refresh token.
            </summary>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultRefreshTokenService.UpdateRefreshTokenAsync(Duende.IdentityServer.Models.RefreshTokenUpdateRequest)">
            <summary>
            Updates the refresh token.
            </summary>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultReplayCache">
            <summary>
            Default implementation of the replay cache using IDistributedCache
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultReplayCache.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            ctor
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultReplayCache.AddAsync(System.String,System.String,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultReplayCache.ExistsAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultServerUrls">
            <summary>
            Implements IServerUrls
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultServerUrls.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultServerUrls.Origin">
            <inheritdoc/>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultServerUrls.BasePath">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultSessionCoordinationService">
            <summary>
            Default session coordination service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultSessionCoordinationService.Options">
            <summary>
            The options.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultSessionCoordinationService.PersistedGrantStore">
            <summary>
            The persisted grant store.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultSessionCoordinationService.ClientStore">
            <summary>
            The client store.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultSessionCoordinationService.BackChannelLogoutService">
            <summary>
            The back-channel logout service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultSessionCoordinationService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultSessionCoordinationService.ServerSideSessionStore">
            <summary>
            The server-side session store (if configured).
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultSessionCoordinationService.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.IClientStore,Duende.IdentityServer.Services.IBackChannelLogoutService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultSessionCoordinationService},Duende.IdentityServer.Stores.IServerSideSessionStore)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultSessionCoordinationService.PersistedGrantTokenTypes">
            <summary>
            The persisted grants that are token types.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultSessionCoordinationService.ProcessLogoutAsync(Duende.IdentityServer.Models.UserSession)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultSessionCoordinationService.ProcessExpirationAsync(Duende.IdentityServer.Models.UserSession)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultSessionCoordinationService.ValidateSessionAsync(Duende.IdentityServer.Services.SessionValidationRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultSessionManagementService">
            <summary>
            Default session management service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultSessionManagementService.#ctor(Duende.IdentityServer.Stores.IServerSideTicketStore,Duende.IdentityServer.Stores.IServerSideSessionStore,Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Services.IBackChannelLogoutService)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultSessionManagementService.QuerySessionsAsync(Duende.IdentityServer.Stores.SessionQuery,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultSessionManagementService.RemoveSessionsAsync(Duende.IdentityServer.Services.RemoveSessionsContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultTokenCreationService">
            <summary>
            Default token creation service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenCreationService.Keys">
            <summary>
            The key service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenCreationService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenCreationService.Clock">
            <summary>
             The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenCreationService.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenCreationService.#ctor(Duende.IdentityServer.IClock,Duende.IdentityServer.Services.IKeyMaterialService,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultTokenCreationService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultTokenCreationService"/> class.
            </summary>
            <param name="clock">The options.</param>
            <param name="keys">The keys.</param>
            <param name="options">The options.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenCreationService.CreateTokenAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates the token.
            </summary>
            <param name="token">The token.</param>
            <returns>
            A protected and serialized security token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenCreationService.CreatePayloadAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates the JWT payload
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenCreationService.CreateHeaderElementsAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates additional JWT header elements
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenCreationService.CreateJwtAsync(Duende.IdentityServer.Models.Token,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates JWT token
            </summary>
            <param name="token"></param>
            <param name="payload"></param>
            <param name="headerElements"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultTokenService">
            <summary>
            Default token service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.ClaimsProvider">
            <summary>
            The claims provider
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.ReferenceTokenStore">
            <summary>
            The reference token store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.CreationService">
            <summary>
            The signing service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.KeyMaterialService">
            <summary>
            The key material service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.Options">
            <summary>
            The IdentityServer options
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenService.#ctor(Duende.IdentityServer.Services.IClaimsService,Duende.IdentityServer.Stores.IReferenceTokenStore,Duende.IdentityServer.Services.ITokenCreationService,Duende.IdentityServer.IClock,Duende.IdentityServer.Services.IKeyMaterialService,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultTokenService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultTokenService" /> class.
            </summary>
            <param name="claimsProvider">The claims provider.</param>
            <param name="referenceTokenStore">The reference token store.</param>
            <param name="creationService">The signing service.</param>
            <param name="clock">The clock.</param>
            <param name="keyMaterialService"></param>
            <param name="options">The IdentityServer options</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenService.CreateIdentityTokenAsync(Duende.IdentityServer.Models.TokenCreationRequest)">
            <summary>
            Creates an identity token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>
            An identity token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenService.CreateAccessTokenAsync(Duende.IdentityServer.Models.TokenCreationRequest)">
            <summary>
            Creates an access token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>
            An access token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenService.CreateSecurityTokenAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates a serialized and protected security token.
            </summary>
            <param name="token">The token.</param>
            <returns>
            A security token in serialized form
            </returns>
            <exception cref="T:System.InvalidOperationException">Invalid token type.</exception>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultUserCodeService">
            <summary>
            Default user code service implementation.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IUserCodeService" />
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserCodeService.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.IUserCodeGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultUserCodeService"/> class.
            </summary>
            <param name="generators">The generators.</param>
            <exception cref="T:System.ArgumentNullException">generators</exception>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserCodeService.GetGenerator(System.String)">
            <summary>
            Gets the user code generator.
            </summary>
            <param name="userCodeType">Type of user code.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultUserSession">
            <summary>
            Cookie-based session implementation
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IUserSession" />
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.HttpContextAccessor">
            <summary>
            The HTTP context accessor
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Handlers">
            <summary>
            The handlers
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Urls">
            <summary>
            The server URL service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultUserSession.HttpContext">
            <summary>
            Gets the HTTP context.
            </summary>
            <value>
            The HTTP context.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultUserSession.CheckSessionCookieName">
            <summary>
            Gets the name of the check session cookie.
            </summary>
            <value>
            The name of the check session cookie.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultUserSession.CheckSessionCookieDomain">
            <summary>
            Gets the domain of the check session cookie.
            </summary>
            <value>
            The domain of the check session cookie.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultUserSession.CheckSessionCookieSameSiteMode">
            <summary>
            Gets the SameSite mode of the check session cookie.
            </summary>
            <value>
            The SameSite mode of the check session cookie.
            </value>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Principal">
            <summary>
            The principal
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider,Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.IClock,Duende.IdentityServer.Services.IServerUrls,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.IUserSession})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultUserSession"/> class.
            </summary>
            <param name="httpContextAccessor">The HTTP context accessor.</param>
            <param name="handlers">The handlers.</param>
            <param name="options">The options.</param>
            <param name="clock">The clock.</param>
            <param name="urls"></param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.AuthenticateAsync">
            <summary>
            Authenticates the authentication cookie for the current HTTP request and caches the user and properties results.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.CreateSessionIdAsync(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Creates a session identifier for the signin context and issues the session id cookie.
            </summary>
            <param name="principal"></param>
            <param name="properties"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            principal
            or
            properties
            </exception>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.GetUserAsync">
            <summary>
            Gets the current authenticated user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.GetSessionIdAsync">
            <summary>
            Gets the current session identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.EnsureSessionIdCookieAsync">
            <summary>
            Ensures the session identifier cookie is synchronized with the current
            session identifier. If there is no sid, the cookie is removed. If there
            is a sid, and the session identifier cookie is missing, it is issued. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.RemoveSessionIdCookieAsync">
            <summary>
            Removes the session identifier cookie.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.CreateSessionIdCookieOptions">
            <summary>
            Creates the options for the session cookie.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.IssueSessionIdCookie(System.String)">
            <summary>
            Issues the cookie that contains the session id.
            </summary>
            <param name="sid"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.AddClientIdAsync(System.String)">
            <summary>
            Adds a client to the list of clients the user has signed into during their session.
            </summary>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">clientId</exception>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.GetClientListAsync">
            <summary>
            Gets the list of clients the user has signed into during their session.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DistributedBackchannelAuthenticationThrottlingService">
            <summary>
            Implementation of IBackchannelAuthenticationThrottlingService that uses the IDistributedCache.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DistributedBackchannelAuthenticationThrottlingService.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Duende.IdentityServer.Stores.IClientStore,Duende.IdentityServer.IClock,Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DistributedBackchannelAuthenticationThrottlingService.ShouldSlowDown(System.String,Duende.IdentityServer.Models.BackChannelAuthenticationRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.DistributedDeviceFlowThrottlingService">
            <summary>
            The default device flow throttling service using IDistributedCache.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IDeviceFlowThrottlingService" />
        </member>
        <member name="M:Duende.IdentityServer.Services.DistributedDeviceFlowThrottlingService.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Duende.IdentityServer.Stores.IClientStore,Duende.IdentityServer.IClock,Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DistributedDeviceFlowThrottlingService"/> class.
            </summary>
            <param name="cache">The cache.</param>
            <param name="clientStore"></param>
            <param name="clock">The clock.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DistributedDeviceFlowThrottlingService.ShouldSlowDown(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Decides if the requesting client and device code needs to slow down.
            </summary>
            <param name="deviceCode">The device code.</param>
            <param name="details">The device code details.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">deviceCode</exception>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.IAutomaticKeyManagerKeyStore">
            <summary>
            Store abstraction for automatic key management.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.IAutomaticKeyManagerKeyStore.GetAllSigningCredentialsAsync">
            <summary>
            Gets all the signing credentials.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.NopAutomaticKeyManagerKeyStore">
            <summary>
            Empty implementation of IAutomaticKeyManagerKeyStore (for testing).
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopAutomaticKeyManagerKeyStore.GetSigningCredentialsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopAutomaticKeyManagerKeyStore.GetAllSigningCredentialsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopAutomaticKeyManagerKeyStore.GetValidationKeysAsync">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.AutomaticKeyManagerKeyStore">
            <summary>
            Implementation of IValidationKeysStore and ISigningCredentialStore based on KeyManager.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.AutomaticKeyManagerKeyStore.#ctor(Duende.IdentityServer.Services.KeyManagement.IKeyManager,Duende.IdentityServer.Configuration.KeyManagementOptions)">
            <summary>
            Constructor for KeyManagerKeyStore.
            </summary>
            <param name="keyManager"></param>
            <param name="options"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.AutomaticKeyManagerKeyStore.GetSigningCredentialsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.AutomaticKeyManagerKeyStore.GetAllSigningCredentialsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.AutomaticKeyManagerKeyStore.GetValidationKeysAsync">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.ClientConfigurationValidator">
            <summary>
            Client configuration validator that ensures access token lifetimes are compatible with the key management options.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ClientConfigurationValidator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Configuration.KeyManagementOptions)">
            <summary>
            Ctor
            </summary>
            <param name="isOptions"></param>
            <param name="keyManagerOptions"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ClientConfigurationValidator.ValidateLifetimesAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.DataProtectionKeyProtector">
            <summary>
            Implementation of IKeyProtector based on ASP.NET Core's data protection feature.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.DataProtectionKeyProtector.#ctor(Duende.IdentityServer.Configuration.KeyManagementOptions,Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)">
            <summary>
            Constructor for DataProtectionKeyProtector.
            </summary>
            <param name="options"></param>
            <param name="dataProtectionProvider"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.DataProtectionKeyProtector.Protect(Duende.IdentityServer.Services.KeyManagement.KeyContainer)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.DataProtectionKeyProtector.Unprotect(Duende.IdentityServer.Models.SerializedKey)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.EcKeyContainer">
            <summary>
            Container class for ECDsaSecurityKey.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.EcKeyContainer.#ctor">
            <summary>
            Constructor for EcKeyContainer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.EcKeyContainer.#ctor(Microsoft.IdentityModel.Tokens.ECDsaSecurityKey,System.String,System.DateTime)">
            <summary>
            Constructor for EcKeyContainer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.EcKeyContainer.D">
            <summary>
            Private key for EC key
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.EcKeyContainer.Q">
            <summary>
            Public key for EC key
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.EcKeyContainer.ToSecurityKey">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore">
            <summary>
            Implementation of ISigningKeyStore based on file system.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore.#ctor(System.String,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore})">
            <summary>
            Constructor for FileSystemKeyStore.
            </summary>
            <param name="path"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore.#ctor(System.IO.DirectoryInfo,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore})">
            <summary>
            Constructor for FileSystemKeyStore.
            </summary>
            <param name="directory"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore.LoadKeysAsync">
            <summary>
            Returns all the keys in storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore.StoreKeyAsync(Duende.IdentityServer.Models.SerializedKey)">
            <summary>
            Persists new key in storage.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore.DeleteKeyAsync(System.String)">
            <summary>
            Deletes key from storage.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.IKeyManager">
            <summary>
            Interface to model loading the keys.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.IKeyManager.GetCurrentKeysAsync">
            <summary>
            Returns the current signing keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.IKeyManager.GetAllKeysAsync">
            <summary>
            Returns all the validation keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.ISigningKeyProtector">
            <summary>
            Interface to model protecting/unprotecting RsaKeyContainer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ISigningKeyProtector.Protect(Duende.IdentityServer.Services.KeyManagement.KeyContainer)">
            <summary>
            Protects KeyContainer.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ISigningKeyProtector.Unprotect(Duende.IdentityServer.Models.SerializedKey)">
            <summary>
            Unprotects KeyContainer.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.ISigningKeyStoreCache">
            <summary>
            Interface to model caching keys loaded from key store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ISigningKeyStoreCache.GetKeysAsync">
            <summary>
            Returns cached keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ISigningKeyStoreCache.StoreKeysAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.KeyManagement.KeyContainer},System.TimeSpan)">
            <summary>
            Caches keys for duration.
            </summary>
            <param name="keys"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.InMemoryKeyStoreCache">
            <summary>
            In-memory implementation of ISigningKeyStoreCache based on static variables. This expects to be used as a singleton.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.InMemoryKeyStoreCache.#ctor(Duende.IdentityServer.IClock)">
            <summary>
            Constructor for InMemoryKeyStoreCache.
            </summary>
            <param name="clock"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.InMemoryKeyStoreCache.GetKeysAsync">
            <summary>
            Returns cached keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.InMemoryKeyStoreCache.StoreKeysAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.KeyManagement.KeyContainer},System.TimeSpan)">
            <summary>
            Caches keys for duration.
            </summary>
            <param name="keys"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.KeyContainer">
            <summary>
            Container class for key.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyContainer.#ctor">
            <summary>
            Constructor for KeyContainer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyContainer.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Constructor for RsaKeyContainer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.KeyContainer.Id">
            <summary>
            Key identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.KeyContainer.Algorithm">
            <summary>
            The algorithm this key supports.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.KeyContainer.HasX509Certificate">
            <summary>
            Indicates if key is contained in X509 certificate.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.KeyContainer.Created">
            <summary>
            Date key was created.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyContainer.ToSecurityKey">
            <summary>
            Creates AsymmetricSecurityKey.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.KeyManager">
            <summary>
            Implementation of IKeyManager that creates, stores, and rotates signing keys.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyManager.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Stores.ISigningKeyStore,Duende.IdentityServer.Services.KeyManagement.ISigningKeyStoreCache,Duende.IdentityServer.Services.KeyManagement.ISigningKeyProtector,Duende.IdentityServer.IClock,Duende.IdentityServer.Internal.IConcurrencyLock{Duende.IdentityServer.Services.KeyManagement.KeyManager},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.KeyManagement.KeyManager},Duende.IdentityServer.Services.IIssuerNameService)">
            <summary>
            Constructor for KeyManager
            </summary>
            <param name="options"></param>
            <param name="store"></param>
            <param name="cache"></param>
            <param name="protector"></param>
            <param name="clock"></param>
            <param name="newKeyLock"></param>
            <param name="logger"></param>
            <param name="issuerNameService"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyManager.GetCurrentKeysAsync">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyManager.GetAllKeysAsync">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.NopKeyStoreCache">
            <summary>
            Nop implementation of ISigningKeyStoreCache that does not cache keys.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopKeyStoreCache.GetKeysAsync">
            <summary>
            Returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopKeyStoreCache.StoreKeysAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.KeyManagement.KeyContainer},System.TimeSpan)">
            <summary>
            Does not cache keys.
            </summary>
            <param name="keys"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer">
            <summary>
            Container class for RsaSecurityKey.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer.#ctor">
            <summary>
            Constructor for RsaKeyContainer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer.#ctor(Microsoft.IdentityModel.Tokens.RsaSecurityKey,System.String,System.DateTime)">
            <summary>
            Constructor for RsaKeyContainer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer.Parameters">
            <summary>
            The RSAParameters.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer.ToSecurityKey">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer">
            <summary>
            Container class for X509 keys.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer.#ctor">
            <summary>
            Constructor for X509KeyContainer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer.#ctor(Microsoft.IdentityModel.Tokens.RsaSecurityKey,System.String,System.DateTime,System.TimeSpan,System.String)">
            <summary>
            Constructor for X509KeyContainer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer.#ctor(Microsoft.IdentityModel.Tokens.ECDsaSecurityKey,System.String,System.DateTime,System.TimeSpan,System.String)">
            <summary>
            Constructor for X509KeyContainer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer.CertificateRawData">
            <summary>
            The X509 certificate data.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer.ToSecurityKey">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Services.LogoutNotificationService">
            <summary>
            Default implementation of logout notification service.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.LogoutNotificationService.#ctor(Duende.IdentityServer.Stores.IClientStore,Duende.IdentityServer.Services.IIssuerNameService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.LogoutNotificationService})">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.LogoutNotificationService.GetFrontChannelLogoutNotificationsUrlsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.LogoutNotificationService.GetBackChannelLogoutNotificationsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.NopBackchannelAuthenticationUserNotificationService">
            <summary>
            Nop implementation of IUserLoginService.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.NopBackchannelAuthenticationUserNotificationService.#ctor(Duende.IdentityServer.Services.IIssuerNameService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.NopBackchannelAuthenticationUserNotificationService})">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.NopBackchannelAuthenticationUserNotificationService.SendLoginRequestAsync(Duende.IdentityServer.Models.BackchannelUserLoginRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.NumericUserCodeGenerator">
            <summary>
            User code generator using 9 digit number
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IUserCodeGenerator" />
        </member>
        <member name="P:Duende.IdentityServer.Services.NumericUserCodeGenerator.UserCodeType">
            <summary>
            Gets the type of the user code.
            </summary>
            <value>
            The type of the user code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.NumericUserCodeGenerator.RetryLimit">
            <summary>
            Gets the retry limit.
            </summary>
            <value>
            The retry limit for getting a unique value.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Services.NumericUserCodeGenerator.GenerateAsync">
            <summary>
            Generates the user code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.PushedAuthorizationSerializer">
            <summary>
            Default implementation of <see cref="T:Duende.IdentityServer.Services.IPushedAuthorizationSerializer"/>.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.PushedAuthorizationSerializer.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.PushedAuthorizationSerializer"/>. 
            </summary>
            <param name="dataProtectionProvider">The data protection provider.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.PushedAuthorizationSerializer.Deserialize(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Services.PushedAuthorizationSerializer.Serialize(System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Services.PushedAuthorizationService">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Services.PushedAuthorizationService.#ctor(Duende.IdentityServer.Services.IPushedAuthorizationSerializer,Duende.IdentityServer.Stores.IPushedAuthorizationRequestStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.PushedAuthorizationService"/> class. 
            </summary>
            <param name="serializer">The pushed authorization serializer</param>
            <param name="store">The pushed authorization store</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.PushedAuthorizationService.ConsumeAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Services.PushedAuthorizationService.GetPushedAuthorizationRequestAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Services.PushedAuthorizationService.StoreAsync(Duende.IdentityServer.Services.DeserializedPushedAuthorizationRequest)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Services.ReturnUrlParser">
            <summary>
            Parses a return URL using all registered URL parsers
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ReturnUrlParser.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.IReturnUrlParser})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.ReturnUrlParser"/> class.
            </summary>
            <param name="parsers">The parsers.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.ReturnUrlParser.ParseAsync(System.String)">
            <summary>
            Parses the return URL.
            </summary>
            <param name="returnUrl">The return URL.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.ReturnUrlParser.IsValidReturnUrl(System.String)">
            <summary>
            Determines whether a return URL is valid.
            </summary>
            <param name="returnUrl">The return URL.</param>
            <returns>
              <c>true</c> if the return URL is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.ServerSideSessionRefreshTokenService">
            <summary>
            Decorator on the refresh token service to coordinate refresh token lifetimes and server-side sessions.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.ServerSideSessionRefreshTokenService.Inner">
            <summary>
            The inner IRefreshTokenService implementation.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.ServerSideSessionRefreshTokenService.SessionCoordinationService">
            <summary>
            The session coordination service.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ServerSideSessionRefreshTokenService.#ctor(Duende.IdentityServer.Configuration.DependencyInjection.Decorator{Duende.IdentityServer.Services.IRefreshTokenService},Duende.IdentityServer.Services.ISessionCoordinationService)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultRefreshTokenService" /> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ServerSideSessionRefreshTokenService.ValidateRefreshTokenAsync(System.String,Duende.IdentityServer.Models.Client)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.ServerSideSessionRefreshTokenService.CreateRefreshTokenAsync(Duende.IdentityServer.Models.RefreshTokenCreationRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.ServerSideSessionRefreshTokenService.UpdateRefreshTokenAsync(Duende.IdentityServer.Models.RefreshTokenUpdateRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.DeserializedPushedAuthorizationRequest">
            <summary>
            A pushed authorization request that is not serialized.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DeserializedPushedAuthorizationRequest.ReferenceValue">
            <summary>
            The reference value of the pushed authorization request. This is the
            identifier within the request_uri.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DeserializedPushedAuthorizationRequest.PushedParameters">
            <summary>
            The pushed parameters. 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DeserializedPushedAuthorizationRequest.ExpiresAtUtc">
            <summary>
            The expiration time.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.IBackchannelAuthenticationInteractionService">
            <summary>
             Provide services be used by the user interface to communicate with IdentityServer for backchannel authentication requests.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IBackchannelAuthenticationInteractionService.GetPendingLoginRequestsForCurrentUserAsync">
            <summary>
            Returns the pending login requests for the current user.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IBackchannelAuthenticationInteractionService.GetLoginRequestByInternalIdAsync(System.String)">
            <summary>
            Returns the login request for the id.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IBackchannelAuthenticationInteractionService.CompleteLoginRequestAsync(Duende.IdentityServer.Services.CompleteBackchannelLoginRequest)">
            <summary>
            Completes the login request with the provided response for the current user or the subject passed.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.CompleteBackchannelLoginRequest">
            <summary>
            Models the data needed for a user to complete a backchannel authentication request.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.CompleteBackchannelLoginRequest.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.CompleteBackchannelLoginRequest.InternalId">
            <summary>
            The internal store id for the request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.CompleteBackchannelLoginRequest.ScopesValuesConsented">
            <summary>
            Gets or sets the scope values consented to. 
            Setting any scopes grants the login request.
            Leaving the scopes null or empty denies the request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.CompleteBackchannelLoginRequest.Description">
            <summary>
            Gets or sets the optional description to associate with the consent.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.CompleteBackchannelLoginRequest.Subject">
            <summary>
            The subject for which the completion is being made.
            This allows more claims to be associated with the request that was identified on the backchannel authentication request.
            If not provided, then the IUserSession service will be consulting to obtain the current subject.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.CompleteBackchannelLoginRequest.SessionId">
            <summary>
            The session id to associate with the completion request if the Subject is provided.
            If the Subject is not provided, then this property is ignored in favor of the session id provided by the IUserSession service.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.IBackchannelAuthenticationThrottlingService">
            <summary>
            The backchannel authentication throttling service.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IBackchannelAuthenticationThrottlingService.ShouldSlowDown(System.String,Duende.IdentityServer.Models.BackChannelAuthenticationRequest)">
            <summary>
            Decides if the requesting client and request needs to slow down.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.IBackchannelAuthenticationUserNotificationService">
            <summary>
            Interface for sending a user a login request from a backchannel authentication request.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IBackchannelAuthenticationUserNotificationService.SendLoginRequestAsync(Duende.IdentityServer.Models.BackchannelUserLoginRequest)">
            <summary>
            Sends a notification for the user to login.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.IBackChannelLogoutHttpClient">
            <summary>
            Models making HTTP requests for back-channel logout notification.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IBackChannelLogoutHttpClient.PostAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs HTTP POST.
            </summary>
            <param name="url"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IBackChannelLogoutService">
            <summary>
            The service responsible for performing back-channel logout notification.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IBackChannelLogoutService.SendLogoutNotificationsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <summary>
            Performs http back-channel logout notification.
            </summary>
            <param name="context">The context of the back channel logout notification.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.ICache`1">
            <summary>
            Abstract interface to model data caching
            </summary>
            <typeparam name="T">The data type to be cached</typeparam>
        </member>
        <member name="M:Duende.IdentityServer.Services.ICache`1.GetAsync(System.String)">
            <summary>
            Gets the cached data based upon a key index.
            </summary>
            <param name="key">The key.</param>
            <returns>The cached item, or <c>null</c> if no item matches the key.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.ICache`1.GetOrAddAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Gets the cached data based upon a key index.
            If the item is not found, the <c>get</c> function is used to obtain the item and populate the cache.
            </summary>
            <param name="key">The key.</param>
            <param name="duration">The duration.</param>
            <param name="get">The function to obtain the item.</param>
            <returns>The cached item.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.ICache`1.SetAsync(System.String,`0,System.TimeSpan)">
            <summary>
            Caches the data based upon a key
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <param name="expiration">The expiration.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.ICache`1.RemoveAsync(System.String)">
            <summary>
            Removes the cached data based upon a key index.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.IClaimsService">
            <summary>
            The claims service is responsible for determining which claims to include in tokens
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IClaimsService.GetIdentityTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Validation.ResourceValidationResult,System.Boolean,Duende.IdentityServer.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token
            </summary>
            <param name="subject">The subject</param>
            <param name="resources">The resources.</param>
            <param name="includeAllIdentityClaims">Specifies if all claims should be included in the token, or if the userinfo endpoint can be used to retrieve them</param>
            <param name="request">The raw request</param>
            <returns>
            Claims for the identity token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IClaimsService.GetAccessTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Validation.ResourceValidationResult,Duende.IdentityServer.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an access token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="resources">The resources.</param>
            <param name="request">The raw request.</param>
            <returns>
            Claims for the access token
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IConsentService">
            <summary>
            Service to retrieve and update consent.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IConsentService.RequiresConsentAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ParsedScopeValue})">
            <summary>
            Checks if consent is required.
            </summary>
            <param name="subject">The user.</param>
            <param name="client">The client.</param>
            <param name="parsedScopes">The parsed scopes.</param>
            <returns>
            Boolean if consent is required.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IConsentService.UpdateConsentAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ParsedScopeValue})">
            <summary>
            Updates the consent.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <param name="parsedScopes">The parsed scopes.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IDeviceFlowCodeService">
            <summary>
            Wrapper service for IDeviceFlowStore.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowCodeService.StoreDeviceAuthorizationAsync(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Stores the device authorization request.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowCodeService.FindByUserCodeAsync(System.String)">
            <summary>
            Finds device authorization by user code.
            </summary>
            <param name="userCode">The user code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowCodeService.FindByDeviceCodeAsync(System.String)">
            <summary>
            Finds device authorization by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowCodeService.UpdateByUserCodeAsync(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Updates device authorization, searching by user code.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowCodeService.RemoveByDeviceCodeAsync(System.String)">
            <summary>
            Removes the device authorization, searching by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.IDeviceFlowInteractionService">
            <summary>
             Provide services be used by the user interface to communicate with IdentityServer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowInteractionService.GetAuthorizationContextAsync(System.String)">
            <summary>
            Gets the authorization context asynchronous.
            </summary>
            <param name="userCode">The user code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowInteractionService.HandleRequestAsync(System.String,Duende.IdentityServer.Models.ConsentResponse)">
            <summary>
            Handles the request asynchronous.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="consent">The consent.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IDeviceFlowThrottlingService">
            <summary>
            The device flow throttling service.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowThrottlingService.ShouldSlowDown(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Decides if the requesting client and device code needs to slow down.
            </summary>
            <param name="deviceCode">The device code.</param>
            <param name="details">The device code details.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IEventService">
            <summary>
            Interface for the event service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IEventService.RaiseAsync(Duende.IdentityServer.Events.Event)">
            <summary>
            Raises the specified event.
            </summary>
            <param name="evt">The event.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IEventService.CanRaiseEventType(Duende.IdentityServer.Events.EventTypes)">
            <summary>
            Indicates if the type of event will be persisted.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.IEventSink">
            <summary>
            Models persistence of events
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IEventSink.PersistAsync(Duende.IdentityServer.Events.Event)">
            <summary>
            Raises the specified event.
            </summary>
            <param name="evt">The event.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.IHandleGenerationService">
            <summary>
            Interface for the handle generation service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IHandleGenerationService.GenerateAsync(System.Int32)">
            <summary>
            Generates a handle.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IIdentityServerInteractionService">
            <summary>
             Provide services be used by the user interface to communicate with IdentityServer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.GetAuthorizationContextAsync(System.String)">
            <summary>
            Gets the authorization context.
            </summary>
            <param name="returnUrl">The return URL.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.IsValidReturnUrl(System.String)">
            <summary>
            Indicates if the returnUrl is a valid URL for redirect after login or consent.
            </summary>
            <param name="returnUrl">The return URL.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.GetErrorContextAsync(System.String)">
            <summary>
            Gets the error context.
            </summary>
            <param name="errorId">The error identifier.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.GetLogoutContextAsync(System.String)">
            <summary>
            Gets the logout context.
            </summary>
            <param name="logoutId">The logout identifier.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.CreateLogoutContextAsync">
            <summary>
            Used to create a logoutId if there is not one presently.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.GrantConsentAsync(Duende.IdentityServer.Models.AuthorizationRequest,Duende.IdentityServer.Models.ConsentResponse,System.String)">
            <summary>
            Informs IdentityServer of the user's consent.
            </summary>
            <param name="request">The request.</param>
            <param name="consent">The consent.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.DenyAuthorizationAsync(Duende.IdentityServer.Models.AuthorizationRequest,Duende.IdentityServer.Models.AuthorizationError,System.String)">
            <summary>
            Triggers error back to the client for the authorization request.
            This API is a simpler helper on top of GrantConsentAsync.
            </summary>
            <param name="request">The request.</param>
            <param name="error"></param>
            <param name="errorDescription"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.GetAllUserGrantsAsync">
            <summary>
            Returns a collection representing all of the user's consents and grants.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.RevokeUserConsentAsync(System.String)">
            <summary>
            Revokes all a user's consents and grants for a given client, or for all clients if clientId is null.
            </summary>
            <param name="clientId">The client identifier.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.RevokeTokensForCurrentSessionAsync">
            <summary>
            Revokes all of a user's consents and grants for clients the user has signed into during their current session.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.IIssuerNameService">
            <summary>
            Abstract access to the current issuer name
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIssuerNameService.GetCurrentAsync">
            <summary>
            Returns the issuer name for the current request
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IJwtRequestUriHttpClient">
            <summary>
            Models making HTTP requests for JWTs from the authorize endpoint.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IJwtRequestUriHttpClient.GetJwtAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Gets a JWT from the url.
            </summary>
            <param name="url"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IKeyMaterialService">
            <summary>
            Interface for the key material service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IKeyMaterialService.GetValidationKeysAsync">
            <summary>
            Gets all validation keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IKeyMaterialService.GetSigningCredentialsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the signing credentials.
            </summary>
            <param name="allowedAlgorithms">Collection of algorithms used to filter the server supported algorithms. 
            A value of null or empty indicates that the server default should be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IKeyMaterialService.GetAllSigningCredentialsAsync">
            <summary>
            Gets all signing credentials.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.ILogoutNotificationService">
            <summary>
            Provides features for OIDC signout notifications.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ILogoutNotificationService.GetFrontChannelLogoutNotificationsUrlsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <summary>
            Builds the URLs needed for front-channel logout notification.
            </summary>
            <param name="context">The context for the logout notification.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.ILogoutNotificationService.GetBackChannelLogoutNotificationsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <summary>
            Builds the http back-channel logout request data for the collection of clients.
            </summary>
            <param name="context">The context for the logout notification.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.BackChannelLogoutRequest">
            <summary>
            Information necessary to make a back-channel logout request to a client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.SubjectId">
            <summary>
            Gets the subject identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.LogoutUri">
            <summary>
            Gets or sets the back channel logout URI.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.SessionIdRequired">
            <summary>
            Gets a value indicating whether the session identifier is required.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.Issuer">
            <summary>
            The issuer for the back-channel logout
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.LogoutReason">
            <summary>
            Indicates why the user's session ended.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.InMemoryCorsPolicyService">
            <summary>
            An ICorsPolicyService for use with clients configured with AddInMemoryClients.
            This service will allow any origin included in any client's AllowedCorsOrigins.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.InMemoryCorsPolicyService.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.InMemoryCorsPolicyService.Clients">
            <summary>
            Clients applications list
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.InMemoryCorsPolicyService.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.InMemoryCorsPolicyService},System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Client})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.InMemoryCorsPolicyService"/> class.
            </summary>
            <param name="logger">The logger</param>
            <param name="clients">The clients.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.InMemoryCorsPolicyService.IsOriginAllowedAsync(System.String)">
            <summary>
            Determines whether origin is allowed.
            </summary>
            <param name="origin">The origin.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IPersistedGrantService">
            <summary>
            Implements persisted grant logic
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IPersistedGrantService.GetAllGrantsAsync(System.String)">
            <summary>
            Gets all grants for a given subject ID.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IPersistedGrantService.RemoveAllGrantsAsync(System.String,System.String,System.String)">
            <summary>
            Removes all grants for a given subject id, and optionally client id and session id combination.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier (optional).</param>
            <param name="sessionId">The session id (optional).</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IProfileService">
            <summary>
            This interface allows IdentityServer to connect to your user and profile store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IProfileService.GetProfileDataAsync(Duende.IdentityServer.Models.ProfileDataRequestContext)">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IProfileService.IsActiveAsync(Duende.IdentityServer.Models.IsActiveContext)">
            <summary>
            This method gets called whenever identity server needs to determine if the user is valid or active (e.g. if the user's account has been deactivated since they logged in).
            (e.g. during token issuance or validation).
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IPushedAuthorizationSerializer">
            <summary>
            Contract for a service that can serialize and deserialize pushed
            authorization requests.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IPushedAuthorizationSerializer.Deserialize(System.String)">
            <summary>
            Unprotects and deserializes the pushed authorization parameters
            </summary>
            <param name="parameters">The data protected, serialized raw parameters.</param>
            <returns>The unprotected parameters, parsed into a NameValueCollection.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IPushedAuthorizationSerializer.Serialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Protects and serializes pushed authorization parameters.
            </summary>
            <param name="raw">The raw parameter collection.</param>
            <returns>The parameters, serialized and data protected.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IPushedAuthorizationService">
            <summary>
            Contract for a service that performs high-level operations on pushed
            authorization requests. 
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IPushedAuthorizationService.StoreAsync(Duende.IdentityServer.Services.DeserializedPushedAuthorizationRequest)">
             <summary>
             Serializes, data protects, and stores the pushed authorization request. 
             </summary>
             <param name="pushedAuthorizationRequest">The pushed authorization
             request without serialization or data protection applied</param>
            
        </member>
        <member name="M:Duende.IdentityServer.Services.IPushedAuthorizationService.ConsumeAsync(System.String)">
            <summary>
            Consumes the pushed authorization request, indicating that it should not
            be used again. Repeated use could indicate some form of replay attack,
            but also could indicate that an end user refreshed their browser or
            otherwise retried a request that consumed the pushed authorization
            request.
            </summary>
            <param name="referenceValue">The reference value of the pushed
            authorization request. The reference value is the identifier within the
            request_uri parameter.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IPushedAuthorizationService.GetPushedAuthorizationRequestAsync(System.String)">
            <summary>
            Gets the raw pushed authorization parameters.
            </summary>
            <param name="referenceValue">The reference value of the pushed
            authorization request. The reference value is the identifier within the
            request_uri parameter.</param>
            <returns>The deserialized pushed authorization request, or null if the
            request does not exist or was previously consumed.
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IRefreshTokenService">
            <summary>
            Implements refresh token creation and validation
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IRefreshTokenService.ValidateRefreshTokenAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Validates a refresh token.
            </summary>
            <param name="token">The refresh token.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IRefreshTokenService.CreateRefreshTokenAsync(Duende.IdentityServer.Models.RefreshTokenCreationRequest)">
            <summary>
            Creates the refresh token.
            </summary>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IRefreshTokenService.UpdateRefreshTokenAsync(Duende.IdentityServer.Models.RefreshTokenUpdateRequest)">
            <summary>
            Updates the refresh token.
            </summary>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IReplayCache">
            <summary>
            Interface for replay cache implementations
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IReplayCache.AddAsync(System.String,System.String,System.DateTimeOffset)">
            <summary>
            Adds a handle to the cache 
            </summary>
            <param name="purpose"></param>
            <param name="handle"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IReplayCache.ExistsAsync(System.String,System.String)">
            <summary>
            Checks if a cached handle exists 
            </summary>
            <param name="purpose"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IReturnUrlParser">
            <summary>
            Interface for the return URL parser
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IReturnUrlParser.ParseAsync(System.String)">
            <summary>
            Parses a return URL.
            </summary>
            <param name="returnUrl">The return URL.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IReturnUrlParser.IsValidReturnUrl(System.String)">
            <summary>
            Determines whether the return URL is valid.
            </summary>
            <param name="returnUrl">The return URL.</param>
            <returns>
              <c>true</c> if the return URL is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IServerUrls">
            <summary>
            Configures the per-request URLs and paths into the current server
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.IServerUrls.Origin">
            <summary>
            Gets or sets the origin for IdentityServer. For example, "https://server.acme.com:5001".
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.IServerUrls.BasePath">
            <summary>
            Gets or sets the base path of IdentityServer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.IServerUrls.BaseUrl">
            <summary>
            Gets the base URL for IdentityServer.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.ISessionCoordinationService">
            <summary>
            Service responsible for logic around coordinating client and server session lifetimes.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ISessionCoordinationService.ProcessLogoutAsync(Duende.IdentityServer.Models.UserSession)">
            <summary>
            Coordinates when a user logs out.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ISessionCoordinationService.ProcessExpirationAsync(Duende.IdentityServer.Models.UserSession)">
            <summary>
            Coordinates when a user session has expired.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ISessionCoordinationService.ValidateSessionAsync(Duende.IdentityServer.Services.SessionValidationRequest)">
            <summary>
            Validates client request, and if valid extends server-side session.
            Returns false if the session is invalid, true otherwise.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.SessionValidationRequest">
            <summary>
            Models request to validation a session from a client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.SessionValidationRequest.SubjectId">
            <summary>
            The subject ID
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.SessionValidationRequest.SessionId">
            <summary>
            The session ID
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.SessionValidationRequest.Client">
            <summary>
            The client making the request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.SessionValidationRequest.Type">
            <summary>
            Indicates the type of request.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.SessionValidationType">
            <summary>
            Represent the type of session validation request
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.SessionValidationType.RefreshToken">
            <summary>
            Refresh token use at token endpoint
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.SessionValidationType.AccessToken">
            <summary>
            Access token use by client at userinfo endpoint or at an API that uses introspection
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.ISessionManagementService">
            <summary>
            Session management service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ISessionManagementService.QuerySessionsAsync(Duende.IdentityServer.Stores.SessionQuery,System.Threading.CancellationToken)">
            <summary>
            Queries all the session related data for a user.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ISessionManagementService.RemoveSessionsAsync(Duende.IdentityServer.Services.RemoveSessionsContext,System.Threading.CancellationToken)">
            <summary>
            Removes all the session related data for a user.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.RemoveSessionsContext">
            <summary>
            Models the information to remove a user's session data.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.RemoveSessionsContext.SubjectId">
            <summary>
            The subject ID
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.RemoveSessionsContext.SessionId">
            <summary>
            The session ID
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.RemoveSessionsContext.ClientIds">
            <summary>
            The client ids for which to trigger logout notification, or revoke tokens or consent.
            If not set, then all clients will be removed.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.RemoveSessionsContext.RemoveServerSideSession">
            <summary>
            Removes the server side session for the user's session.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.RemoveSessionsContext.SendBackchannelLogoutNotification">
            <summary>
            Sends a back channel logout notification (if clients are registered for one).
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.RemoveSessionsContext.RevokeTokens">
            <summary>
            Revokes all tokens (e.g. refresh and reference) for the clients.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.RemoveSessionsContext.RevokeConsents">
            <summary>
            Revokes all prior consent granted to the clients.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.ITokenCreationService">
            <summary>
            Logic for creating security tokens
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ITokenCreationService.CreateTokenAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates a token.
            </summary>
            <param name="token">The token description.</param>
            <returns>A protected and serialized security token</returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.ITokenService">
            <summary>
            Logic for creating security tokens
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ITokenService.CreateIdentityTokenAsync(Duende.IdentityServer.Models.TokenCreationRequest)">
            <summary>
            Creates an identity token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>An identity token</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.ITokenService.CreateAccessTokenAsync(Duende.IdentityServer.Models.TokenCreationRequest)">
            <summary>
            Creates an access token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>An access token</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.ITokenService.CreateSecurityTokenAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates a serialized and protected security token.
            </summary>
            <param name="token">The token.</param>
            <returns>A security token in serialized form</returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IUserCodeGenerator">
            <summary>
            Implements device flow user code generation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.IUserCodeGenerator.UserCodeType">
            <summary>
            Gets the type of the user code.
            </summary>
            <value>
            The type of the user code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.IUserCodeGenerator.RetryLimit">
            <summary>
            Gets the retry limit.
            </summary>
            <value>
            The retry limit for getting a unique value.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserCodeGenerator.GenerateAsync">
            <summary>
            Generates the user code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IUserCodeService">
            <summary>
            Implements user code generation
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserCodeService.GetGenerator(System.String)">
            <summary>
            Gets the user code generator.
            </summary>
            <param name="userCodeType">Type of user code.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IUserSession">
            <summary>
            Models a user's authentication session
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.CreateSessionIdAsync(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Creates a session identifier for the signin context and issues the session id cookie.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.GetUserAsync">
            <summary>
            Gets the current authenticated user.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.GetSessionIdAsync">
            <summary>
            Gets the current session identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.EnsureSessionIdCookieAsync">
            <summary>
            Ensures the session identifier cookie asynchronous.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.RemoveSessionIdCookieAsync">
            <summary>
            Removes the session identifier cookie.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.AddClientIdAsync(System.String)">
            <summary>
            Adds a client to the list of clients the user has signed into during their session.
            </summary>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.GetClientListAsync">
            <summary>
            Gets the list of clients the user has signed into during their session.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Test.TestUser">
            <summary>
            In-memory user object for testing. Not intended for modeling users in production.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.ProviderName">
            <summary>
            Gets or sets the provider name.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.ProviderSubjectId">
            <summary>
            Gets or sets the provider subject identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.IsActive">
            <summary>
            Gets or sets if the user is active.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Test.TestUserProfileService">
            <summary>
            Profile service for test users
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IProfileService" />
        </member>
        <member name="F:Duende.IdentityServer.Test.TestUserProfileService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Test.TestUserProfileService.Users">
            <summary>
            The users
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserProfileService.#ctor(Duende.IdentityServer.Test.TestUserStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Test.TestUserProfileService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Test.TestUserProfileService"/> class.
            </summary>
            <param name="users">The users.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserProfileService.GetProfileDataAsync(Duende.IdentityServer.Models.ProfileDataRequestContext)">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserProfileService.IsActiveAsync(Duende.IdentityServer.Models.IsActiveContext)">
            <summary>
            This method gets called whenever identity server needs to determine if the user is valid or active (e.g. if the user's account has been deactivated since they logged in).
            (e.g. during token issuance or validation).
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Test.TestUserResourceOwnerPasswordValidator">
            <summary>
            Resource owner password validator for test users
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserResourceOwnerPasswordValidator.#ctor(Duende.IdentityServer.Test.TestUserStore,Duende.IdentityServer.IClock)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Test.TestUserResourceOwnerPasswordValidator"/> class.
            </summary>
            <param name="users">The users.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserResourceOwnerPasswordValidator.ValidateAsync(Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext)">
            <summary>
            Validates the resource owner password credential
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Test.TestUserStore">
            <summary>
            Store for test users
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.#ctor(System.Collections.Generic.List{Duende.IdentityServer.Test.TestUser})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Test.TestUserStore"/> class.
            </summary>
            <param name="users">The users.</param>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.ValidateCredentials(System.String,System.String)">
            <summary>
            Validates the credentials.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.FindBySubjectId(System.String)">
            <summary>
            Finds the user by subject identifier.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.FindByUsername(System.String)">
            <summary>
            Finds the user by username.
            </summary>
            <param name="username">The username.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.FindByExternalProvider(System.String,System.String)">
            <summary>
            Finds the user by external provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="userId">The user identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.AutoProvisionUser(System.String,System.String,System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            Automatically provisions a user.
            </summary>
            <param name="provider">The provider.</param>
            <param name="userId">The user identifier.</param>
            <param name="claims">The claims.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.CreateUser(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new a user.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Tracing">
            <summary>
            Constants for tracing
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.BasicActivitySource">
            <summary>
            Base ActivitySource
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.StoreActivitySource">
            <summary>
            Store ActivitySource
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.CacheActivitySource">
            <summary>
            Cache ActivitySource
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.ServiceActivitySource">
            <summary>
            Cache ActivitySource
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.ValidationActivitySource">
            <summary>
            Detailed validation ActivitySource
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.ServiceVersion">
            <summary>
            Service version
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.TraceNames.Basic">
            <summary>
            Service name for base traces
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.TraceNames.Store">
            <summary>
            Service name for store traces
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.TraceNames.Cache">
            <summary>
            Service name for caching traces
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.TraceNames.Services">
            <summary>
            Service name for caching traces
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Tracing.TraceNames.Validation">
            <summary>
            Service name for detailed validation traces
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Telemetry">
            <summary>
            Telemetry helpers
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.ServiceName">
            <summary>
            Service name used for Duende IdentityServer.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.ServiceNameExperimental">
            <summary>
            Service name used for the experimental non stable counters from Duende IdentityServer
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Telemetry.Metrics">
            <summary>
            Metrics configuration.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Telemetry.Metrics.Counters">
            <summary>
            Name of counters.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Telemetry.Metrics.Tags">
            <summary>
            Name of tags
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Telemetry.Metrics.TagValues">
            <summary>
            Values for tags
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.Meter">
            <summary>
            Meter for IdentityServer
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.ExperimentalMeter">
            <summary>
            Meter for experimental counters from IdentityServer
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.ActiveRequestCounter">
            <summary>
            Counter for active requests.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.IncreaseActiveRequests(System.String,System.String)">
            <summary>
            Increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.ActiveRequestCounter"/>
            </summary>
            <param name="endpointType">Type name for endpoint</param>
            <param name="path">Path</param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.DecreaseActiveRequests(System.String,System.String)">
            <summary>
            Decrease <see cref="F:Duende.IdentityServer.Telemetry.Metrics.ActiveRequestCounter"/>
            </summary>
            <param name="endpointType">Type name for endpoint</param>
            <param name="path">Path</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.OperationCounter">
            <summary>
            High level number of operations and result/outcome
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.Success(System.String)">
            <summary>
            Helper method to increase the <see cref="F:Duende.IdentityServer.Telemetry.Metrics.OperationCounter"/> with a success event
            </summary>
            <param name="clientId">Client involved in event</param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.Failure(System.String,System.String)">
            <summary>
            Helper method to increase the <see cref="F:Duende.IdentityServer.Telemetry.Metrics.OperationCounter"/> with an error event
            </summary>
            <param name="error">Error message</param>
            <param name="clientId">Client involved in event</param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.UnHandledException(System.Exception)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.OperationCounter"/> on internal errors
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.ApiSecretValidationCounter">
            <summary>
            Successful Api Secret validations
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.ApiSecretValidation(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.ApiSecretValidationCounter"/>
            </summary>
            <param name="apiId">Api Id</param>
            <param name="authMethod">Authentication Method</param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.ApiSecretValidationFailure(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="M:Duende.IdentityServer.Telemetry.Metrics.ApiSecretValidationFailure(System.String,System.String)"/> on errors
            </summary>
            <param name="clientId">Client Id</param>
            <param name="message">Error message</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.BackChannelAuthenticationCounter">
            <summary>
            Successful back channel (CIBA) authentications counter
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.BackChannelAuthentication(System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.BackChannelAuthenticationCounter"/>
            </summary>
            <param name="clientId">Client Id</param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.BackChannelAuthenticationFailure(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.BackChannelAuthenticationCounter"/> on errors
            </summary>
            <param name="clientId"></param>
            <param name="error"></param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.ClientValidationCounter">
            <summary>
            Client configuration validation
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.ClientValidation(System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.ClientValidationCounter"/>
            </summary>
            <param name="clientId"></param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.ClientValidationFailure(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.ClientValidationCounter"/> on errors
            </summary>
            <param name="clientId">Client id</param>
            <param name="error">Error</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.ClientSecretValidationCounter">
            <summary>
            Successful Client Secret validations
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.ClientSecretValidation(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.ClientSecretValidationCounter"/>
            </summary>
            <param name="clientId"></param>
            <param name="authMethod"></param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.ClientSecretValidationFailure(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.ClientSecretValidationCounter"/> on failure.
            </summary>
            <param name="clientId">Client Id</param>
            <param name="message">Error message</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.DeviceAuthenticationCounter">
            <summary>
            Successful device code authentication counter
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.DeviceAuthentication(System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.DeviceAuthenticationCounter"/>
            </summary>
            <param name="clientId">Client ID</param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.DeviceAuthenticationFailure(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.DeviceAuthenticationCounter"/> on error
            </summary>
            <param name="clientId">Client Id</param>
            <param name="error">Error</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.DynamicIdentityProviderValidationCounter">
            <summary>
            Dynamic identityprovider validations
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.DynamicIdentityProviderValidation(System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.DynamicIdentityProviderValidationCounter"/>
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.DynamicIdentityProviderValidationFailure(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.DynamicIdentityProviderValidationCounter"/> on errors
            </summary>
            <param name="scheme">Scheme name</param>
            <param name="error">Error message</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.IntrospectionCounter">
            <summary>
            Introspection success counter
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.Introspection(System.String,System.Boolean)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.IntrospectionCounter"/>
            </summary>
            <param name="callerId"></param>
            <param name="active">Is the token valid/active?</param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.IntrospectionFailure(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.IntrospectionCounter"/> on errors
            </summary>
            <param name="callerId">Api resource or client Id</param>
            <param name="error">Error message</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.PushedAuthorizationRequestCounter">
            <summary>
            Pushed Authorization Request Counter
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.PushedAuthorizationRequest(System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.PushedAuthorizationRequestCounter"/>
            </summary>
            <param name="clientId"></param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.PushedAuthorizationRequestFailure(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.PushedAuthorizationRequestCounter"/> on errors.
            </summary>
            <param name="clientId"></param>
            <param name="error">Error reason</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.ResourceOwnerAuthenticationCounter">
            <summary>
            Resource Owner Authentication Counter
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.ResourceOwnerAuthentication(System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.ResourceOwnerAuthenticationCounter"/>
            </summary>
            <param name="clientId"></param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.ResourceOwnerAuthenticationFailure(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.ResourceOwnerAuthenticationCounter"/> on errors
            </summary>
            <param name="clientId">Client Id</param>
            <param name="message">Error message</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.RevocationCounter">
            <summary>
            Revocation success counter.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.Revocation(System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.RevocationCounter"/>
            </summary>
            <param name="clientId">Client id</param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.RevocationFailure(System.String,System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.RevocationCounter"/> on errors.
            </summary>
            <param name="clientId">Client id</param>
            <param name="error">Error</param>
        </member>
        <member name="F:Duende.IdentityServer.Telemetry.Metrics.TokenIssuedCounter">
            <summary>
            Successful token issuance counter.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.TokenIssued(System.String,System.String,System.Nullable{Duende.IdentityServer.Validation.AuthorizeRequestType})">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.TokenIssuedCounter"/>
            </summary>
            <param name="clientId">Client Id</param>
            <param name="grantType">Grant Type</param>
            <param name="requestType">Type of authorization request</param>
        </member>
        <member name="M:Duende.IdentityServer.Telemetry.Metrics.TokenIssuedFailure(System.String,System.String,System.Nullable{Duende.IdentityServer.Validation.AuthorizeRequestType},System.String)">
            <summary>
            Helper method to increase <see cref="F:Duende.IdentityServer.Telemetry.Metrics.TokenIssuedCounter"/> on errors
            </summary>
            <param name="clientId">Client Id</param>
            <param name="grantType">Grant Type</param>
            <param name="error">Error</param>
            <param name="requestType">Type of authorization request</param>
        </member>
        <member name="T:Duende.License">
            <summary>
            Models the license for IdentityServer.
            </summary>
        </member>
        <member name="M:Duende.License.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Duende.License.Initialize(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Initializes the license from the claims in the key.
            </summary>
        </member>
        <member name="P:Duende.License.SerialNumber">
            <summary>
            The serial number
            </summary>
        </member>
        <member name="P:Duende.License.CompanyName">
            <summary>
            The company name
            </summary>
        </member>
        <member name="P:Duende.License.ContactInfo">
            <summary>
            The company contact info
            </summary>
        </member>
        <member name="P:Duende.License.Expiration">
            <summary>
            The license expiration
            </summary>
        </member>
        <member name="P:Duende.License.Edition">
            <summary>
            The license edition 
            </summary>
        </member>
        <member name="P:Duende.License.Extras">
            <summary>
            Extras
            </summary>
        </member>
        <member name="T:Duende.License.LicenseEdition">
            <summary>
            Models the license tier
            </summary>
        </member>
        <member name="F:Duende.License.LicenseEdition.Enterprise">
            <summary>
            Enterprise
            </summary>
        </member>
        <member name="F:Duende.License.LicenseEdition.Business">
            <summary>
            Business
            </summary>
        </member>
        <member name="F:Duende.License.LicenseEdition.Starter">
            <summary>
            Starter
            </summary>
        </member>
        <member name="F:Duende.License.LicenseEdition.Community">
            <summary>
            Community
            </summary>
        </member>
        <member name="F:Duende.License.LicenseEdition.Bff">
            <summary>
            Bff
            </summary>
        </member>
        <member name="M:Duende.License.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional">
            <summary>
            Builder extension methods for registering additional services 
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddExtensionGrantValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the extension grant validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddRedirectUriValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a redirect URI validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddAppAuthRedirectUriValidator(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds an "AppAuth" (OAuth 2.0 for Native Apps) compliant redirect URI validator (does strict validation but also allows http://127.0.0.1 with random port)
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddResourceOwnerValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the resource owner validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddProfileService``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the profile service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddResourceValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a resource validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddScopeParser``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a scope parser.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddClientStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a client store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddResourceStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a resource store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddDeviceFlowStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a device flow store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddPersistedGrantStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a persisted grant store.
            </summary>
            <typeparam name="T">The type of the concrete grant store that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddSigningKeyStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a signing key store.
            </summary>
            <typeparam name="T">The type of the concrete store that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddPushedAuthorizationRequestStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a pushed authorization request store.
            </summary>
            <typeparam name="T">The type of the concrete store that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddCorsPolicyService``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a CORS policy service.
            </summary>
            <typeparam name="T">The type of the concrete CORS policy service that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddCorsPolicyCache``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a CORS policy service cache.
            </summary>
            <typeparam name="T">The type of the concrete CORS policy service that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddSecretParser``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the secret parser.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddSecretValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the secret validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddClientStoreCache``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the client store cache.
            </summary>
            <typeparam name="T">The type of the concrete client store class that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddResourceStoreCache``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the client store cache.
            </summary>
            <typeparam name="T">The type of the concrete scope store class that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddIdentityProviderStoreCache``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the identity provider store cache.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddAuthorizeInteractionResponseGenerator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the authorize interaction response generator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddCustomAuthorizeRequestValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the custom authorize request validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddCustomTokenRequestValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the custom authorize request validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddCustomBackchannelAuthenticationRequestValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the custom backchannel authentication request validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddJwtBearerClientAuthentication(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds support for client authentication using JWT bearer assertions.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddClientConfigurationValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a client configuration validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddIdentityProviderConfigurationValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds an IdentityProvider configuration validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddMutualTlsSecretValidators(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the X509 secret validators for mutual TLS.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddBackChannelLogoutService``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a custom back-channel logout service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddBackChannelLogoutHttpClient(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Adds configuration for the HttpClient used for back-channel logout notifications.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configureClient">The configuration callback.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddJwtRequestUriHttpClient(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Adds configuration for the HttpClient used for JWT request_uri requests.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configureClient">The configuration callback.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddAuthorizationParametersMessageStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a custom authorization request parameter store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddUserSession``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a custom user session.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddIdentityProviderStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds an identity provider store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddBackchannelAuthenticationUserValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the backchannel login user validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddBackchannelAuthenticationUserNotificationService``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the user notification service for backchannel login requests.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddLegacyClock(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the legacy clock based on the pre-.NET8 ISystemClock.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore">
            <summary>
            Builder extension methods for registering core services
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddRequiredPlatformServices(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the required platform services.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddCookieAuthentication(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the default infrastructure for cookie authentication in IdentityServer.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddDefaultCookieHandlers(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the default cookie handlers and corresponding configuration
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddCookieAuthenticationExtensions(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the necessary decorators for cookie authentication required by IdentityServer
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddDefaultEndpoints(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the default endpoints.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddEndpoint``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.String,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Adds an endpoint.
            </summary>
            <typeparam name="TEndpoint"></typeparam>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddHttpWriter``2(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds an <see cref="T:Duende.IdentityServer.Hosting.IHttpResponseWriter`1"/> for an <see cref="T:Duende.IdentityServer.Hosting.IEndpointResult"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddCoreServices(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the core services.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddPluggableServices(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the pluggable services.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddKeyManagement(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds key management services.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddDynamicProvidersCore(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the core services for dynamic external providers.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddValidators(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the validators.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddResponseGenerators(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the response generators.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddDefaultSecretParsers(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the default secret parsers.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddDefaultSecretValidators(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the default secret validators.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddLicenseSummary(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the license summary, which provides information about the current license usage.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto">
            <summary>
            Builder extension methods for registering crypto services
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Sets the signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="credential">The credential.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Sets the signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="certificate">The certificate.</param>
            <param name="signingAlgorithm">The signing algorithm (defaults to RS256)</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException">X509 certificate does not have a private key.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.String,System.Security.Cryptography.X509Certificates.StoreLocation,Duende.IdentityServer.Configuration.NameType,System.String)">
            <summary>
            Sets the signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="location">The location.</param>
            <param name="nameType">Name parameter can be either a distinguished name or a thumbprint</param>
            <param name="signingAlgorithm">The signing algorithm (defaults to RS256)</param>
            <exception cref="T:System.InvalidOperationException">certificate: '{name}'</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.SecurityKey,System.String)">
            <summary>
            Sets the signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="key">The key.</param>
            <param name="signingAlgorithm">The signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.RsaSecurityKey,Duende.IdentityServer.IdentityServerConstants.RsaSigningAlgorithm)">
            <summary>
            Sets an RSA-based signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="key">The RSA key.</param>
            <param name="signingAlgorithm">The signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.ECDsaSecurityKey,Duende.IdentityServer.IdentityServerConstants.ECDsaSigningAlgorithm)">
            <summary>
            Sets an ECDsa-based signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="key">The ECDsa key.</param>
            <param name="signingAlgorithm">The signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddDeveloperSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Boolean,System.String,Duende.IdentityServer.IdentityServerConstants.RsaSigningAlgorithm)">
            <summary>
            Sets the temporary signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="persistKey">Specifies if the temporary key should be persisted to disk.</param>
            <param name="filename">The filename.</param>
            <param name="signingAlgorithm">The signing algorithm (defaults to RS256)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddValidationKey(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Duende.IdentityServer.Models.SecurityKeyInfo[])">
            <summary>
            Adds the validation keys.
            </summary>
            <param name="builder">The builder.</param>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddValidationKey(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.RsaSecurityKey,Duende.IdentityServer.IdentityServerConstants.RsaSigningAlgorithm)">
            <summary>
            Adds an RSA-based validation key.
            </summary>
            <param name="builder">The builder.</param>
            <param name="key">The RSA key</param>
            <param name="signingAlgorithm">The RSA-based signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddValidationKey(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.ECDsaSecurityKey,Duende.IdentityServer.IdentityServerConstants.ECDsaSigningAlgorithm)">
            <summary>
            Adds an ECDSA-based validation key.
            </summary>
            <param name="builder">The builder.</param>
            <param name="key">The ECDSA key</param>
            <param name="signingAlgorithm">The ECDSA-based signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddValidationKey(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Adds the validation key.
            </summary>
            <param name="builder">The builder.</param>
            <param name="certificate">The certificate.</param>
            <param name="signingAlgorithm">The signing algorithm</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddValidationKey(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.String,System.Security.Cryptography.X509Certificates.StoreLocation,Duende.IdentityServer.Configuration.NameType,System.String)">
            <summary>
            Adds the validation key from the certificate store.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="location">The location.</param>
            <param name="nameType">Name parameter can be either a distinguished name or a thumbprint</param>
            <param name="signingAlgorithm">The signing algorithm</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory">
            <summary>
            Builder extension methods for registering in-memory services
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryCaching(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the in memory caching.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryIdentityResources(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.IdentityResource})">
            <summary>
            Adds the in memory identity resources.
            </summary>
            <param name="builder">The builder.</param>
            <param name="identityResources">The identity resources.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryIdentityResources(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Adds the in memory identity resources.
            </summary>
            <param name="builder">The builder.</param>
            <param name="section">The configuration section containing the configuration data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryApiResources(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiResource})">
            <summary>
            Adds the in memory API resources.
            </summary>
            <param name="builder">The builder.</param>
            <param name="apiResources">The API resources.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryApiResources(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Adds the in memory API resources.
            </summary>
            <param name="builder">The builder.</param>
            <param name="section">The configuration section containing the configuration data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryApiScopes(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiScope})">
            <summary>
            Adds the in memory API scopes.
            </summary>
            <param name="builder">The builder.</param>
            <param name="apiScopes">The API scopes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryApiScopes(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Adds the in memory scopes.
            </summary>
            <param name="builder">The builder.</param>
            <param name="section">The configuration section containing the configuration data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryClients(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.ICollection{Duende.IdentityServer.Models.Client})">
            <summary>
            Adds in memory clients using an ICollection. This allows
            Duende.Configuration to use in memory clients for demos and testing.
            </summary>
            <param name="builder">The builder.</param>
            <param name="clients">The clients.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryClients(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Client})">
            <summary>
            Adds the in memory clients.
            </summary>
            <param name="builder">The builder.</param>
            <param name="clients">The clients.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryClients(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Adds the in memory clients.
            </summary>
            <param name="builder">The builder.</param>
            <param name="section">The configuration section containing the configuration data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryPersistedGrants(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the in memory stores.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryPushedAuthorizationRequests(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the in memory pushed authorization request store.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SessionManagementServiceCollectionExtensions">
            <summary>
            Extension methods for adding session management
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SessionManagementServiceCollectionExtensions.AddServerSideSessions``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a server-side session store using the provided store type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SessionManagementServiceCollectionExtensions.AddServerSideSessions(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a server-side session store using the in-memory store
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SessionManagementServiceCollectionExtensions.AddServerSideSessionStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a server-side session store using the supplied session store implementation
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions">
            <summary>
            DI extension methods for adding IdentityServer
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions.AddIdentityServerBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a builder.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions.AddIdentityServer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds IdentityServer.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions.AddIdentityServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Duende.IdentityServer.Configuration.IdentityServerOptions})">
            <summary>
            Adds IdentityServer.
            </summary>
            <param name="services">The services.</param>
            <param name="setupAction">The setup action.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions.AddIdentityServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds the IdentityServer.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions.AddOidcStateDataFormatterCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
            <summary>
            Configures the OpenIdConnect handlers to persist the state parameter into the server-side IDistributedCache.
            </summary>
            <param name="services">The services.</param>
            <param name="schemes">The schemes to configure. If none provided, then all OpenIdConnect schemes will use the cache.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder">
            <summary>
            IdentityServer builder Interface
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder.Services">
            <summary>
            Gets the services.
            </summary>
            <value>
            The services.
            </value>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderDynamicSchemesExtensions">
            <summary>
            Add extension methods for configuring generic dynamic providers.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderDynamicSchemesExtensions.AddInMemoryIdentityProviders(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.IdentityProvider})">
            <summary>
            Adds the in memory identity provider store.
            </summary>
            <param name="builder">The builder.</param>
            <param name="providers"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderOidcExtensions">
            <summary>
            Add extension methods for configuring OIDC dynamic providers.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderOidcExtensions.AddOidcDynamicProvider(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the OIDC dynamic provider feature.
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderOidcExtensions.AddInMemoryOidcProviders(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.OidcProvider})">
            <summary>
            Adds the in memory OIDC provider store.
            </summary>
            <param name="builder">The builder.</param>
            <param name="providers"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions">
            <summary>
            Extensions for registering the local access token authentication handler
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions.AddLocalApiAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Security.Claims.ClaimsPrincipal,System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}})">
            <summary>
            Adds support for local APIs
            </summary>
            <param name="services">The service collection</param>
            <param name="transformationFunc">Function to transform the resulting principal</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions.AddLocalApi(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)">
            <summary>
            Registers the authentication handler for local APIs.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions.AddLocalApi(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions})">
            <summary>
            Registers the authentication handler for local APIs.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configureOptions">The configure options.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions.AddLocalApi(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions})">
            <summary>
            Registers the authentication handler for local APIs.
            </summary>
            <param name="builder">The builder.</param>
            <param name="authenticationScheme">The authentication scheme.</param>
            <param name="configureOptions">The configure options.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions.AddLocalApi(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions})">
            <summary>
            Registers the authentication handler for local APIs.
            </summary>
            <param name="builder">The builder.</param>
            <param name="authenticationScheme">The authentication scheme.</param>
            <param name="displayName">The display name of this scheme.</param>
            <param name="configureOptions">The configure options.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServerSideSessionCleanupHost">
            <summary>
            Helper to cleanup expired server side sessions.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServerSideSessionCleanupHost.#ctor(System.IServiceProvider,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Microsoft.Extensions.DependencyInjection.ServerSideSessionCleanupHost})">
            <summary>
            Constructor for ServerSideSessionCleanupHost.
            </summary>
            <param name="serviceProvider"></param>
            <param name="options"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServerSideSessionCleanupHost.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the token cleanup polling.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServerSideSessionCleanupHost.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the token cleanup polling.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensions">
            <summary>
            Extension methods for the IdentityServer builder
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensions.AddTestUsers(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.List{Duende.IdentityServer.Test.TestUser})">
            <summary>
            Adds test users.
            </summary>
            <param name="builder">The builder.</param>
            <param name="users">The users.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.TestBackchannelLoginUserValidator">
            <summary>
            Implementation of IBackchannelAuthenticationUserValidator using the test user store.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TestBackchannelLoginUserValidator.#ctor(Duende.IdentityServer.Test.TestUserStore)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TestBackchannelLoginUserValidator.ValidateRequestAsync(Duende.IdentityServer.Validation.BackchannelAuthenticationUserValidatorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IdentityServerApplicationBuilderExtensions">
            <summary>
            Pipeline extension methods for adding IdentityServer
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.IdentityServerApplicationBuilderExtensions.UseIdentityServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.IdentityServerMiddlewareOptions)">
            <summary>
            Adds IdentityServer to the pipeline.
            </summary>
            <param name="app">The application.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IdentityServerMiddlewareOptions">
            <summary>
            Options for the IdentityServer middleware
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IdentityServerMiddlewareOptions.AuthenticationMiddleware">
            <summary>
            Callback to wire up an authentication middleware
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.AuthenticationManagerExtensions">
            <summary>
            Extension methods for signin/out using the IdentityServer authentication scheme.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.AuthenticationManagerExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,Duende.IdentityServer.IdentityServerUser)">
            <summary>
            Signs the user in.
            </summary>
            <param name="context">The manager.</param>
            <param name="user">The IdentityServer user.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.AuthenticationManagerExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,Duende.IdentityServer.IdentityServerUser,Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Signs the user in.
            </summary>
            <param name="context">The manager.</param>
            <param name="user">The IdentityServer user.</param>
            <param name="properties">The authentication properties.</param>
            <returns></returns>
        </member>
    </members>
</doc>
